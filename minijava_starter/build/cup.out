===== Terminals =====
[0]EOF [1]error [2]DISPLAY [3]CLASS [4]PUBLIC 
[5]STATIC [6]VOID [7]MAIN [8]EXTENDS [9]INT 
[10]BOOLEAN [11]IF [12]ELSE [13]WHILE [14]PRINTLN 
[15]LENGTH [16]TRUE [17]FALSE [18]THIS [19]NEW 
[20]RETURN [21]STRING [22]PLUS [23]MINUS [24]BECOMES 
[25]AND [26]LT [27]MULT [28]NOT [29]LPAREN 
[30]RPAREN [31]LBRACKET [32]RBRACKET [33]LCURLYBRACKET [34]RCURLYBRACKET 
[35]SEMICOLON [36]PERIOD [37]COMMA [38]IDENTIFIER [39]INTEGER_LITERAL 


===== Non terminals =====
[0]Program [1]MainClass [2]ClassDeclList [3]ClassDecl [4]MethodDeclList 
[5]MethodDecl [6]VarDeclList [7]VarDecl [8]FormalList [9]Formal 
[10]Type [11]StatementList [12]Statement [13]BlockStatement [14]IfStatement 
[15]WhileStatement [16]PrintStatement [17]AssignStatement [18]ArrayAssignStatement [19]DisplayStatement 
[20]Expression [21]ExpressionList [22]Identifier 

===== Productions =====
[0] Program ::= MainClass ClassDeclList 
[1] $START ::= Program EOF 
[2] Program ::= MainClass 
[3] MainClass ::= CLASS Identifier LCURLYBRACKET PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET Identifier RPAREN LCURLYBRACKET Statement RCURLYBRACKET RCURLYBRACKET 
[4] ClassDeclList ::= ClassDecl 
[5] ClassDeclList ::= ClassDeclList ClassDecl 
[6] ClassDecl ::= CLASS Identifier EXTENDS Identifier LCURLYBRACKET VarDeclList MethodDeclList RCURLYBRACKET 
[7] ClassDecl ::= CLASS Identifier EXTENDS Identifier LCURLYBRACKET VarDeclList RCURLYBRACKET 
[8] ClassDecl ::= CLASS Identifier EXTENDS Identifier LCURLYBRACKET MethodDeclList RCURLYBRACKET 
[9] ClassDecl ::= CLASS Identifier EXTENDS Identifier LCURLYBRACKET RCURLYBRACKET 
[10] ClassDecl ::= CLASS Identifier LCURLYBRACKET VarDeclList MethodDeclList RCURLYBRACKET 
[11] ClassDecl ::= CLASS Identifier LCURLYBRACKET VarDeclList RCURLYBRACKET 
[12] ClassDecl ::= CLASS Identifier LCURLYBRACKET MethodDeclList RCURLYBRACKET 
[13] ClassDecl ::= CLASS Identifier LCURLYBRACKET RCURLYBRACKET 
[14] MethodDeclList ::= MethodDecl 
[15] MethodDeclList ::= MethodDeclList MethodDecl 
[16] MethodDecl ::= PUBLIC Type Identifier LPAREN FormalList RPAREN LCURLYBRACKET VarDeclList StatementList RETURN Expression SEMICOLON RCURLYBRACKET 
[17] MethodDecl ::= PUBLIC Type Identifier LPAREN FormalList RPAREN LCURLYBRACKET VarDeclList RETURN Expression SEMICOLON RCURLYBRACKET 
[18] MethodDecl ::= PUBLIC Type Identifier LPAREN FormalList RPAREN LCURLYBRACKET StatementList RETURN Expression SEMICOLON RCURLYBRACKET 
[19] MethodDecl ::= PUBLIC Type Identifier LPAREN FormalList RPAREN LCURLYBRACKET RETURN Expression SEMICOLON RCURLYBRACKET 
[20] MethodDecl ::= PUBLIC Type Identifier LPAREN RPAREN LCURLYBRACKET VarDeclList StatementList RETURN Expression SEMICOLON RCURLYBRACKET 
[21] MethodDecl ::= PUBLIC Type Identifier LPAREN RPAREN LCURLYBRACKET VarDeclList RETURN Expression SEMICOLON RCURLYBRACKET 
[22] MethodDecl ::= PUBLIC Type Identifier LPAREN RPAREN LCURLYBRACKET StatementList RETURN Expression SEMICOLON RCURLYBRACKET 
[23] MethodDecl ::= PUBLIC Type Identifier LPAREN RPAREN LCURLYBRACKET RETURN Expression SEMICOLON RCURLYBRACKET 
[24] VarDeclList ::= VarDecl 
[25] VarDeclList ::= VarDeclList VarDecl 
[26] VarDecl ::= Type Identifier SEMICOLON 
[27] FormalList ::= Formal 
[28] FormalList ::= FormalList COMMA Formal 
[29] Formal ::= Type Identifier 
[30] Type ::= INT LBRACKET RBRACKET 
[31] Type ::= BOOLEAN 
[32] Type ::= INT 
[33] Type ::= IDENTIFIER 
[34] StatementList ::= Statement 
[35] StatementList ::= StatementList Statement 
[36] Statement ::= BlockStatement 
[37] Statement ::= IfStatement 
[38] Statement ::= WhileStatement 
[39] Statement ::= PrintStatement 
[40] Statement ::= AssignStatement 
[41] Statement ::= ArrayAssignStatement 
[42] Statement ::= DisplayStatement 
[43] BlockStatement ::= LCURLYBRACKET StatementList RCURLYBRACKET 
[44] IfStatement ::= IF LPAREN Expression RPAREN Statement ELSE Statement 
[45] IfStatement ::= IF LPAREN Expression RPAREN Statement 
[46] WhileStatement ::= WHILE LPAREN Expression RPAREN Statement 
[47] PrintStatement ::= PRINTLN LPAREN Expression RPAREN SEMICOLON 
[48] AssignStatement ::= Identifier BECOMES Expression SEMICOLON 
[49] ArrayAssignStatement ::= Identifier LBRACKET Expression RBRACKET BECOMES Expression SEMICOLON 
[50] DisplayStatement ::= DISPLAY Expression SEMICOLON 
[51] ExpressionList ::= Expression 
[52] ExpressionList ::= ExpressionList COMMA Expression 
[53] Expression ::= Expression AND Expression 
[54] Expression ::= Expression LT Expression 
[55] Expression ::= Expression PLUS Expression 
[56] Expression ::= Expression MINUS Expression 
[57] Expression ::= Expression MULT Expression 
[58] Expression ::= Expression LBRACKET Expression RBRACKET 
[59] Expression ::= Expression PERIOD LENGTH 
[60] Expression ::= Expression PERIOD Identifier LPAREN ExpressionList RPAREN 
[61] Expression ::= Expression PERIOD Identifier LPAREN RPAREN 
[62] Expression ::= INTEGER_LITERAL 
[63] Expression ::= TRUE 
[64] Expression ::= FALSE 
[65] Expression ::= IDENTIFIER 
[66] Expression ::= THIS 
[67] Expression ::= NEW INT LBRACKET Expression RBRACKET 
[68] Expression ::= NEW Identifier LPAREN RPAREN 
[69] Expression ::= NOT Expression 
[70] Expression ::= LPAREN Expression RPAREN 
[71] Identifier ::= IDENTIFIER 

===== Viable Prefix Recognizer =====
START lalr_state [0]: {
  [Program ::= (*) MainClass , {EOF }]
  [$START ::= (*) Program EOF , {EOF }]
  [MainClass ::= (*) CLASS Identifier LCURLYBRACKET PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET Identifier RPAREN LCURLYBRACKET Statement RCURLYBRACKET RCURLYBRACKET , {EOF CLASS }]
  [Program ::= (*) MainClass ClassDeclList , {EOF }]
}
transition on CLASS to state [3]
transition on MainClass to state [2]
transition on Program to state [1]

-------------------
lalr_state [1]: {
  [$START ::= Program (*) EOF , {EOF }]
}
transition on EOF to state [192]

-------------------
lalr_state [2]: {
  [ClassDecl ::= (*) CLASS Identifier LCURLYBRACKET VarDeclList RCURLYBRACKET , {EOF CLASS }]
  [ClassDecl ::= (*) CLASS Identifier EXTENDS Identifier LCURLYBRACKET MethodDeclList RCURLYBRACKET , {EOF CLASS }]
  [Program ::= MainClass (*) , {EOF }]
  [ClassDeclList ::= (*) ClassDeclList ClassDecl , {EOF CLASS }]
  [ClassDecl ::= (*) CLASS Identifier LCURLYBRACKET RCURLYBRACKET , {EOF CLASS }]
  [ClassDecl ::= (*) CLASS Identifier LCURLYBRACKET VarDeclList MethodDeclList RCURLYBRACKET , {EOF CLASS }]
  [ClassDecl ::= (*) CLASS Identifier EXTENDS Identifier LCURLYBRACKET VarDeclList RCURLYBRACKET , {EOF CLASS }]
  [ClassDeclList ::= (*) ClassDecl , {EOF CLASS }]
  [ClassDecl ::= (*) CLASS Identifier LCURLYBRACKET MethodDeclList RCURLYBRACKET , {EOF CLASS }]
  [ClassDecl ::= (*) CLASS Identifier EXTENDS Identifier LCURLYBRACKET RCURLYBRACKET , {EOF CLASS }]
  [ClassDecl ::= (*) CLASS Identifier EXTENDS Identifier LCURLYBRACKET VarDeclList MethodDeclList RCURLYBRACKET , {EOF CLASS }]
  [Program ::= MainClass (*) ClassDeclList , {EOF }]
}
transition on CLASS to state [106]
transition on ClassDeclList to state [105]
transition on ClassDecl to state [104]

-------------------
lalr_state [3]: {
  [Identifier ::= (*) IDENTIFIER , {LCURLYBRACKET }]
  [MainClass ::= CLASS (*) Identifier LCURLYBRACKET PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET Identifier RPAREN LCURLYBRACKET Statement RCURLYBRACKET RCURLYBRACKET , {EOF CLASS }]
}
transition on Identifier to state [5]
transition on IDENTIFIER to state [4]

-------------------
lalr_state [4]: {
  [Identifier ::= IDENTIFIER (*) , {EXTENDS BECOMES LPAREN RPAREN LBRACKET LCURLYBRACKET SEMICOLON COMMA }]
}

-------------------
lalr_state [5]: {
  [MainClass ::= CLASS Identifier (*) LCURLYBRACKET PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET Identifier RPAREN LCURLYBRACKET Statement RCURLYBRACKET RCURLYBRACKET , {EOF CLASS }]
}
transition on LCURLYBRACKET to state [6]

-------------------
lalr_state [6]: {
  [MainClass ::= CLASS Identifier LCURLYBRACKET (*) PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET Identifier RPAREN LCURLYBRACKET Statement RCURLYBRACKET RCURLYBRACKET , {EOF CLASS }]
}
transition on PUBLIC to state [7]

-------------------
lalr_state [7]: {
  [MainClass ::= CLASS Identifier LCURLYBRACKET PUBLIC (*) STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET Identifier RPAREN LCURLYBRACKET Statement RCURLYBRACKET RCURLYBRACKET , {EOF CLASS }]
}
transition on STATIC to state [8]

-------------------
lalr_state [8]: {
  [MainClass ::= CLASS Identifier LCURLYBRACKET PUBLIC STATIC (*) VOID MAIN LPAREN STRING LBRACKET RBRACKET Identifier RPAREN LCURLYBRACKET Statement RCURLYBRACKET RCURLYBRACKET , {EOF CLASS }]
}
transition on VOID to state [9]

-------------------
lalr_state [9]: {
  [MainClass ::= CLASS Identifier LCURLYBRACKET PUBLIC STATIC VOID (*) MAIN LPAREN STRING LBRACKET RBRACKET Identifier RPAREN LCURLYBRACKET Statement RCURLYBRACKET RCURLYBRACKET , {EOF CLASS }]
}
transition on MAIN to state [10]

-------------------
lalr_state [10]: {
  [MainClass ::= CLASS Identifier LCURLYBRACKET PUBLIC STATIC VOID MAIN (*) LPAREN STRING LBRACKET RBRACKET Identifier RPAREN LCURLYBRACKET Statement RCURLYBRACKET RCURLYBRACKET , {EOF CLASS }]
}
transition on LPAREN to state [11]

-------------------
lalr_state [11]: {
  [MainClass ::= CLASS Identifier LCURLYBRACKET PUBLIC STATIC VOID MAIN LPAREN (*) STRING LBRACKET RBRACKET Identifier RPAREN LCURLYBRACKET Statement RCURLYBRACKET RCURLYBRACKET , {EOF CLASS }]
}
transition on STRING to state [12]

-------------------
lalr_state [12]: {
  [MainClass ::= CLASS Identifier LCURLYBRACKET PUBLIC STATIC VOID MAIN LPAREN STRING (*) LBRACKET RBRACKET Identifier RPAREN LCURLYBRACKET Statement RCURLYBRACKET RCURLYBRACKET , {EOF CLASS }]
}
transition on LBRACKET to state [13]

-------------------
lalr_state [13]: {
  [MainClass ::= CLASS Identifier LCURLYBRACKET PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET (*) RBRACKET Identifier RPAREN LCURLYBRACKET Statement RCURLYBRACKET RCURLYBRACKET , {EOF CLASS }]
}
transition on RBRACKET to state [14]

-------------------
lalr_state [14]: {
  [Identifier ::= (*) IDENTIFIER , {RPAREN }]
  [MainClass ::= CLASS Identifier LCURLYBRACKET PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET (*) Identifier RPAREN LCURLYBRACKET Statement RCURLYBRACKET RCURLYBRACKET , {EOF CLASS }]
}
transition on Identifier to state [15]
transition on IDENTIFIER to state [4]

-------------------
lalr_state [15]: {
  [MainClass ::= CLASS Identifier LCURLYBRACKET PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET Identifier (*) RPAREN LCURLYBRACKET Statement RCURLYBRACKET RCURLYBRACKET , {EOF CLASS }]
}
transition on RPAREN to state [16]

-------------------
lalr_state [16]: {
  [MainClass ::= CLASS Identifier LCURLYBRACKET PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET Identifier RPAREN (*) LCURLYBRACKET Statement RCURLYBRACKET RCURLYBRACKET , {EOF CLASS }]
}
transition on LCURLYBRACKET to state [17]

-------------------
lalr_state [17]: {
  [BlockStatement ::= (*) LCURLYBRACKET StatementList RCURLYBRACKET , {RCURLYBRACKET }]
  [Statement ::= (*) AssignStatement , {RCURLYBRACKET }]
  [Statement ::= (*) IfStatement , {RCURLYBRACKET }]
  [AssignStatement ::= (*) Identifier BECOMES Expression SEMICOLON , {RCURLYBRACKET }]
  [Identifier ::= (*) IDENTIFIER , {BECOMES LBRACKET }]
  [IfStatement ::= (*) IF LPAREN Expression RPAREN Statement , {RCURLYBRACKET }]
  [MainClass ::= CLASS Identifier LCURLYBRACKET PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET Identifier RPAREN LCURLYBRACKET (*) Statement RCURLYBRACKET RCURLYBRACKET , {EOF CLASS }]
  [Statement ::= (*) DisplayStatement , {RCURLYBRACKET }]
  [Statement ::= (*) PrintStatement , {RCURLYBRACKET }]
  [Statement ::= (*) BlockStatement , {RCURLYBRACKET }]
  [DisplayStatement ::= (*) DISPLAY Expression SEMICOLON , {RCURLYBRACKET }]
  [PrintStatement ::= (*) PRINTLN LPAREN Expression RPAREN SEMICOLON , {RCURLYBRACKET }]
  [IfStatement ::= (*) IF LPAREN Expression RPAREN Statement ELSE Statement , {RCURLYBRACKET }]
  [Statement ::= (*) ArrayAssignStatement , {RCURLYBRACKET }]
  [Statement ::= (*) WhileStatement , {RCURLYBRACKET }]
  [ArrayAssignStatement ::= (*) Identifier LBRACKET Expression RBRACKET BECOMES Expression SEMICOLON , {RCURLYBRACKET }]
  [WhileStatement ::= (*) WHILE LPAREN Expression RPAREN Statement , {RCURLYBRACKET }]
}
transition on ArrayAssignStatement to state [31]
transition on AssignStatement to state [30]
transition on IDENTIFIER to state [4]
transition on PrintStatement to state [29]
transition on LCURLYBRACKET to state [28]
transition on Statement to state [27]
transition on IF to state [26]
transition on WhileStatement to state [25]
transition on IfStatement to state [24]
transition on Identifier to state [23]
transition on BlockStatement to state [22]
transition on DisplayStatement to state [21]
transition on PRINTLN to state [20]
transition on DISPLAY to state [19]
transition on WHILE to state [18]

-------------------
lalr_state [18]: {
  [WhileStatement ::= WHILE (*) LPAREN Expression RPAREN Statement , {DISPLAY IF ELSE WHILE PRINTLN RETURN LCURLYBRACKET RCURLYBRACKET IDENTIFIER }]
}
transition on LPAREN to state [100]

-------------------
lalr_state [19]: {
  [Expression ::= (*) Expression MULT Expression , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) INTEGER_LITERAL , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) NEW INT LBRACKET Expression RBRACKET , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [DisplayStatement ::= DISPLAY (*) Expression SEMICOLON , {DISPLAY IF ELSE WHILE PRINTLN RETURN LCURLYBRACKET RCURLYBRACKET IDENTIFIER }]
  [Expression ::= (*) Expression PLUS Expression , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) Expression PERIOD Identifier LPAREN ExpressionList RPAREN , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) IDENTIFIER , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) LPAREN Expression RPAREN , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) Expression AND Expression , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) Expression LBRACKET Expression RBRACKET , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) TRUE , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) NEW Identifier LPAREN RPAREN , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) Expression MINUS Expression , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) Expression PERIOD Identifier LPAREN RPAREN , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) THIS , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) Expression LT Expression , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) Expression PERIOD LENGTH , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) FALSE , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) NOT Expression , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
}
transition on INTEGER_LITERAL to state [47]
transition on LPAREN to state [46]
transition on NOT to state [45]
transition on IDENTIFIER to state [44]
transition on THIS to state [43]
transition on FALSE to state [42]
transition on Expression to state [98]
transition on TRUE to state [40]
transition on NEW to state [39]

-------------------
lalr_state [20]: {
  [PrintStatement ::= PRINTLN (*) LPAREN Expression RPAREN SEMICOLON , {DISPLAY IF ELSE WHILE PRINTLN RETURN LCURLYBRACKET RCURLYBRACKET IDENTIFIER }]
}
transition on LPAREN to state [94]

-------------------
lalr_state [21]: {
  [Statement ::= DisplayStatement (*) , {DISPLAY IF ELSE WHILE PRINTLN RETURN LCURLYBRACKET RCURLYBRACKET IDENTIFIER }]
}

-------------------
lalr_state [22]: {
  [Statement ::= BlockStatement (*) , {DISPLAY IF ELSE WHILE PRINTLN RETURN LCURLYBRACKET RCURLYBRACKET IDENTIFIER }]
}

-------------------
lalr_state [23]: {
  [ArrayAssignStatement ::= Identifier (*) LBRACKET Expression RBRACKET BECOMES Expression SEMICOLON , {DISPLAY IF ELSE WHILE PRINTLN RETURN LCURLYBRACKET RCURLYBRACKET IDENTIFIER }]
  [AssignStatement ::= Identifier (*) BECOMES Expression SEMICOLON , {DISPLAY IF ELSE WHILE PRINTLN RETURN LCURLYBRACKET RCURLYBRACKET IDENTIFIER }]
}
transition on LBRACKET to state [86]
transition on BECOMES to state [85]

-------------------
lalr_state [24]: {
  [Statement ::= IfStatement (*) , {DISPLAY IF ELSE WHILE PRINTLN RETURN LCURLYBRACKET RCURLYBRACKET IDENTIFIER }]
}

-------------------
lalr_state [25]: {
  [Statement ::= WhileStatement (*) , {DISPLAY IF ELSE WHILE PRINTLN RETURN LCURLYBRACKET RCURLYBRACKET IDENTIFIER }]
}

-------------------
lalr_state [26]: {
  [IfStatement ::= IF (*) LPAREN Expression RPAREN Statement , {DISPLAY IF ELSE WHILE PRINTLN RETURN LCURLYBRACKET RCURLYBRACKET IDENTIFIER }]
  [IfStatement ::= IF (*) LPAREN Expression RPAREN Statement ELSE Statement , {DISPLAY IF ELSE WHILE PRINTLN RETURN LCURLYBRACKET RCURLYBRACKET IDENTIFIER }]
}
transition on LPAREN to state [38]

-------------------
lalr_state [27]: {
  [MainClass ::= CLASS Identifier LCURLYBRACKET PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET Identifier RPAREN LCURLYBRACKET Statement (*) RCURLYBRACKET RCURLYBRACKET , {EOF CLASS }]
}
transition on RCURLYBRACKET to state [36]

-------------------
lalr_state [28]: {
  [StatementList ::= (*) StatementList Statement , {DISPLAY IF WHILE PRINTLN LCURLYBRACKET RCURLYBRACKET IDENTIFIER }]
  [Statement ::= (*) AssignStatement , {DISPLAY IF WHILE PRINTLN LCURLYBRACKET RCURLYBRACKET IDENTIFIER }]
  [IfStatement ::= (*) IF LPAREN Expression RPAREN Statement , {DISPLAY IF WHILE PRINTLN LCURLYBRACKET RCURLYBRACKET IDENTIFIER }]
  [DisplayStatement ::= (*) DISPLAY Expression SEMICOLON , {DISPLAY IF WHILE PRINTLN LCURLYBRACKET RCURLYBRACKET IDENTIFIER }]
  [BlockStatement ::= LCURLYBRACKET (*) StatementList RCURLYBRACKET , {DISPLAY IF ELSE WHILE PRINTLN RETURN LCURLYBRACKET RCURLYBRACKET IDENTIFIER }]
  [Statement ::= (*) WhileStatement , {DISPLAY IF WHILE PRINTLN LCURLYBRACKET RCURLYBRACKET IDENTIFIER }]
  [BlockStatement ::= (*) LCURLYBRACKET StatementList RCURLYBRACKET , {DISPLAY IF WHILE PRINTLN LCURLYBRACKET RCURLYBRACKET IDENTIFIER }]
  [AssignStatement ::= (*) Identifier BECOMES Expression SEMICOLON , {DISPLAY IF WHILE PRINTLN LCURLYBRACKET RCURLYBRACKET IDENTIFIER }]
  [Statement ::= (*) BlockStatement , {DISPLAY IF WHILE PRINTLN LCURLYBRACKET RCURLYBRACKET IDENTIFIER }]
  [Statement ::= (*) ArrayAssignStatement , {DISPLAY IF WHILE PRINTLN LCURLYBRACKET RCURLYBRACKET IDENTIFIER }]
  [WhileStatement ::= (*) WHILE LPAREN Expression RPAREN Statement , {DISPLAY IF WHILE PRINTLN LCURLYBRACKET RCURLYBRACKET IDENTIFIER }]
  [Identifier ::= (*) IDENTIFIER , {BECOMES LBRACKET }]
  [StatementList ::= (*) Statement , {DISPLAY IF WHILE PRINTLN LCURLYBRACKET RCURLYBRACKET IDENTIFIER }]
  [Statement ::= (*) PrintStatement , {DISPLAY IF WHILE PRINTLN LCURLYBRACKET RCURLYBRACKET IDENTIFIER }]
  [IfStatement ::= (*) IF LPAREN Expression RPAREN Statement ELSE Statement , {DISPLAY IF WHILE PRINTLN LCURLYBRACKET RCURLYBRACKET IDENTIFIER }]
  [ArrayAssignStatement ::= (*) Identifier LBRACKET Expression RBRACKET BECOMES Expression SEMICOLON , {DISPLAY IF WHILE PRINTLN LCURLYBRACKET RCURLYBRACKET IDENTIFIER }]
  [Statement ::= (*) IfStatement , {DISPLAY IF WHILE PRINTLN LCURLYBRACKET RCURLYBRACKET IDENTIFIER }]
  [Statement ::= (*) DisplayStatement , {DISPLAY IF WHILE PRINTLN LCURLYBRACKET RCURLYBRACKET IDENTIFIER }]
  [PrintStatement ::= (*) PRINTLN LPAREN Expression RPAREN SEMICOLON , {DISPLAY IF WHILE PRINTLN LCURLYBRACKET RCURLYBRACKET IDENTIFIER }]
}
transition on ArrayAssignStatement to state [31]
transition on AssignStatement to state [30]
transition on IDENTIFIER to state [4]
transition on PrintStatement to state [29]
transition on LCURLYBRACKET to state [28]
transition on Statement to state [33]
transition on WhileStatement to state [25]
transition on IF to state [26]
transition on IfStatement to state [24]
transition on Identifier to state [23]
transition on BlockStatement to state [22]
transition on DisplayStatement to state [21]
transition on PRINTLN to state [20]
transition on DISPLAY to state [19]
transition on StatementList to state [32]
transition on WHILE to state [18]

-------------------
lalr_state [29]: {
  [Statement ::= PrintStatement (*) , {DISPLAY IF ELSE WHILE PRINTLN RETURN LCURLYBRACKET RCURLYBRACKET IDENTIFIER }]
}

-------------------
lalr_state [30]: {
  [Statement ::= AssignStatement (*) , {DISPLAY IF ELSE WHILE PRINTLN RETURN LCURLYBRACKET RCURLYBRACKET IDENTIFIER }]
}

-------------------
lalr_state [31]: {
  [Statement ::= ArrayAssignStatement (*) , {DISPLAY IF ELSE WHILE PRINTLN RETURN LCURLYBRACKET RCURLYBRACKET IDENTIFIER }]
}

-------------------
lalr_state [32]: {
  [StatementList ::= StatementList (*) Statement , {DISPLAY IF WHILE PRINTLN LCURLYBRACKET RCURLYBRACKET IDENTIFIER }]
  [Statement ::= (*) AssignStatement , {DISPLAY IF WHILE PRINTLN LCURLYBRACKET RCURLYBRACKET IDENTIFIER }]
  [IfStatement ::= (*) IF LPAREN Expression RPAREN Statement , {DISPLAY IF WHILE PRINTLN LCURLYBRACKET RCURLYBRACKET IDENTIFIER }]
  [DisplayStatement ::= (*) DISPLAY Expression SEMICOLON , {DISPLAY IF WHILE PRINTLN LCURLYBRACKET RCURLYBRACKET IDENTIFIER }]
  [BlockStatement ::= LCURLYBRACKET StatementList (*) RCURLYBRACKET , {DISPLAY IF ELSE WHILE PRINTLN RETURN LCURLYBRACKET RCURLYBRACKET IDENTIFIER }]
  [Statement ::= (*) WhileStatement , {DISPLAY IF WHILE PRINTLN LCURLYBRACKET RCURLYBRACKET IDENTIFIER }]
  [BlockStatement ::= (*) LCURLYBRACKET StatementList RCURLYBRACKET , {DISPLAY IF WHILE PRINTLN LCURLYBRACKET RCURLYBRACKET IDENTIFIER }]
  [AssignStatement ::= (*) Identifier BECOMES Expression SEMICOLON , {DISPLAY IF WHILE PRINTLN LCURLYBRACKET RCURLYBRACKET IDENTIFIER }]
  [Statement ::= (*) BlockStatement , {DISPLAY IF WHILE PRINTLN LCURLYBRACKET RCURLYBRACKET IDENTIFIER }]
  [Statement ::= (*) ArrayAssignStatement , {DISPLAY IF WHILE PRINTLN LCURLYBRACKET RCURLYBRACKET IDENTIFIER }]
  [WhileStatement ::= (*) WHILE LPAREN Expression RPAREN Statement , {DISPLAY IF WHILE PRINTLN LCURLYBRACKET RCURLYBRACKET IDENTIFIER }]
  [Identifier ::= (*) IDENTIFIER , {BECOMES LBRACKET }]
  [Statement ::= (*) PrintStatement , {DISPLAY IF WHILE PRINTLN LCURLYBRACKET RCURLYBRACKET IDENTIFIER }]
  [IfStatement ::= (*) IF LPAREN Expression RPAREN Statement ELSE Statement , {DISPLAY IF WHILE PRINTLN LCURLYBRACKET RCURLYBRACKET IDENTIFIER }]
  [ArrayAssignStatement ::= (*) Identifier LBRACKET Expression RBRACKET BECOMES Expression SEMICOLON , {DISPLAY IF WHILE PRINTLN LCURLYBRACKET RCURLYBRACKET IDENTIFIER }]
  [Statement ::= (*) IfStatement , {DISPLAY IF WHILE PRINTLN LCURLYBRACKET RCURLYBRACKET IDENTIFIER }]
  [Statement ::= (*) DisplayStatement , {DISPLAY IF WHILE PRINTLN LCURLYBRACKET RCURLYBRACKET IDENTIFIER }]
  [PrintStatement ::= (*) PRINTLN LPAREN Expression RPAREN SEMICOLON , {DISPLAY IF WHILE PRINTLN LCURLYBRACKET RCURLYBRACKET IDENTIFIER }]
}
transition on ArrayAssignStatement to state [31]
transition on AssignStatement to state [30]
transition on IDENTIFIER to state [4]
transition on PrintStatement to state [29]
transition on LCURLYBRACKET to state [28]
transition on Statement to state [35]
transition on WhileStatement to state [25]
transition on IF to state [26]
transition on IfStatement to state [24]
transition on Identifier to state [23]
transition on BlockStatement to state [22]
transition on DisplayStatement to state [21]
transition on PRINTLN to state [20]
transition on DISPLAY to state [19]
transition on RCURLYBRACKET to state [34]
transition on WHILE to state [18]

-------------------
lalr_state [33]: {
  [StatementList ::= Statement (*) , {DISPLAY IF WHILE PRINTLN RETURN LCURLYBRACKET RCURLYBRACKET IDENTIFIER }]
}

-------------------
lalr_state [34]: {
  [BlockStatement ::= LCURLYBRACKET StatementList RCURLYBRACKET (*) , {DISPLAY IF ELSE WHILE PRINTLN RETURN LCURLYBRACKET RCURLYBRACKET IDENTIFIER }]
}

-------------------
lalr_state [35]: {
  [StatementList ::= StatementList Statement (*) , {DISPLAY IF WHILE PRINTLN RETURN LCURLYBRACKET RCURLYBRACKET IDENTIFIER }]
}

-------------------
lalr_state [36]: {
  [MainClass ::= CLASS Identifier LCURLYBRACKET PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET Identifier RPAREN LCURLYBRACKET Statement RCURLYBRACKET (*) RCURLYBRACKET , {EOF CLASS }]
}
transition on RCURLYBRACKET to state [37]

-------------------
lalr_state [37]: {
  [MainClass ::= CLASS Identifier LCURLYBRACKET PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET Identifier RPAREN LCURLYBRACKET Statement RCURLYBRACKET RCURLYBRACKET (*) , {EOF CLASS }]
}

-------------------
lalr_state [38]: {
  [Expression ::= (*) Expression MULT Expression , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD }]
  [Expression ::= (*) INTEGER_LITERAL , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD }]
  [Expression ::= (*) NEW INT LBRACKET Expression RBRACKET , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD }]
  [IfStatement ::= IF LPAREN (*) Expression RPAREN Statement , {DISPLAY IF ELSE WHILE PRINTLN RETURN LCURLYBRACKET RCURLYBRACKET IDENTIFIER }]
  [Expression ::= (*) Expression PLUS Expression , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD }]
  [Expression ::= (*) Expression PERIOD Identifier LPAREN ExpressionList RPAREN , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD }]
  [Expression ::= (*) IDENTIFIER , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD }]
  [Expression ::= (*) LPAREN Expression RPAREN , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD }]
  [Expression ::= (*) Expression AND Expression , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD }]
  [Expression ::= (*) Expression LBRACKET Expression RBRACKET , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD }]
  [Expression ::= (*) TRUE , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD }]
  [Expression ::= (*) NEW Identifier LPAREN RPAREN , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD }]
  [Expression ::= (*) Expression MINUS Expression , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD }]
  [Expression ::= (*) Expression PERIOD Identifier LPAREN RPAREN , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD }]
  [Expression ::= (*) THIS , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD }]
  [IfStatement ::= IF LPAREN (*) Expression RPAREN Statement ELSE Statement , {DISPLAY IF ELSE WHILE PRINTLN RETURN LCURLYBRACKET RCURLYBRACKET IDENTIFIER }]
  [Expression ::= (*) Expression LT Expression , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD }]
  [Expression ::= (*) Expression PERIOD LENGTH , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD }]
  [Expression ::= (*) FALSE , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD }]
  [Expression ::= (*) NOT Expression , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD }]
}
transition on INTEGER_LITERAL to state [47]
transition on LPAREN to state [46]
transition on NOT to state [45]
transition on IDENTIFIER to state [44]
transition on THIS to state [43]
transition on FALSE to state [42]
transition on Expression to state [41]
transition on TRUE to state [40]
transition on NEW to state [39]

-------------------
lalr_state [39]: {
  [Identifier ::= (*) IDENTIFIER , {LPAREN }]
  [Expression ::= NEW (*) Identifier LPAREN RPAREN , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= NEW (*) INT LBRACKET Expression RBRACKET , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
}
transition on Identifier to state [79]
transition on INT to state [78]
transition on IDENTIFIER to state [4]

-------------------
lalr_state [40]: {
  [Expression ::= TRUE (*) , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
}

-------------------
lalr_state [41]: {
  [Expression ::= Expression (*) PERIOD Identifier LPAREN ExpressionList RPAREN , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD }]
  [Expression ::= Expression (*) MULT Expression , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD }]
  [Expression ::= Expression (*) LT Expression , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD }]
  [IfStatement ::= IF LPAREN Expression (*) RPAREN Statement , {DISPLAY IF ELSE WHILE PRINTLN RETURN LCURLYBRACKET RCURLYBRACKET IDENTIFIER }]
  [Expression ::= Expression (*) PERIOD LENGTH , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD }]
  [Expression ::= Expression (*) MINUS Expression , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD }]
  [Expression ::= Expression (*) AND Expression , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD }]
  [IfStatement ::= IF LPAREN Expression (*) RPAREN Statement ELSE Statement , {DISPLAY IF ELSE WHILE PRINTLN RETURN LCURLYBRACKET RCURLYBRACKET IDENTIFIER }]
  [Expression ::= Expression (*) PERIOD Identifier LPAREN RPAREN , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD }]
  [Expression ::= Expression (*) LBRACKET Expression RBRACKET , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD }]
  [Expression ::= Expression (*) PLUS Expression , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD }]
}
transition on LBRACKET to state [56]
transition on PERIOD to state [55]
transition on MINUS to state [54]
transition on PLUS to state [53]
transition on AND to state [52]
transition on MULT to state [51]
transition on RPAREN to state [74]
transition on LT to state [49]

-------------------
lalr_state [42]: {
  [Expression ::= FALSE (*) , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
}

-------------------
lalr_state [43]: {
  [Expression ::= THIS (*) , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
}

-------------------
lalr_state [44]: {
  [Expression ::= IDENTIFIER (*) , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
}

-------------------
lalr_state [45]: {
  [Expression ::= (*) Expression MULT Expression , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= (*) INTEGER_LITERAL , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= (*) NEW INT LBRACKET Expression RBRACKET , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= (*) Expression PLUS Expression , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= (*) Expression PERIOD Identifier LPAREN ExpressionList RPAREN , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= (*) IDENTIFIER , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= (*) LPAREN Expression RPAREN , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= (*) Expression AND Expression , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= (*) Expression LBRACKET Expression RBRACKET , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= (*) TRUE , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= (*) NEW Identifier LPAREN RPAREN , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= (*) Expression MINUS Expression , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= (*) Expression PERIOD Identifier LPAREN RPAREN , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= (*) THIS , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= (*) Expression LT Expression , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= (*) Expression PERIOD LENGTH , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= NOT (*) Expression , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= (*) FALSE , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= (*) NOT Expression , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
}
transition on INTEGER_LITERAL to state [47]
transition on LPAREN to state [46]
transition on NOT to state [45]
transition on IDENTIFIER to state [44]
transition on THIS to state [43]
transition on FALSE to state [42]
transition on Expression to state [73]
transition on TRUE to state [40]
transition on NEW to state [39]

-------------------
lalr_state [46]: {
  [Expression ::= (*) Expression MULT Expression , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD }]
  [Expression ::= (*) INTEGER_LITERAL , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD }]
  [Expression ::= (*) NEW INT LBRACKET Expression RBRACKET , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD }]
  [Expression ::= (*) Expression PLUS Expression , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD }]
  [Expression ::= (*) Expression PERIOD Identifier LPAREN ExpressionList RPAREN , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD }]
  [Expression ::= LPAREN (*) Expression RPAREN , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= (*) IDENTIFIER , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD }]
  [Expression ::= (*) LPAREN Expression RPAREN , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD }]
  [Expression ::= (*) Expression AND Expression , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD }]
  [Expression ::= (*) Expression LBRACKET Expression RBRACKET , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD }]
  [Expression ::= (*) TRUE , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD }]
  [Expression ::= (*) NEW Identifier LPAREN RPAREN , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD }]
  [Expression ::= (*) Expression MINUS Expression , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD }]
  [Expression ::= (*) Expression PERIOD Identifier LPAREN RPAREN , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD }]
  [Expression ::= (*) THIS , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD }]
  [Expression ::= (*) Expression LT Expression , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD }]
  [Expression ::= (*) Expression PERIOD LENGTH , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD }]
  [Expression ::= (*) FALSE , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD }]
  [Expression ::= (*) NOT Expression , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD }]
}
transition on INTEGER_LITERAL to state [47]
transition on LPAREN to state [46]
transition on NOT to state [45]
transition on IDENTIFIER to state [44]
transition on THIS to state [43]
transition on FALSE to state [42]
transition on Expression to state [48]
transition on TRUE to state [40]
transition on NEW to state [39]

-------------------
lalr_state [47]: {
  [Expression ::= INTEGER_LITERAL (*) , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
}

-------------------
lalr_state [48]: {
  [Expression ::= Expression (*) PERIOD Identifier LPAREN ExpressionList RPAREN , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD }]
  [Expression ::= Expression (*) MULT Expression , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD }]
  [Expression ::= Expression (*) LT Expression , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD }]
  [Expression ::= Expression (*) PERIOD LENGTH , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD }]
  [Expression ::= Expression (*) MINUS Expression , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD }]
  [Expression ::= Expression (*) AND Expression , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD }]
  [Expression ::= LPAREN Expression (*) RPAREN , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= Expression (*) PERIOD Identifier LPAREN RPAREN , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD }]
  [Expression ::= Expression (*) LBRACKET Expression RBRACKET , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD }]
  [Expression ::= Expression (*) PLUS Expression , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD }]
}
transition on LBRACKET to state [56]
transition on PERIOD to state [55]
transition on MINUS to state [54]
transition on PLUS to state [53]
transition on AND to state [52]
transition on MULT to state [51]
transition on RPAREN to state [50]
transition on LT to state [49]

-------------------
lalr_state [49]: {
  [Expression ::= (*) Expression MULT Expression , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= (*) INTEGER_LITERAL , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= (*) NEW INT LBRACKET Expression RBRACKET , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= (*) Expression PLUS Expression , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= (*) Expression PERIOD Identifier LPAREN ExpressionList RPAREN , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= (*) IDENTIFIER , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= (*) LPAREN Expression RPAREN , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= (*) Expression AND Expression , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= (*) Expression LBRACKET Expression RBRACKET , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= (*) TRUE , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= (*) NEW Identifier LPAREN RPAREN , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= (*) Expression MINUS Expression , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= (*) Expression PERIOD Identifier LPAREN RPAREN , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= (*) THIS , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= Expression LT (*) Expression , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= (*) Expression LT Expression , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= (*) Expression PERIOD LENGTH , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= (*) FALSE , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= (*) NOT Expression , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
}
transition on INTEGER_LITERAL to state [47]
transition on LPAREN to state [46]
transition on NOT to state [45]
transition on IDENTIFIER to state [44]
transition on THIS to state [43]
transition on FALSE to state [42]
transition on Expression to state [72]
transition on TRUE to state [40]
transition on NEW to state [39]

-------------------
lalr_state [50]: {
  [Expression ::= LPAREN Expression RPAREN (*) , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
}

-------------------
lalr_state [51]: {
  [Expression ::= (*) Expression MULT Expression , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= (*) INTEGER_LITERAL , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= (*) NEW INT LBRACKET Expression RBRACKET , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= (*) Expression PLUS Expression , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= (*) Expression PERIOD Identifier LPAREN ExpressionList RPAREN , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= (*) IDENTIFIER , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= (*) LPAREN Expression RPAREN , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= (*) Expression AND Expression , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= (*) Expression LBRACKET Expression RBRACKET , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= (*) TRUE , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= (*) NEW Identifier LPAREN RPAREN , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= (*) Expression MINUS Expression , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= (*) Expression PERIOD Identifier LPAREN RPAREN , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= (*) THIS , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= (*) Expression LT Expression , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= (*) Expression PERIOD LENGTH , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= (*) FALSE , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= (*) NOT Expression , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= Expression MULT (*) Expression , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
}
transition on INTEGER_LITERAL to state [47]
transition on LPAREN to state [46]
transition on NOT to state [45]
transition on IDENTIFIER to state [44]
transition on THIS to state [43]
transition on FALSE to state [42]
transition on Expression to state [71]
transition on TRUE to state [40]
transition on NEW to state [39]

-------------------
lalr_state [52]: {
  [Expression ::= (*) Expression MULT Expression , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= (*) INTEGER_LITERAL , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= (*) NEW INT LBRACKET Expression RBRACKET , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= (*) Expression PLUS Expression , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= (*) Expression PERIOD Identifier LPAREN ExpressionList RPAREN , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= (*) IDENTIFIER , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= (*) LPAREN Expression RPAREN , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= Expression AND (*) Expression , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= (*) Expression AND Expression , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= (*) Expression LBRACKET Expression RBRACKET , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= (*) TRUE , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= (*) NEW Identifier LPAREN RPAREN , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= (*) Expression MINUS Expression , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= (*) Expression PERIOD Identifier LPAREN RPAREN , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= (*) THIS , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= (*) Expression LT Expression , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= (*) Expression PERIOD LENGTH , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= (*) FALSE , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= (*) NOT Expression , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
}
transition on INTEGER_LITERAL to state [47]
transition on LPAREN to state [46]
transition on NOT to state [45]
transition on IDENTIFIER to state [44]
transition on THIS to state [43]
transition on FALSE to state [42]
transition on Expression to state [70]
transition on TRUE to state [40]
transition on NEW to state [39]

-------------------
lalr_state [53]: {
  [Expression ::= (*) Expression MULT Expression , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= (*) INTEGER_LITERAL , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= (*) NEW INT LBRACKET Expression RBRACKET , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= Expression PLUS (*) Expression , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= (*) Expression PLUS Expression , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= (*) Expression PERIOD Identifier LPAREN ExpressionList RPAREN , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= (*) IDENTIFIER , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= (*) LPAREN Expression RPAREN , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= (*) Expression AND Expression , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= (*) Expression LBRACKET Expression RBRACKET , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= (*) TRUE , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= (*) NEW Identifier LPAREN RPAREN , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= (*) Expression MINUS Expression , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= (*) Expression PERIOD Identifier LPAREN RPAREN , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= (*) THIS , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= (*) Expression LT Expression , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= (*) Expression PERIOD LENGTH , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= (*) FALSE , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= (*) NOT Expression , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
}
transition on INTEGER_LITERAL to state [47]
transition on LPAREN to state [46]
transition on NOT to state [45]
transition on IDENTIFIER to state [44]
transition on THIS to state [43]
transition on FALSE to state [42]
transition on Expression to state [69]
transition on TRUE to state [40]
transition on NEW to state [39]

-------------------
lalr_state [54]: {
  [Expression ::= (*) Expression MULT Expression , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= (*) INTEGER_LITERAL , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= (*) NEW INT LBRACKET Expression RBRACKET , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= (*) Expression PLUS Expression , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= (*) Expression PERIOD Identifier LPAREN ExpressionList RPAREN , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= (*) IDENTIFIER , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= (*) LPAREN Expression RPAREN , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= (*) Expression AND Expression , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= (*) Expression LBRACKET Expression RBRACKET , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= (*) TRUE , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= (*) NEW Identifier LPAREN RPAREN , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= Expression MINUS (*) Expression , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= (*) Expression MINUS Expression , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= (*) Expression PERIOD Identifier LPAREN RPAREN , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= (*) THIS , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= (*) Expression LT Expression , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= (*) Expression PERIOD LENGTH , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= (*) FALSE , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= (*) NOT Expression , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
}
transition on INTEGER_LITERAL to state [47]
transition on LPAREN to state [46]
transition on NOT to state [45]
transition on IDENTIFIER to state [44]
transition on THIS to state [43]
transition on FALSE to state [42]
transition on Expression to state [68]
transition on TRUE to state [40]
transition on NEW to state [39]

-------------------
lalr_state [55]: {
  [Identifier ::= (*) IDENTIFIER , {LPAREN }]
  [Expression ::= Expression PERIOD (*) LENGTH , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= Expression PERIOD (*) Identifier LPAREN RPAREN , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= Expression PERIOD (*) Identifier LPAREN ExpressionList RPAREN , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
}
transition on Identifier to state [60]
transition on IDENTIFIER to state [4]
transition on LENGTH to state [59]

-------------------
lalr_state [56]: {
  [Expression ::= (*) Expression MULT Expression , {PLUS MINUS AND LT MULT LBRACKET RBRACKET PERIOD }]
  [Expression ::= (*) INTEGER_LITERAL , {PLUS MINUS AND LT MULT LBRACKET RBRACKET PERIOD }]
  [Expression ::= (*) NEW INT LBRACKET Expression RBRACKET , {PLUS MINUS AND LT MULT LBRACKET RBRACKET PERIOD }]
  [Expression ::= (*) Expression PLUS Expression , {PLUS MINUS AND LT MULT LBRACKET RBRACKET PERIOD }]
  [Expression ::= (*) Expression PERIOD Identifier LPAREN ExpressionList RPAREN , {PLUS MINUS AND LT MULT LBRACKET RBRACKET PERIOD }]
  [Expression ::= (*) IDENTIFIER , {PLUS MINUS AND LT MULT LBRACKET RBRACKET PERIOD }]
  [Expression ::= (*) LPAREN Expression RPAREN , {PLUS MINUS AND LT MULT LBRACKET RBRACKET PERIOD }]
  [Expression ::= Expression LBRACKET (*) Expression RBRACKET , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= (*) Expression AND Expression , {PLUS MINUS AND LT MULT LBRACKET RBRACKET PERIOD }]
  [Expression ::= (*) Expression LBRACKET Expression RBRACKET , {PLUS MINUS AND LT MULT LBRACKET RBRACKET PERIOD }]
  [Expression ::= (*) TRUE , {PLUS MINUS AND LT MULT LBRACKET RBRACKET PERIOD }]
  [Expression ::= (*) NEW Identifier LPAREN RPAREN , {PLUS MINUS AND LT MULT LBRACKET RBRACKET PERIOD }]
  [Expression ::= (*) Expression MINUS Expression , {PLUS MINUS AND LT MULT LBRACKET RBRACKET PERIOD }]
  [Expression ::= (*) Expression PERIOD Identifier LPAREN RPAREN , {PLUS MINUS AND LT MULT LBRACKET RBRACKET PERIOD }]
  [Expression ::= (*) THIS , {PLUS MINUS AND LT MULT LBRACKET RBRACKET PERIOD }]
  [Expression ::= (*) Expression LT Expression , {PLUS MINUS AND LT MULT LBRACKET RBRACKET PERIOD }]
  [Expression ::= (*) Expression PERIOD LENGTH , {PLUS MINUS AND LT MULT LBRACKET RBRACKET PERIOD }]
  [Expression ::= (*) FALSE , {PLUS MINUS AND LT MULT LBRACKET RBRACKET PERIOD }]
  [Expression ::= (*) NOT Expression , {PLUS MINUS AND LT MULT LBRACKET RBRACKET PERIOD }]
}
transition on INTEGER_LITERAL to state [47]
transition on LPAREN to state [46]
transition on NOT to state [45]
transition on IDENTIFIER to state [44]
transition on THIS to state [43]
transition on FALSE to state [42]
transition on Expression to state [57]
transition on TRUE to state [40]
transition on NEW to state [39]

-------------------
lalr_state [57]: {
  [Expression ::= Expression (*) PERIOD Identifier LPAREN ExpressionList RPAREN , {PLUS MINUS AND LT MULT LBRACKET RBRACKET PERIOD }]
  [Expression ::= Expression (*) MULT Expression , {PLUS MINUS AND LT MULT LBRACKET RBRACKET PERIOD }]
  [Expression ::= Expression (*) LT Expression , {PLUS MINUS AND LT MULT LBRACKET RBRACKET PERIOD }]
  [Expression ::= Expression (*) PERIOD LENGTH , {PLUS MINUS AND LT MULT LBRACKET RBRACKET PERIOD }]
  [Expression ::= Expression (*) MINUS Expression , {PLUS MINUS AND LT MULT LBRACKET RBRACKET PERIOD }]
  [Expression ::= Expression (*) AND Expression , {PLUS MINUS AND LT MULT LBRACKET RBRACKET PERIOD }]
  [Expression ::= Expression LBRACKET Expression (*) RBRACKET , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= Expression (*) PERIOD Identifier LPAREN RPAREN , {PLUS MINUS AND LT MULT LBRACKET RBRACKET PERIOD }]
  [Expression ::= Expression (*) LBRACKET Expression RBRACKET , {PLUS MINUS AND LT MULT LBRACKET RBRACKET PERIOD }]
  [Expression ::= Expression (*) PLUS Expression , {PLUS MINUS AND LT MULT LBRACKET RBRACKET PERIOD }]
}
transition on LBRACKET to state [56]
transition on PERIOD to state [55]
transition on MINUS to state [54]
transition on RBRACKET to state [58]
transition on PLUS to state [53]
transition on AND to state [52]
transition on MULT to state [51]
transition on LT to state [49]

-------------------
lalr_state [58]: {
  [Expression ::= Expression LBRACKET Expression RBRACKET (*) , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
}

-------------------
lalr_state [59]: {
  [Expression ::= Expression PERIOD LENGTH (*) , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
}

-------------------
lalr_state [60]: {
  [Expression ::= Expression PERIOD Identifier (*) LPAREN RPAREN , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= Expression PERIOD Identifier (*) LPAREN ExpressionList RPAREN , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
}
transition on LPAREN to state [61]

-------------------
lalr_state [61]: {
  [ExpressionList ::= (*) ExpressionList COMMA Expression , {RPAREN COMMA }]
  [Expression ::= (*) Expression MULT Expression , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD COMMA }]
  [Expression ::= (*) INTEGER_LITERAL , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD COMMA }]
  [Expression ::= (*) NEW INT LBRACKET Expression RBRACKET , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD COMMA }]
  [Expression ::= Expression PERIOD Identifier LPAREN (*) ExpressionList RPAREN , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= (*) Expression PLUS Expression , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD COMMA }]
  [Expression ::= (*) Expression PERIOD Identifier LPAREN ExpressionList RPAREN , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD COMMA }]
  [Expression ::= (*) IDENTIFIER , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD COMMA }]
  [Expression ::= (*) LPAREN Expression RPAREN , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD COMMA }]
  [Expression ::= (*) Expression AND Expression , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD COMMA }]
  [Expression ::= (*) Expression LBRACKET Expression RBRACKET , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD COMMA }]
  [Expression ::= (*) TRUE , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD COMMA }]
  [Expression ::= (*) NEW Identifier LPAREN RPAREN , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD COMMA }]
  [Expression ::= Expression PERIOD Identifier LPAREN (*) RPAREN , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [ExpressionList ::= (*) Expression , {RPAREN COMMA }]
  [Expression ::= (*) Expression MINUS Expression , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD COMMA }]
  [Expression ::= (*) Expression PERIOD Identifier LPAREN RPAREN , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD COMMA }]
  [Expression ::= (*) THIS , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD COMMA }]
  [Expression ::= (*) Expression LT Expression , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD COMMA }]
  [Expression ::= (*) Expression PERIOD LENGTH , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD COMMA }]
  [Expression ::= (*) FALSE , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD COMMA }]
  [Expression ::= (*) NOT Expression , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD COMMA }]
}
transition on INTEGER_LITERAL to state [47]
transition on LPAREN to state [46]
transition on NOT to state [45]
transition on IDENTIFIER to state [44]
transition on RPAREN to state [64]
transition on THIS to state [43]
transition on FALSE to state [42]
transition on Expression to state [63]
transition on TRUE to state [40]
transition on NEW to state [39]
transition on ExpressionList to state [62]

-------------------
lalr_state [62]: {
  [Expression ::= Expression PERIOD Identifier LPAREN ExpressionList (*) RPAREN , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [ExpressionList ::= ExpressionList (*) COMMA Expression , {RPAREN COMMA }]
}
transition on RPAREN to state [66]
transition on COMMA to state [65]

-------------------
lalr_state [63]: {
  [Expression ::= Expression (*) PERIOD Identifier LPAREN ExpressionList RPAREN , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD COMMA }]
  [Expression ::= Expression (*) MULT Expression , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD COMMA }]
  [Expression ::= Expression (*) LT Expression , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD COMMA }]
  [ExpressionList ::= Expression (*) , {RPAREN COMMA }]
  [Expression ::= Expression (*) PERIOD LENGTH , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD COMMA }]
  [Expression ::= Expression (*) MINUS Expression , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD COMMA }]
  [Expression ::= Expression (*) AND Expression , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD COMMA }]
  [Expression ::= Expression (*) PERIOD Identifier LPAREN RPAREN , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD COMMA }]
  [Expression ::= Expression (*) LBRACKET Expression RBRACKET , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD COMMA }]
  [Expression ::= Expression (*) PLUS Expression , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD COMMA }]
}
transition on LBRACKET to state [56]
transition on PERIOD to state [55]
transition on MINUS to state [54]
transition on PLUS to state [53]
transition on AND to state [52]
transition on MULT to state [51]
transition on LT to state [49]

-------------------
lalr_state [64]: {
  [Expression ::= Expression PERIOD Identifier LPAREN RPAREN (*) , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
}

-------------------
lalr_state [65]: {
  [Expression ::= (*) Expression MULT Expression , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD COMMA }]
  [Expression ::= (*) INTEGER_LITERAL , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD COMMA }]
  [Expression ::= (*) NEW INT LBRACKET Expression RBRACKET , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD COMMA }]
  [Expression ::= (*) Expression PLUS Expression , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD COMMA }]
  [Expression ::= (*) Expression PERIOD Identifier LPAREN ExpressionList RPAREN , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD COMMA }]
  [Expression ::= (*) IDENTIFIER , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD COMMA }]
  [Expression ::= (*) LPAREN Expression RPAREN , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD COMMA }]
  [Expression ::= (*) Expression AND Expression , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD COMMA }]
  [Expression ::= (*) Expression LBRACKET Expression RBRACKET , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD COMMA }]
  [Expression ::= (*) TRUE , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD COMMA }]
  [Expression ::= (*) NEW Identifier LPAREN RPAREN , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD COMMA }]
  [Expression ::= (*) Expression MINUS Expression , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD COMMA }]
  [Expression ::= (*) Expression PERIOD Identifier LPAREN RPAREN , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD COMMA }]
  [Expression ::= (*) THIS , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD COMMA }]
  [Expression ::= (*) Expression LT Expression , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD COMMA }]
  [Expression ::= (*) Expression PERIOD LENGTH , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD COMMA }]
  [Expression ::= (*) FALSE , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD COMMA }]
  [Expression ::= (*) NOT Expression , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD COMMA }]
  [ExpressionList ::= ExpressionList COMMA (*) Expression , {RPAREN COMMA }]
}
transition on INTEGER_LITERAL to state [47]
transition on LPAREN to state [46]
transition on NOT to state [45]
transition on IDENTIFIER to state [44]
transition on THIS to state [43]
transition on FALSE to state [42]
transition on Expression to state [67]
transition on TRUE to state [40]
transition on NEW to state [39]

-------------------
lalr_state [66]: {
  [Expression ::= Expression PERIOD Identifier LPAREN ExpressionList RPAREN (*) , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
}

-------------------
lalr_state [67]: {
  [Expression ::= Expression (*) PERIOD Identifier LPAREN ExpressionList RPAREN , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD COMMA }]
  [Expression ::= Expression (*) MULT Expression , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD COMMA }]
  [Expression ::= Expression (*) LT Expression , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD COMMA }]
  [Expression ::= Expression (*) PERIOD LENGTH , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD COMMA }]
  [Expression ::= Expression (*) MINUS Expression , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD COMMA }]
  [Expression ::= Expression (*) AND Expression , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD COMMA }]
  [Expression ::= Expression (*) PERIOD Identifier LPAREN RPAREN , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD COMMA }]
  [ExpressionList ::= ExpressionList COMMA Expression (*) , {RPAREN COMMA }]
  [Expression ::= Expression (*) LBRACKET Expression RBRACKET , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD COMMA }]
  [Expression ::= Expression (*) PLUS Expression , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD COMMA }]
}
transition on LBRACKET to state [56]
transition on PERIOD to state [55]
transition on MINUS to state [54]
transition on PLUS to state [53]
transition on AND to state [52]
transition on MULT to state [51]
transition on LT to state [49]

-------------------
lalr_state [68]: {
  [Expression ::= Expression (*) PERIOD Identifier LPAREN ExpressionList RPAREN , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= Expression (*) MULT Expression , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= Expression (*) LT Expression , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= Expression MINUS Expression (*) , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= Expression (*) PERIOD LENGTH , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= Expression (*) MINUS Expression , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= Expression (*) AND Expression , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= Expression (*) PERIOD Identifier LPAREN RPAREN , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= Expression (*) LBRACKET Expression RBRACKET , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= Expression (*) PLUS Expression , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
}
transition on LBRACKET to state [56]
transition on PERIOD to state [55]
transition on MINUS to state [54]
transition on PLUS to state [53]
transition on AND to state [52]
transition on MULT to state [51]
transition on LT to state [49]

-------------------
lalr_state [69]: {
  [Expression ::= Expression (*) PERIOD Identifier LPAREN ExpressionList RPAREN , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= Expression (*) MULT Expression , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= Expression (*) LT Expression , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= Expression (*) PERIOD LENGTH , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= Expression (*) MINUS Expression , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= Expression (*) AND Expression , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= Expression PLUS Expression (*) , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= Expression (*) PERIOD Identifier LPAREN RPAREN , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= Expression (*) LBRACKET Expression RBRACKET , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= Expression (*) PLUS Expression , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
}
transition on LBRACKET to state [56]
transition on PERIOD to state [55]
transition on MINUS to state [54]
transition on PLUS to state [53]
transition on AND to state [52]
transition on MULT to state [51]
transition on LT to state [49]

-------------------
lalr_state [70]: {
  [Expression ::= Expression (*) PERIOD Identifier LPAREN ExpressionList RPAREN , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= Expression (*) MULT Expression , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= Expression (*) LT Expression , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= Expression (*) PERIOD LENGTH , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= Expression AND Expression (*) , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= Expression (*) MINUS Expression , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= Expression (*) AND Expression , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= Expression (*) PERIOD Identifier LPAREN RPAREN , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= Expression (*) LBRACKET Expression RBRACKET , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= Expression (*) PLUS Expression , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
}
transition on LBRACKET to state [56]
transition on PERIOD to state [55]
transition on MINUS to state [54]
transition on PLUS to state [53]
transition on AND to state [52]
transition on MULT to state [51]
transition on LT to state [49]

-------------------
lalr_state [71]: {
  [Expression ::= Expression MULT Expression (*) , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= Expression (*) PERIOD Identifier LPAREN ExpressionList RPAREN , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= Expression (*) MULT Expression , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= Expression (*) LT Expression , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= Expression (*) PERIOD LENGTH , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= Expression (*) MINUS Expression , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= Expression (*) AND Expression , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= Expression (*) PERIOD Identifier LPAREN RPAREN , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= Expression (*) LBRACKET Expression RBRACKET , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= Expression (*) PLUS Expression , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
}
transition on LBRACKET to state [56]
transition on PERIOD to state [55]
transition on MINUS to state [54]
transition on PLUS to state [53]
transition on AND to state [52]
transition on MULT to state [51]
transition on LT to state [49]

-------------------
lalr_state [72]: {
  [Expression ::= Expression (*) PERIOD Identifier LPAREN ExpressionList RPAREN , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= Expression LT Expression (*) , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= Expression (*) MULT Expression , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= Expression (*) LT Expression , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= Expression (*) PERIOD LENGTH , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= Expression (*) MINUS Expression , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= Expression (*) AND Expression , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= Expression (*) PERIOD Identifier LPAREN RPAREN , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= Expression (*) LBRACKET Expression RBRACKET , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= Expression (*) PLUS Expression , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
}
transition on LBRACKET to state [56]
transition on PERIOD to state [55]
transition on MINUS to state [54]
transition on PLUS to state [53]
transition on AND to state [52]
transition on MULT to state [51]
transition on LT to state [49]

-------------------
lalr_state [73]: {
  [Expression ::= Expression (*) PERIOD Identifier LPAREN ExpressionList RPAREN , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= Expression (*) MULT Expression , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= Expression (*) LT Expression , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= Expression (*) PERIOD LENGTH , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= Expression (*) MINUS Expression , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= Expression (*) AND Expression , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= Expression (*) PERIOD Identifier LPAREN RPAREN , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= Expression (*) LBRACKET Expression RBRACKET , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= Expression (*) PLUS Expression , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= NOT Expression (*) , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
}
transition on LBRACKET to state [56]
transition on PERIOD to state [55]
transition on MINUS to state [54]
transition on PLUS to state [53]
transition on AND to state [52]
transition on MULT to state [51]
transition on LT to state [49]

-------------------
lalr_state [74]: {
  [IfStatement ::= IF LPAREN Expression RPAREN (*) Statement , {DISPLAY IF ELSE WHILE PRINTLN RETURN LCURLYBRACKET RCURLYBRACKET IDENTIFIER }]
  [Statement ::= (*) AssignStatement , {DISPLAY IF ELSE WHILE PRINTLN RETURN LCURLYBRACKET RCURLYBRACKET IDENTIFIER }]
  [IfStatement ::= (*) IF LPAREN Expression RPAREN Statement , {DISPLAY IF ELSE WHILE PRINTLN RETURN LCURLYBRACKET RCURLYBRACKET IDENTIFIER }]
  [DisplayStatement ::= (*) DISPLAY Expression SEMICOLON , {DISPLAY IF ELSE WHILE PRINTLN RETURN LCURLYBRACKET RCURLYBRACKET IDENTIFIER }]
  [Statement ::= (*) WhileStatement , {DISPLAY IF ELSE WHILE PRINTLN RETURN LCURLYBRACKET RCURLYBRACKET IDENTIFIER }]
  [BlockStatement ::= (*) LCURLYBRACKET StatementList RCURLYBRACKET , {DISPLAY IF ELSE WHILE PRINTLN RETURN LCURLYBRACKET RCURLYBRACKET IDENTIFIER }]
  [AssignStatement ::= (*) Identifier BECOMES Expression SEMICOLON , {DISPLAY IF ELSE WHILE PRINTLN RETURN LCURLYBRACKET RCURLYBRACKET IDENTIFIER }]
  [Statement ::= (*) BlockStatement , {DISPLAY IF ELSE WHILE PRINTLN RETURN LCURLYBRACKET RCURLYBRACKET IDENTIFIER }]
  [Statement ::= (*) ArrayAssignStatement , {DISPLAY IF ELSE WHILE PRINTLN RETURN LCURLYBRACKET RCURLYBRACKET IDENTIFIER }]
  [WhileStatement ::= (*) WHILE LPAREN Expression RPAREN Statement , {DISPLAY IF ELSE WHILE PRINTLN RETURN LCURLYBRACKET RCURLYBRACKET IDENTIFIER }]
  [IfStatement ::= IF LPAREN Expression RPAREN (*) Statement ELSE Statement , {DISPLAY IF ELSE WHILE PRINTLN RETURN LCURLYBRACKET RCURLYBRACKET IDENTIFIER }]
  [Identifier ::= (*) IDENTIFIER , {BECOMES LBRACKET }]
  [Statement ::= (*) PrintStatement , {DISPLAY IF ELSE WHILE PRINTLN RETURN LCURLYBRACKET RCURLYBRACKET IDENTIFIER }]
  [IfStatement ::= (*) IF LPAREN Expression RPAREN Statement ELSE Statement , {DISPLAY IF ELSE WHILE PRINTLN RETURN LCURLYBRACKET RCURLYBRACKET IDENTIFIER }]
  [ArrayAssignStatement ::= (*) Identifier LBRACKET Expression RBRACKET BECOMES Expression SEMICOLON , {DISPLAY IF ELSE WHILE PRINTLN RETURN LCURLYBRACKET RCURLYBRACKET IDENTIFIER }]
  [Statement ::= (*) IfStatement , {DISPLAY IF ELSE WHILE PRINTLN RETURN LCURLYBRACKET RCURLYBRACKET IDENTIFIER }]
  [Statement ::= (*) DisplayStatement , {DISPLAY IF ELSE WHILE PRINTLN RETURN LCURLYBRACKET RCURLYBRACKET IDENTIFIER }]
  [PrintStatement ::= (*) PRINTLN LPAREN Expression RPAREN SEMICOLON , {DISPLAY IF ELSE WHILE PRINTLN RETURN LCURLYBRACKET RCURLYBRACKET IDENTIFIER }]
}
transition on ArrayAssignStatement to state [31]
transition on AssignStatement to state [30]
transition on IDENTIFIER to state [4]
transition on PrintStatement to state [29]
transition on LCURLYBRACKET to state [28]
transition on Statement to state [75]
transition on WhileStatement to state [25]
transition on IF to state [26]
transition on IfStatement to state [24]
transition on Identifier to state [23]
transition on BlockStatement to state [22]
transition on DisplayStatement to state [21]
transition on PRINTLN to state [20]
transition on DISPLAY to state [19]
transition on WHILE to state [18]

-------------------
lalr_state [75]: {
  [IfStatement ::= IF LPAREN Expression RPAREN Statement (*) , {DISPLAY IF ELSE WHILE PRINTLN RETURN LCURLYBRACKET RCURLYBRACKET IDENTIFIER }]
  [IfStatement ::= IF LPAREN Expression RPAREN Statement (*) ELSE Statement , {DISPLAY IF ELSE WHILE PRINTLN RETURN LCURLYBRACKET RCURLYBRACKET IDENTIFIER }]
}
transition on ELSE to state [76]

-------------------
lalr_state [76]: {
  [BlockStatement ::= (*) LCURLYBRACKET StatementList RCURLYBRACKET , {DISPLAY IF ELSE WHILE PRINTLN RETURN LCURLYBRACKET RCURLYBRACKET IDENTIFIER }]
  [Statement ::= (*) AssignStatement , {DISPLAY IF ELSE WHILE PRINTLN RETURN LCURLYBRACKET RCURLYBRACKET IDENTIFIER }]
  [Statement ::= (*) IfStatement , {DISPLAY IF ELSE WHILE PRINTLN RETURN LCURLYBRACKET RCURLYBRACKET IDENTIFIER }]
  [AssignStatement ::= (*) Identifier BECOMES Expression SEMICOLON , {DISPLAY IF ELSE WHILE PRINTLN RETURN LCURLYBRACKET RCURLYBRACKET IDENTIFIER }]
  [Identifier ::= (*) IDENTIFIER , {BECOMES LBRACKET }]
  [IfStatement ::= (*) IF LPAREN Expression RPAREN Statement , {DISPLAY IF ELSE WHILE PRINTLN RETURN LCURLYBRACKET RCURLYBRACKET IDENTIFIER }]
  [Statement ::= (*) DisplayStatement , {DISPLAY IF ELSE WHILE PRINTLN RETURN LCURLYBRACKET RCURLYBRACKET IDENTIFIER }]
  [Statement ::= (*) PrintStatement , {DISPLAY IF ELSE WHILE PRINTLN RETURN LCURLYBRACKET RCURLYBRACKET IDENTIFIER }]
  [IfStatement ::= IF LPAREN Expression RPAREN Statement ELSE (*) Statement , {DISPLAY IF ELSE WHILE PRINTLN RETURN LCURLYBRACKET RCURLYBRACKET IDENTIFIER }]
  [Statement ::= (*) BlockStatement , {DISPLAY IF ELSE WHILE PRINTLN RETURN LCURLYBRACKET RCURLYBRACKET IDENTIFIER }]
  [DisplayStatement ::= (*) DISPLAY Expression SEMICOLON , {DISPLAY IF ELSE WHILE PRINTLN RETURN LCURLYBRACKET RCURLYBRACKET IDENTIFIER }]
  [PrintStatement ::= (*) PRINTLN LPAREN Expression RPAREN SEMICOLON , {DISPLAY IF ELSE WHILE PRINTLN RETURN LCURLYBRACKET RCURLYBRACKET IDENTIFIER }]
  [IfStatement ::= (*) IF LPAREN Expression RPAREN Statement ELSE Statement , {DISPLAY IF ELSE WHILE PRINTLN RETURN LCURLYBRACKET RCURLYBRACKET IDENTIFIER }]
  [Statement ::= (*) ArrayAssignStatement , {DISPLAY IF ELSE WHILE PRINTLN RETURN LCURLYBRACKET RCURLYBRACKET IDENTIFIER }]
  [Statement ::= (*) WhileStatement , {DISPLAY IF ELSE WHILE PRINTLN RETURN LCURLYBRACKET RCURLYBRACKET IDENTIFIER }]
  [ArrayAssignStatement ::= (*) Identifier LBRACKET Expression RBRACKET BECOMES Expression SEMICOLON , {DISPLAY IF ELSE WHILE PRINTLN RETURN LCURLYBRACKET RCURLYBRACKET IDENTIFIER }]
  [WhileStatement ::= (*) WHILE LPAREN Expression RPAREN Statement , {DISPLAY IF ELSE WHILE PRINTLN RETURN LCURLYBRACKET RCURLYBRACKET IDENTIFIER }]
}
transition on ArrayAssignStatement to state [31]
transition on AssignStatement to state [30]
transition on PrintStatement to state [29]
transition on IDENTIFIER to state [4]
transition on LCURLYBRACKET to state [28]
transition on Statement to state [77]
transition on IF to state [26]
transition on WhileStatement to state [25]
transition on IfStatement to state [24]
transition on Identifier to state [23]
transition on BlockStatement to state [22]
transition on DisplayStatement to state [21]
transition on PRINTLN to state [20]
transition on DISPLAY to state [19]
transition on WHILE to state [18]

-------------------
lalr_state [77]: {
  [IfStatement ::= IF LPAREN Expression RPAREN Statement ELSE Statement (*) , {DISPLAY IF ELSE WHILE PRINTLN RETURN LCURLYBRACKET RCURLYBRACKET IDENTIFIER }]
}

-------------------
lalr_state [78]: {
  [Expression ::= NEW INT (*) LBRACKET Expression RBRACKET , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
}
transition on LBRACKET to state [82]

-------------------
lalr_state [79]: {
  [Expression ::= NEW Identifier (*) LPAREN RPAREN , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
}
transition on LPAREN to state [80]

-------------------
lalr_state [80]: {
  [Expression ::= NEW Identifier LPAREN (*) RPAREN , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
}
transition on RPAREN to state [81]

-------------------
lalr_state [81]: {
  [Expression ::= NEW Identifier LPAREN RPAREN (*) , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
}

-------------------
lalr_state [82]: {
  [Expression ::= NEW INT LBRACKET (*) Expression RBRACKET , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= (*) Expression MULT Expression , {PLUS MINUS AND LT MULT LBRACKET RBRACKET PERIOD }]
  [Expression ::= (*) INTEGER_LITERAL , {PLUS MINUS AND LT MULT LBRACKET RBRACKET PERIOD }]
  [Expression ::= (*) NEW INT LBRACKET Expression RBRACKET , {PLUS MINUS AND LT MULT LBRACKET RBRACKET PERIOD }]
  [Expression ::= (*) Expression PLUS Expression , {PLUS MINUS AND LT MULT LBRACKET RBRACKET PERIOD }]
  [Expression ::= (*) Expression PERIOD Identifier LPAREN ExpressionList RPAREN , {PLUS MINUS AND LT MULT LBRACKET RBRACKET PERIOD }]
  [Expression ::= (*) IDENTIFIER , {PLUS MINUS AND LT MULT LBRACKET RBRACKET PERIOD }]
  [Expression ::= (*) LPAREN Expression RPAREN , {PLUS MINUS AND LT MULT LBRACKET RBRACKET PERIOD }]
  [Expression ::= (*) Expression AND Expression , {PLUS MINUS AND LT MULT LBRACKET RBRACKET PERIOD }]
  [Expression ::= (*) Expression LBRACKET Expression RBRACKET , {PLUS MINUS AND LT MULT LBRACKET RBRACKET PERIOD }]
  [Expression ::= (*) TRUE , {PLUS MINUS AND LT MULT LBRACKET RBRACKET PERIOD }]
  [Expression ::= (*) NEW Identifier LPAREN RPAREN , {PLUS MINUS AND LT MULT LBRACKET RBRACKET PERIOD }]
  [Expression ::= (*) Expression MINUS Expression , {PLUS MINUS AND LT MULT LBRACKET RBRACKET PERIOD }]
  [Expression ::= (*) Expression PERIOD Identifier LPAREN RPAREN , {PLUS MINUS AND LT MULT LBRACKET RBRACKET PERIOD }]
  [Expression ::= (*) THIS , {PLUS MINUS AND LT MULT LBRACKET RBRACKET PERIOD }]
  [Expression ::= (*) Expression LT Expression , {PLUS MINUS AND LT MULT LBRACKET RBRACKET PERIOD }]
  [Expression ::= (*) Expression PERIOD LENGTH , {PLUS MINUS AND LT MULT LBRACKET RBRACKET PERIOD }]
  [Expression ::= (*) FALSE , {PLUS MINUS AND LT MULT LBRACKET RBRACKET PERIOD }]
  [Expression ::= (*) NOT Expression , {PLUS MINUS AND LT MULT LBRACKET RBRACKET PERIOD }]
}
transition on INTEGER_LITERAL to state [47]
transition on LPAREN to state [46]
transition on NOT to state [45]
transition on IDENTIFIER to state [44]
transition on THIS to state [43]
transition on FALSE to state [42]
transition on Expression to state [83]
transition on TRUE to state [40]
transition on NEW to state [39]

-------------------
lalr_state [83]: {
  [Expression ::= Expression (*) PERIOD Identifier LPAREN ExpressionList RPAREN , {PLUS MINUS AND LT MULT LBRACKET RBRACKET PERIOD }]
  [Expression ::= Expression (*) MULT Expression , {PLUS MINUS AND LT MULT LBRACKET RBRACKET PERIOD }]
  [Expression ::= Expression (*) LT Expression , {PLUS MINUS AND LT MULT LBRACKET RBRACKET PERIOD }]
  [Expression ::= Expression (*) PERIOD LENGTH , {PLUS MINUS AND LT MULT LBRACKET RBRACKET PERIOD }]
  [Expression ::= Expression (*) MINUS Expression , {PLUS MINUS AND LT MULT LBRACKET RBRACKET PERIOD }]
  [Expression ::= Expression (*) AND Expression , {PLUS MINUS AND LT MULT LBRACKET RBRACKET PERIOD }]
  [Expression ::= NEW INT LBRACKET Expression (*) RBRACKET , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
  [Expression ::= Expression (*) PERIOD Identifier LPAREN RPAREN , {PLUS MINUS AND LT MULT LBRACKET RBRACKET PERIOD }]
  [Expression ::= Expression (*) LBRACKET Expression RBRACKET , {PLUS MINUS AND LT MULT LBRACKET RBRACKET PERIOD }]
  [Expression ::= Expression (*) PLUS Expression , {PLUS MINUS AND LT MULT LBRACKET RBRACKET PERIOD }]
}
transition on LBRACKET to state [56]
transition on PERIOD to state [55]
transition on MINUS to state [54]
transition on RBRACKET to state [84]
transition on PLUS to state [53]
transition on AND to state [52]
transition on MULT to state [51]
transition on LT to state [49]

-------------------
lalr_state [84]: {
  [Expression ::= NEW INT LBRACKET Expression RBRACKET (*) , {PLUS MINUS AND LT MULT RPAREN LBRACKET RBRACKET SEMICOLON PERIOD COMMA }]
}

-------------------
lalr_state [85]: {
  [Expression ::= (*) Expression MULT Expression , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) INTEGER_LITERAL , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) NEW INT LBRACKET Expression RBRACKET , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) Expression PLUS Expression , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) Expression PERIOD Identifier LPAREN ExpressionList RPAREN , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) IDENTIFIER , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) LPAREN Expression RPAREN , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [AssignStatement ::= Identifier BECOMES (*) Expression SEMICOLON , {DISPLAY IF ELSE WHILE PRINTLN RETURN LCURLYBRACKET RCURLYBRACKET IDENTIFIER }]
  [Expression ::= (*) Expression AND Expression , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) Expression LBRACKET Expression RBRACKET , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) TRUE , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) NEW Identifier LPAREN RPAREN , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) Expression MINUS Expression , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) Expression PERIOD Identifier LPAREN RPAREN , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) THIS , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) Expression LT Expression , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) Expression PERIOD LENGTH , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) FALSE , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) NOT Expression , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
}
transition on INTEGER_LITERAL to state [47]
transition on LPAREN to state [46]
transition on NOT to state [45]
transition on IDENTIFIER to state [44]
transition on THIS to state [43]
transition on FALSE to state [42]
transition on Expression to state [92]
transition on TRUE to state [40]
transition on NEW to state [39]

-------------------
lalr_state [86]: {
  [Expression ::= (*) Expression MULT Expression , {PLUS MINUS AND LT MULT LBRACKET RBRACKET PERIOD }]
  [Expression ::= (*) INTEGER_LITERAL , {PLUS MINUS AND LT MULT LBRACKET RBRACKET PERIOD }]
  [Expression ::= (*) NEW INT LBRACKET Expression RBRACKET , {PLUS MINUS AND LT MULT LBRACKET RBRACKET PERIOD }]
  [Expression ::= (*) Expression PLUS Expression , {PLUS MINUS AND LT MULT LBRACKET RBRACKET PERIOD }]
  [Expression ::= (*) Expression PERIOD Identifier LPAREN ExpressionList RPAREN , {PLUS MINUS AND LT MULT LBRACKET RBRACKET PERIOD }]
  [Expression ::= (*) IDENTIFIER , {PLUS MINUS AND LT MULT LBRACKET RBRACKET PERIOD }]
  [Expression ::= (*) LPAREN Expression RPAREN , {PLUS MINUS AND LT MULT LBRACKET RBRACKET PERIOD }]
  [Expression ::= (*) Expression AND Expression , {PLUS MINUS AND LT MULT LBRACKET RBRACKET PERIOD }]
  [Expression ::= (*) Expression LBRACKET Expression RBRACKET , {PLUS MINUS AND LT MULT LBRACKET RBRACKET PERIOD }]
  [Expression ::= (*) TRUE , {PLUS MINUS AND LT MULT LBRACKET RBRACKET PERIOD }]
  [Expression ::= (*) NEW Identifier LPAREN RPAREN , {PLUS MINUS AND LT MULT LBRACKET RBRACKET PERIOD }]
  [Expression ::= (*) Expression MINUS Expression , {PLUS MINUS AND LT MULT LBRACKET RBRACKET PERIOD }]
  [Expression ::= (*) Expression PERIOD Identifier LPAREN RPAREN , {PLUS MINUS AND LT MULT LBRACKET RBRACKET PERIOD }]
  [Expression ::= (*) THIS , {PLUS MINUS AND LT MULT LBRACKET RBRACKET PERIOD }]
  [ArrayAssignStatement ::= Identifier LBRACKET (*) Expression RBRACKET BECOMES Expression SEMICOLON , {DISPLAY IF ELSE WHILE PRINTLN RETURN LCURLYBRACKET RCURLYBRACKET IDENTIFIER }]
  [Expression ::= (*) Expression LT Expression , {PLUS MINUS AND LT MULT LBRACKET RBRACKET PERIOD }]
  [Expression ::= (*) Expression PERIOD LENGTH , {PLUS MINUS AND LT MULT LBRACKET RBRACKET PERIOD }]
  [Expression ::= (*) FALSE , {PLUS MINUS AND LT MULT LBRACKET RBRACKET PERIOD }]
  [Expression ::= (*) NOT Expression , {PLUS MINUS AND LT MULT LBRACKET RBRACKET PERIOD }]
}
transition on INTEGER_LITERAL to state [47]
transition on LPAREN to state [46]
transition on NOT to state [45]
transition on IDENTIFIER to state [44]
transition on THIS to state [43]
transition on FALSE to state [42]
transition on Expression to state [87]
transition on TRUE to state [40]
transition on NEW to state [39]

-------------------
lalr_state [87]: {
  [Expression ::= Expression (*) PERIOD Identifier LPAREN ExpressionList RPAREN , {PLUS MINUS AND LT MULT LBRACKET RBRACKET PERIOD }]
  [Expression ::= Expression (*) MULT Expression , {PLUS MINUS AND LT MULT LBRACKET RBRACKET PERIOD }]
  [Expression ::= Expression (*) LT Expression , {PLUS MINUS AND LT MULT LBRACKET RBRACKET PERIOD }]
  [Expression ::= Expression (*) PERIOD LENGTH , {PLUS MINUS AND LT MULT LBRACKET RBRACKET PERIOD }]
  [Expression ::= Expression (*) MINUS Expression , {PLUS MINUS AND LT MULT LBRACKET RBRACKET PERIOD }]
  [Expression ::= Expression (*) AND Expression , {PLUS MINUS AND LT MULT LBRACKET RBRACKET PERIOD }]
  [Expression ::= Expression (*) PERIOD Identifier LPAREN RPAREN , {PLUS MINUS AND LT MULT LBRACKET RBRACKET PERIOD }]
  [Expression ::= Expression (*) LBRACKET Expression RBRACKET , {PLUS MINUS AND LT MULT LBRACKET RBRACKET PERIOD }]
  [Expression ::= Expression (*) PLUS Expression , {PLUS MINUS AND LT MULT LBRACKET RBRACKET PERIOD }]
  [ArrayAssignStatement ::= Identifier LBRACKET Expression (*) RBRACKET BECOMES Expression SEMICOLON , {DISPLAY IF ELSE WHILE PRINTLN RETURN LCURLYBRACKET RCURLYBRACKET IDENTIFIER }]
}
transition on LBRACKET to state [56]
transition on PERIOD to state [55]
transition on MINUS to state [54]
transition on RBRACKET to state [88]
transition on PLUS to state [53]
transition on AND to state [52]
transition on MULT to state [51]
transition on LT to state [49]

-------------------
lalr_state [88]: {
  [ArrayAssignStatement ::= Identifier LBRACKET Expression RBRACKET (*) BECOMES Expression SEMICOLON , {DISPLAY IF ELSE WHILE PRINTLN RETURN LCURLYBRACKET RCURLYBRACKET IDENTIFIER }]
}
transition on BECOMES to state [89]

-------------------
lalr_state [89]: {
  [Expression ::= (*) Expression MULT Expression , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) INTEGER_LITERAL , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) NEW INT LBRACKET Expression RBRACKET , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) Expression PLUS Expression , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) Expression PERIOD Identifier LPAREN ExpressionList RPAREN , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) IDENTIFIER , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) LPAREN Expression RPAREN , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) Expression AND Expression , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) Expression LBRACKET Expression RBRACKET , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) TRUE , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) NEW Identifier LPAREN RPAREN , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) Expression MINUS Expression , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) Expression PERIOD Identifier LPAREN RPAREN , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) THIS , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [ArrayAssignStatement ::= Identifier LBRACKET Expression RBRACKET BECOMES (*) Expression SEMICOLON , {DISPLAY IF ELSE WHILE PRINTLN RETURN LCURLYBRACKET RCURLYBRACKET IDENTIFIER }]
  [Expression ::= (*) Expression LT Expression , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) Expression PERIOD LENGTH , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) FALSE , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) NOT Expression , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
}
transition on INTEGER_LITERAL to state [47]
transition on LPAREN to state [46]
transition on NOT to state [45]
transition on IDENTIFIER to state [44]
transition on THIS to state [43]
transition on FALSE to state [42]
transition on Expression to state [90]
transition on TRUE to state [40]
transition on NEW to state [39]

-------------------
lalr_state [90]: {
  [Expression ::= Expression (*) PERIOD Identifier LPAREN ExpressionList RPAREN , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= Expression (*) MULT Expression , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= Expression (*) LT Expression , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= Expression (*) PERIOD LENGTH , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= Expression (*) MINUS Expression , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= Expression (*) AND Expression , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [ArrayAssignStatement ::= Identifier LBRACKET Expression RBRACKET BECOMES Expression (*) SEMICOLON , {DISPLAY IF ELSE WHILE PRINTLN RETURN LCURLYBRACKET RCURLYBRACKET IDENTIFIER }]
  [Expression ::= Expression (*) PERIOD Identifier LPAREN RPAREN , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= Expression (*) LBRACKET Expression RBRACKET , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= Expression (*) PLUS Expression , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
}
transition on LBRACKET to state [56]
transition on PERIOD to state [55]
transition on MINUS to state [54]
transition on PLUS to state [53]
transition on AND to state [52]
transition on MULT to state [51]
transition on SEMICOLON to state [91]
transition on LT to state [49]

-------------------
lalr_state [91]: {
  [ArrayAssignStatement ::= Identifier LBRACKET Expression RBRACKET BECOMES Expression SEMICOLON (*) , {DISPLAY IF ELSE WHILE PRINTLN RETURN LCURLYBRACKET RCURLYBRACKET IDENTIFIER }]
}

-------------------
lalr_state [92]: {
  [Expression ::= Expression (*) PERIOD Identifier LPAREN ExpressionList RPAREN , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= Expression (*) MULT Expression , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= Expression (*) LT Expression , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [AssignStatement ::= Identifier BECOMES Expression (*) SEMICOLON , {DISPLAY IF ELSE WHILE PRINTLN RETURN LCURLYBRACKET RCURLYBRACKET IDENTIFIER }]
  [Expression ::= Expression (*) PERIOD LENGTH , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= Expression (*) MINUS Expression , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= Expression (*) AND Expression , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= Expression (*) PERIOD Identifier LPAREN RPAREN , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= Expression (*) LBRACKET Expression RBRACKET , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= Expression (*) PLUS Expression , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
}
transition on LBRACKET to state [56]
transition on PERIOD to state [55]
transition on MINUS to state [54]
transition on PLUS to state [53]
transition on AND to state [52]
transition on MULT to state [51]
transition on SEMICOLON to state [93]
transition on LT to state [49]

-------------------
lalr_state [93]: {
  [AssignStatement ::= Identifier BECOMES Expression SEMICOLON (*) , {DISPLAY IF ELSE WHILE PRINTLN RETURN LCURLYBRACKET RCURLYBRACKET IDENTIFIER }]
}

-------------------
lalr_state [94]: {
  [Expression ::= (*) Expression MULT Expression , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD }]
  [Expression ::= (*) INTEGER_LITERAL , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD }]
  [Expression ::= (*) NEW INT LBRACKET Expression RBRACKET , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD }]
  [Expression ::= (*) Expression PLUS Expression , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD }]
  [Expression ::= (*) Expression PERIOD Identifier LPAREN ExpressionList RPAREN , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD }]
  [Expression ::= (*) IDENTIFIER , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD }]
  [Expression ::= (*) LPAREN Expression RPAREN , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD }]
  [Expression ::= (*) Expression AND Expression , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD }]
  [Expression ::= (*) Expression LBRACKET Expression RBRACKET , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD }]
  [Expression ::= (*) TRUE , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD }]
  [Expression ::= (*) NEW Identifier LPAREN RPAREN , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD }]
  [Expression ::= (*) Expression MINUS Expression , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD }]
  [Expression ::= (*) Expression PERIOD Identifier LPAREN RPAREN , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD }]
  [Expression ::= (*) THIS , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD }]
  [Expression ::= (*) Expression LT Expression , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD }]
  [Expression ::= (*) Expression PERIOD LENGTH , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD }]
  [Expression ::= (*) FALSE , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD }]
  [Expression ::= (*) NOT Expression , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD }]
  [PrintStatement ::= PRINTLN LPAREN (*) Expression RPAREN SEMICOLON , {DISPLAY IF ELSE WHILE PRINTLN RETURN LCURLYBRACKET RCURLYBRACKET IDENTIFIER }]
}
transition on INTEGER_LITERAL to state [47]
transition on LPAREN to state [46]
transition on NOT to state [45]
transition on IDENTIFIER to state [44]
transition on THIS to state [43]
transition on FALSE to state [42]
transition on Expression to state [95]
transition on TRUE to state [40]
transition on NEW to state [39]

-------------------
lalr_state [95]: {
  [Expression ::= Expression (*) PERIOD Identifier LPAREN ExpressionList RPAREN , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD }]
  [Expression ::= Expression (*) MULT Expression , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD }]
  [Expression ::= Expression (*) LT Expression , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD }]
  [Expression ::= Expression (*) PERIOD LENGTH , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD }]
  [Expression ::= Expression (*) MINUS Expression , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD }]
  [PrintStatement ::= PRINTLN LPAREN Expression (*) RPAREN SEMICOLON , {DISPLAY IF ELSE WHILE PRINTLN RETURN LCURLYBRACKET RCURLYBRACKET IDENTIFIER }]
  [Expression ::= Expression (*) AND Expression , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD }]
  [Expression ::= Expression (*) PERIOD Identifier LPAREN RPAREN , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD }]
  [Expression ::= Expression (*) LBRACKET Expression RBRACKET , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD }]
  [Expression ::= Expression (*) PLUS Expression , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD }]
}
transition on LBRACKET to state [56]
transition on PERIOD to state [55]
transition on MINUS to state [54]
transition on PLUS to state [53]
transition on AND to state [52]
transition on MULT to state [51]
transition on RPAREN to state [96]
transition on LT to state [49]

-------------------
lalr_state [96]: {
  [PrintStatement ::= PRINTLN LPAREN Expression RPAREN (*) SEMICOLON , {DISPLAY IF ELSE WHILE PRINTLN RETURN LCURLYBRACKET RCURLYBRACKET IDENTIFIER }]
}
transition on SEMICOLON to state [97]

-------------------
lalr_state [97]: {
  [PrintStatement ::= PRINTLN LPAREN Expression RPAREN SEMICOLON (*) , {DISPLAY IF ELSE WHILE PRINTLN RETURN LCURLYBRACKET RCURLYBRACKET IDENTIFIER }]
}

-------------------
lalr_state [98]: {
  [Expression ::= Expression (*) PERIOD Identifier LPAREN ExpressionList RPAREN , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= Expression (*) MULT Expression , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= Expression (*) LT Expression , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= Expression (*) PERIOD LENGTH , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= Expression (*) MINUS Expression , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [DisplayStatement ::= DISPLAY Expression (*) SEMICOLON , {DISPLAY IF ELSE WHILE PRINTLN RETURN LCURLYBRACKET RCURLYBRACKET IDENTIFIER }]
  [Expression ::= Expression (*) AND Expression , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= Expression (*) PERIOD Identifier LPAREN RPAREN , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= Expression (*) LBRACKET Expression RBRACKET , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= Expression (*) PLUS Expression , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
}
transition on LBRACKET to state [56]
transition on PERIOD to state [55]
transition on MINUS to state [54]
transition on PLUS to state [53]
transition on AND to state [52]
transition on MULT to state [51]
transition on SEMICOLON to state [99]
transition on LT to state [49]

-------------------
lalr_state [99]: {
  [DisplayStatement ::= DISPLAY Expression SEMICOLON (*) , {DISPLAY IF ELSE WHILE PRINTLN RETURN LCURLYBRACKET RCURLYBRACKET IDENTIFIER }]
}

-------------------
lalr_state [100]: {
  [Expression ::= (*) Expression MULT Expression , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD }]
  [Expression ::= (*) INTEGER_LITERAL , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD }]
  [Expression ::= (*) NEW INT LBRACKET Expression RBRACKET , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD }]
  [Expression ::= (*) Expression PLUS Expression , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD }]
  [Expression ::= (*) Expression PERIOD Identifier LPAREN ExpressionList RPAREN , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD }]
  [Expression ::= (*) IDENTIFIER , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD }]
  [Expression ::= (*) LPAREN Expression RPAREN , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD }]
  [Expression ::= (*) Expression AND Expression , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD }]
  [Expression ::= (*) Expression LBRACKET Expression RBRACKET , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD }]
  [Expression ::= (*) TRUE , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD }]
  [Expression ::= (*) NEW Identifier LPAREN RPAREN , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD }]
  [WhileStatement ::= WHILE LPAREN (*) Expression RPAREN Statement , {DISPLAY IF ELSE WHILE PRINTLN RETURN LCURLYBRACKET RCURLYBRACKET IDENTIFIER }]
  [Expression ::= (*) Expression MINUS Expression , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD }]
  [Expression ::= (*) Expression PERIOD Identifier LPAREN RPAREN , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD }]
  [Expression ::= (*) THIS , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD }]
  [Expression ::= (*) Expression LT Expression , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD }]
  [Expression ::= (*) Expression PERIOD LENGTH , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD }]
  [Expression ::= (*) FALSE , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD }]
  [Expression ::= (*) NOT Expression , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD }]
}
transition on INTEGER_LITERAL to state [47]
transition on LPAREN to state [46]
transition on NOT to state [45]
transition on IDENTIFIER to state [44]
transition on THIS to state [43]
transition on FALSE to state [42]
transition on Expression to state [101]
transition on TRUE to state [40]
transition on NEW to state [39]

-------------------
lalr_state [101]: {
  [Expression ::= Expression (*) PERIOD Identifier LPAREN ExpressionList RPAREN , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD }]
  [Expression ::= Expression (*) MULT Expression , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD }]
  [Expression ::= Expression (*) LT Expression , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD }]
  [Expression ::= Expression (*) PERIOD LENGTH , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD }]
  [Expression ::= Expression (*) MINUS Expression , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD }]
  [Expression ::= Expression (*) AND Expression , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD }]
  [Expression ::= Expression (*) PERIOD Identifier LPAREN RPAREN , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD }]
  [Expression ::= Expression (*) LBRACKET Expression RBRACKET , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD }]
  [Expression ::= Expression (*) PLUS Expression , {PLUS MINUS AND LT MULT RPAREN LBRACKET PERIOD }]
  [WhileStatement ::= WHILE LPAREN Expression (*) RPAREN Statement , {DISPLAY IF ELSE WHILE PRINTLN RETURN LCURLYBRACKET RCURLYBRACKET IDENTIFIER }]
}
transition on LBRACKET to state [56]
transition on PERIOD to state [55]
transition on MINUS to state [54]
transition on PLUS to state [53]
transition on AND to state [52]
transition on MULT to state [51]
transition on RPAREN to state [102]
transition on LT to state [49]

-------------------
lalr_state [102]: {
  [BlockStatement ::= (*) LCURLYBRACKET StatementList RCURLYBRACKET , {DISPLAY IF ELSE WHILE PRINTLN RETURN LCURLYBRACKET RCURLYBRACKET IDENTIFIER }]
  [Statement ::= (*) AssignStatement , {DISPLAY IF ELSE WHILE PRINTLN RETURN LCURLYBRACKET RCURLYBRACKET IDENTIFIER }]
  [Statement ::= (*) IfStatement , {DISPLAY IF ELSE WHILE PRINTLN RETURN LCURLYBRACKET RCURLYBRACKET IDENTIFIER }]
  [AssignStatement ::= (*) Identifier BECOMES Expression SEMICOLON , {DISPLAY IF ELSE WHILE PRINTLN RETURN LCURLYBRACKET RCURLYBRACKET IDENTIFIER }]
  [Identifier ::= (*) IDENTIFIER , {BECOMES LBRACKET }]
  [IfStatement ::= (*) IF LPAREN Expression RPAREN Statement , {DISPLAY IF ELSE WHILE PRINTLN RETURN LCURLYBRACKET RCURLYBRACKET IDENTIFIER }]
  [Statement ::= (*) DisplayStatement , {DISPLAY IF ELSE WHILE PRINTLN RETURN LCURLYBRACKET RCURLYBRACKET IDENTIFIER }]
  [Statement ::= (*) PrintStatement , {DISPLAY IF ELSE WHILE PRINTLN RETURN LCURLYBRACKET RCURLYBRACKET IDENTIFIER }]
  [Statement ::= (*) BlockStatement , {DISPLAY IF ELSE WHILE PRINTLN RETURN LCURLYBRACKET RCURLYBRACKET IDENTIFIER }]
  [DisplayStatement ::= (*) DISPLAY Expression SEMICOLON , {DISPLAY IF ELSE WHILE PRINTLN RETURN LCURLYBRACKET RCURLYBRACKET IDENTIFIER }]
  [PrintStatement ::= (*) PRINTLN LPAREN Expression RPAREN SEMICOLON , {DISPLAY IF ELSE WHILE PRINTLN RETURN LCURLYBRACKET RCURLYBRACKET IDENTIFIER }]
  [IfStatement ::= (*) IF LPAREN Expression RPAREN Statement ELSE Statement , {DISPLAY IF ELSE WHILE PRINTLN RETURN LCURLYBRACKET RCURLYBRACKET IDENTIFIER }]
  [Statement ::= (*) ArrayAssignStatement , {DISPLAY IF ELSE WHILE PRINTLN RETURN LCURLYBRACKET RCURLYBRACKET IDENTIFIER }]
  [Statement ::= (*) WhileStatement , {DISPLAY IF ELSE WHILE PRINTLN RETURN LCURLYBRACKET RCURLYBRACKET IDENTIFIER }]
  [WhileStatement ::= WHILE LPAREN Expression RPAREN (*) Statement , {DISPLAY IF ELSE WHILE PRINTLN RETURN LCURLYBRACKET RCURLYBRACKET IDENTIFIER }]
  [ArrayAssignStatement ::= (*) Identifier LBRACKET Expression RBRACKET BECOMES Expression SEMICOLON , {DISPLAY IF ELSE WHILE PRINTLN RETURN LCURLYBRACKET RCURLYBRACKET IDENTIFIER }]
  [WhileStatement ::= (*) WHILE LPAREN Expression RPAREN Statement , {DISPLAY IF ELSE WHILE PRINTLN RETURN LCURLYBRACKET RCURLYBRACKET IDENTIFIER }]
}
transition on ArrayAssignStatement to state [31]
transition on AssignStatement to state [30]
transition on PrintStatement to state [29]
transition on IDENTIFIER to state [4]
transition on LCURLYBRACKET to state [28]
transition on Statement to state [103]
transition on IF to state [26]
transition on WhileStatement to state [25]
transition on IfStatement to state [24]
transition on Identifier to state [23]
transition on BlockStatement to state [22]
transition on DisplayStatement to state [21]
transition on PRINTLN to state [20]
transition on DISPLAY to state [19]
transition on WHILE to state [18]

-------------------
lalr_state [103]: {
  [WhileStatement ::= WHILE LPAREN Expression RPAREN Statement (*) , {DISPLAY IF ELSE WHILE PRINTLN RETURN LCURLYBRACKET RCURLYBRACKET IDENTIFIER }]
}

-------------------
lalr_state [104]: {
  [ClassDeclList ::= ClassDecl (*) , {EOF CLASS }]
}

-------------------
lalr_state [105]: {
  [ClassDecl ::= (*) CLASS Identifier LCURLYBRACKET VarDeclList RCURLYBRACKET , {EOF CLASS }]
  [ClassDeclList ::= ClassDeclList (*) ClassDecl , {EOF CLASS }]
  [ClassDecl ::= (*) CLASS Identifier EXTENDS Identifier LCURLYBRACKET MethodDeclList RCURLYBRACKET , {EOF CLASS }]
  [ClassDecl ::= (*) CLASS Identifier LCURLYBRACKET RCURLYBRACKET , {EOF CLASS }]
  [ClassDecl ::= (*) CLASS Identifier LCURLYBRACKET VarDeclList MethodDeclList RCURLYBRACKET , {EOF CLASS }]
  [ClassDecl ::= (*) CLASS Identifier EXTENDS Identifier LCURLYBRACKET VarDeclList RCURLYBRACKET , {EOF CLASS }]
  [ClassDecl ::= (*) CLASS Identifier LCURLYBRACKET MethodDeclList RCURLYBRACKET , {EOF CLASS }]
  [ClassDecl ::= (*) CLASS Identifier EXTENDS Identifier LCURLYBRACKET RCURLYBRACKET , {EOF CLASS }]
  [ClassDecl ::= (*) CLASS Identifier EXTENDS Identifier LCURLYBRACKET VarDeclList MethodDeclList RCURLYBRACKET , {EOF CLASS }]
  [Program ::= MainClass ClassDeclList (*) , {EOF }]
}
transition on CLASS to state [106]
transition on ClassDecl to state [191]

-------------------
lalr_state [106]: {
  [ClassDecl ::= CLASS (*) Identifier LCURLYBRACKET VarDeclList RCURLYBRACKET , {EOF CLASS }]
  [ClassDecl ::= CLASS (*) Identifier EXTENDS Identifier LCURLYBRACKET MethodDeclList RCURLYBRACKET , {EOF CLASS }]
  [Identifier ::= (*) IDENTIFIER , {EXTENDS LCURLYBRACKET }]
  [ClassDecl ::= CLASS (*) Identifier LCURLYBRACKET RCURLYBRACKET , {EOF CLASS }]
  [ClassDecl ::= CLASS (*) Identifier LCURLYBRACKET VarDeclList MethodDeclList RCURLYBRACKET , {EOF CLASS }]
  [ClassDecl ::= CLASS (*) Identifier EXTENDS Identifier LCURLYBRACKET VarDeclList RCURLYBRACKET , {EOF CLASS }]
  [ClassDecl ::= CLASS (*) Identifier LCURLYBRACKET MethodDeclList RCURLYBRACKET , {EOF CLASS }]
  [ClassDecl ::= CLASS (*) Identifier EXTENDS Identifier LCURLYBRACKET RCURLYBRACKET , {EOF CLASS }]
  [ClassDecl ::= CLASS (*) Identifier EXTENDS Identifier LCURLYBRACKET VarDeclList MethodDeclList RCURLYBRACKET , {EOF CLASS }]
}
transition on Identifier to state [107]
transition on IDENTIFIER to state [4]

-------------------
lalr_state [107]: {
  [ClassDecl ::= CLASS Identifier (*) LCURLYBRACKET RCURLYBRACKET , {EOF CLASS }]
  [ClassDecl ::= CLASS Identifier (*) LCURLYBRACKET VarDeclList MethodDeclList RCURLYBRACKET , {EOF CLASS }]
  [ClassDecl ::= CLASS Identifier (*) EXTENDS Identifier LCURLYBRACKET VarDeclList RCURLYBRACKET , {EOF CLASS }]
  [ClassDecl ::= CLASS Identifier (*) LCURLYBRACKET MethodDeclList RCURLYBRACKET , {EOF CLASS }]
  [ClassDecl ::= CLASS Identifier (*) EXTENDS Identifier LCURLYBRACKET RCURLYBRACKET , {EOF CLASS }]
  [ClassDecl ::= CLASS Identifier (*) EXTENDS Identifier LCURLYBRACKET VarDeclList MethodDeclList RCURLYBRACKET , {EOF CLASS }]
  [ClassDecl ::= CLASS Identifier (*) LCURLYBRACKET VarDeclList RCURLYBRACKET , {EOF CLASS }]
  [ClassDecl ::= CLASS Identifier (*) EXTENDS Identifier LCURLYBRACKET MethodDeclList RCURLYBRACKET , {EOF CLASS }]
}
transition on LCURLYBRACKET to state [109]
transition on EXTENDS to state [108]

-------------------
lalr_state [108]: {
  [Identifier ::= (*) IDENTIFIER , {LCURLYBRACKET }]
  [ClassDecl ::= CLASS Identifier EXTENDS (*) Identifier LCURLYBRACKET VarDeclList RCURLYBRACKET , {EOF CLASS }]
  [ClassDecl ::= CLASS Identifier EXTENDS (*) Identifier LCURLYBRACKET RCURLYBRACKET , {EOF CLASS }]
  [ClassDecl ::= CLASS Identifier EXTENDS (*) Identifier LCURLYBRACKET VarDeclList MethodDeclList RCURLYBRACKET , {EOF CLASS }]
  [ClassDecl ::= CLASS Identifier EXTENDS (*) Identifier LCURLYBRACKET MethodDeclList RCURLYBRACKET , {EOF CLASS }]
}
transition on Identifier to state [182]
transition on IDENTIFIER to state [4]

-------------------
lalr_state [109]: {
  [MethodDeclList ::= (*) MethodDeclList MethodDecl , {PUBLIC RCURLYBRACKET }]
  [MethodDecl ::= (*) PUBLIC Type Identifier LPAREN RPAREN LCURLYBRACKET VarDeclList StatementList RETURN Expression SEMICOLON RCURLYBRACKET , {PUBLIC RCURLYBRACKET }]
  [VarDeclList ::= (*) VarDeclList VarDecl , {PUBLIC INT BOOLEAN RCURLYBRACKET IDENTIFIER }]
  [Type ::= (*) INT LBRACKET RBRACKET , {IDENTIFIER }]
  [ClassDecl ::= CLASS Identifier LCURLYBRACKET (*) RCURLYBRACKET , {EOF CLASS }]
  [MethodDecl ::= (*) PUBLIC Type Identifier LPAREN FormalList RPAREN LCURLYBRACKET StatementList RETURN Expression SEMICOLON RCURLYBRACKET , {PUBLIC RCURLYBRACKET }]
  [MethodDecl ::= (*) PUBLIC Type Identifier LPAREN RPAREN LCURLYBRACKET RETURN Expression SEMICOLON RCURLYBRACKET , {PUBLIC RCURLYBRACKET }]
  [Type ::= (*) IDENTIFIER , {IDENTIFIER }]
  [ClassDecl ::= CLASS Identifier LCURLYBRACKET (*) VarDeclList RCURLYBRACKET , {EOF CLASS }]
  [MethodDecl ::= (*) PUBLIC Type Identifier LPAREN FormalList RPAREN LCURLYBRACKET VarDeclList StatementList RETURN Expression SEMICOLON RCURLYBRACKET , {PUBLIC RCURLYBRACKET }]
  [MethodDecl ::= (*) PUBLIC Type Identifier LPAREN RPAREN LCURLYBRACKET VarDeclList RETURN Expression SEMICOLON RCURLYBRACKET , {PUBLIC RCURLYBRACKET }]
  [VarDecl ::= (*) Type Identifier SEMICOLON , {PUBLIC INT BOOLEAN RCURLYBRACKET IDENTIFIER }]
  [Type ::= (*) BOOLEAN , {IDENTIFIER }]
  [MethodDeclList ::= (*) MethodDecl , {PUBLIC RCURLYBRACKET }]
  [MethodDecl ::= (*) PUBLIC Type Identifier LPAREN FormalList RPAREN LCURLYBRACKET RETURN Expression SEMICOLON RCURLYBRACKET , {PUBLIC RCURLYBRACKET }]
  [VarDeclList ::= (*) VarDecl , {PUBLIC INT BOOLEAN RCURLYBRACKET IDENTIFIER }]
  [ClassDecl ::= CLASS Identifier LCURLYBRACKET (*) MethodDeclList RCURLYBRACKET , {EOF CLASS }]
  [MethodDecl ::= (*) PUBLIC Type Identifier LPAREN FormalList RPAREN LCURLYBRACKET VarDeclList RETURN Expression SEMICOLON RCURLYBRACKET , {PUBLIC RCURLYBRACKET }]
  [MethodDecl ::= (*) PUBLIC Type Identifier LPAREN RPAREN LCURLYBRACKET StatementList RETURN Expression SEMICOLON RCURLYBRACKET , {PUBLIC RCURLYBRACKET }]
  [Type ::= (*) INT , {IDENTIFIER }]
  [ClassDecl ::= CLASS Identifier LCURLYBRACKET (*) VarDeclList MethodDeclList RCURLYBRACKET , {EOF CLASS }]
}
transition on MethodDeclList to state [119]
transition on IDENTIFIER to state [118]
transition on VarDecl to state [117]
transition on BOOLEAN to state [116]
transition on MethodDecl to state [115]
transition on RCURLYBRACKET to state [114]
transition on PUBLIC to state [113]
transition on VarDeclList to state [112]
transition on INT to state [111]
transition on Type to state [110]

-------------------
lalr_state [110]: {
  [Identifier ::= (*) IDENTIFIER , {SEMICOLON }]
  [VarDecl ::= Type (*) Identifier SEMICOLON , {DISPLAY PUBLIC INT BOOLEAN IF WHILE PRINTLN RETURN LCURLYBRACKET RCURLYBRACKET IDENTIFIER }]
}
transition on Identifier to state [180]
transition on IDENTIFIER to state [4]

-------------------
lalr_state [111]: {
  [Type ::= INT (*) , {IDENTIFIER }]
  [Type ::= INT (*) LBRACKET RBRACKET , {IDENTIFIER }]
}
transition on LBRACKET to state [178]

-------------------
lalr_state [112]: {
  [MethodDeclList ::= (*) MethodDeclList MethodDecl , {PUBLIC RCURLYBRACKET }]
  [VarDeclList ::= VarDeclList (*) VarDecl , {PUBLIC INT BOOLEAN RCURLYBRACKET IDENTIFIER }]
  [MethodDecl ::= (*) PUBLIC Type Identifier LPAREN RPAREN LCURLYBRACKET VarDeclList StatementList RETURN Expression SEMICOLON RCURLYBRACKET , {PUBLIC RCURLYBRACKET }]
  [Type ::= (*) INT LBRACKET RBRACKET , {IDENTIFIER }]
  [MethodDecl ::= (*) PUBLIC Type Identifier LPAREN FormalList RPAREN LCURLYBRACKET StatementList RETURN Expression SEMICOLON RCURLYBRACKET , {PUBLIC RCURLYBRACKET }]
  [MethodDecl ::= (*) PUBLIC Type Identifier LPAREN RPAREN LCURLYBRACKET RETURN Expression SEMICOLON RCURLYBRACKET , {PUBLIC RCURLYBRACKET }]
  [Type ::= (*) IDENTIFIER , {IDENTIFIER }]
  [ClassDecl ::= CLASS Identifier LCURLYBRACKET VarDeclList (*) RCURLYBRACKET , {EOF CLASS }]
  [MethodDecl ::= (*) PUBLIC Type Identifier LPAREN FormalList RPAREN LCURLYBRACKET VarDeclList StatementList RETURN Expression SEMICOLON RCURLYBRACKET , {PUBLIC RCURLYBRACKET }]
  [MethodDecl ::= (*) PUBLIC Type Identifier LPAREN RPAREN LCURLYBRACKET VarDeclList RETURN Expression SEMICOLON RCURLYBRACKET , {PUBLIC RCURLYBRACKET }]
  [VarDecl ::= (*) Type Identifier SEMICOLON , {PUBLIC INT BOOLEAN RCURLYBRACKET IDENTIFIER }]
  [Type ::= (*) BOOLEAN , {IDENTIFIER }]
  [MethodDeclList ::= (*) MethodDecl , {PUBLIC RCURLYBRACKET }]
  [MethodDecl ::= (*) PUBLIC Type Identifier LPAREN FormalList RPAREN LCURLYBRACKET RETURN Expression SEMICOLON RCURLYBRACKET , {PUBLIC RCURLYBRACKET }]
  [MethodDecl ::= (*) PUBLIC Type Identifier LPAREN FormalList RPAREN LCURLYBRACKET VarDeclList RETURN Expression SEMICOLON RCURLYBRACKET , {PUBLIC RCURLYBRACKET }]
  [MethodDecl ::= (*) PUBLIC Type Identifier LPAREN RPAREN LCURLYBRACKET StatementList RETURN Expression SEMICOLON RCURLYBRACKET , {PUBLIC RCURLYBRACKET }]
  [Type ::= (*) INT , {IDENTIFIER }]
  [ClassDecl ::= CLASS Identifier LCURLYBRACKET VarDeclList (*) MethodDeclList RCURLYBRACKET , {EOF CLASS }]
}
transition on MethodDeclList to state [176]
transition on IDENTIFIER to state [118]
transition on VarDecl to state [139]
transition on BOOLEAN to state [116]
transition on MethodDecl to state [115]
transition on RCURLYBRACKET to state [175]
transition on PUBLIC to state [113]
transition on INT to state [111]
transition on Type to state [110]

-------------------
lalr_state [113]: {
  [MethodDecl ::= PUBLIC (*) Type Identifier LPAREN FormalList RPAREN LCURLYBRACKET VarDeclList RETURN Expression SEMICOLON RCURLYBRACKET , {PUBLIC RCURLYBRACKET }]
  [Type ::= (*) BOOLEAN , {IDENTIFIER }]
  [MethodDecl ::= PUBLIC (*) Type Identifier LPAREN RPAREN LCURLYBRACKET StatementList RETURN Expression SEMICOLON RCURLYBRACKET , {PUBLIC RCURLYBRACKET }]
  [MethodDecl ::= PUBLIC (*) Type Identifier LPAREN FormalList RPAREN LCURLYBRACKET RETURN Expression SEMICOLON RCURLYBRACKET , {PUBLIC RCURLYBRACKET }]
  [MethodDecl ::= PUBLIC (*) Type Identifier LPAREN FormalList RPAREN LCURLYBRACKET VarDeclList StatementList RETURN Expression SEMICOLON RCURLYBRACKET , {PUBLIC RCURLYBRACKET }]
  [Type ::= (*) IDENTIFIER , {IDENTIFIER }]
  [Type ::= (*) INT LBRACKET RBRACKET , {IDENTIFIER }]
  [MethodDecl ::= PUBLIC (*) Type Identifier LPAREN RPAREN LCURLYBRACKET VarDeclList RETURN Expression SEMICOLON RCURLYBRACKET , {PUBLIC RCURLYBRACKET }]
  [MethodDecl ::= PUBLIC (*) Type Identifier LPAREN FormalList RPAREN LCURLYBRACKET StatementList RETURN Expression SEMICOLON RCURLYBRACKET , {PUBLIC RCURLYBRACKET }]
  [Type ::= (*) INT , {IDENTIFIER }]
  [MethodDecl ::= PUBLIC (*) Type Identifier LPAREN RPAREN LCURLYBRACKET RETURN Expression SEMICOLON RCURLYBRACKET , {PUBLIC RCURLYBRACKET }]
  [MethodDecl ::= PUBLIC (*) Type Identifier LPAREN RPAREN LCURLYBRACKET VarDeclList StatementList RETURN Expression SEMICOLON RCURLYBRACKET , {PUBLIC RCURLYBRACKET }]
}
transition on INT to state [111]
transition on BOOLEAN to state [116]
transition on IDENTIFIER to state [118]
transition on Type to state [122]

-------------------
lalr_state [114]: {
  [ClassDecl ::= CLASS Identifier LCURLYBRACKET RCURLYBRACKET (*) , {EOF CLASS }]
}

-------------------
lalr_state [115]: {
  [MethodDeclList ::= MethodDecl (*) , {PUBLIC RCURLYBRACKET }]
}

-------------------
lalr_state [116]: {
  [Type ::= BOOLEAN (*) , {IDENTIFIER }]
}

-------------------
lalr_state [117]: {
  [VarDeclList ::= VarDecl (*) , {DISPLAY PUBLIC INT BOOLEAN IF WHILE PRINTLN RETURN LCURLYBRACKET RCURLYBRACKET IDENTIFIER }]
}

-------------------
lalr_state [118]: {
  [Type ::= IDENTIFIER (*) , {IDENTIFIER }]
}

-------------------
lalr_state [119]: {
  [MethodDecl ::= (*) PUBLIC Type Identifier LPAREN RPAREN LCURLYBRACKET VarDeclList StatementList RETURN Expression SEMICOLON RCURLYBRACKET , {PUBLIC RCURLYBRACKET }]
  [MethodDecl ::= (*) PUBLIC Type Identifier LPAREN FormalList RPAREN LCURLYBRACKET VarDeclList RETURN Expression SEMICOLON RCURLYBRACKET , {PUBLIC RCURLYBRACKET }]
  [MethodDecl ::= (*) PUBLIC Type Identifier LPAREN RPAREN LCURLYBRACKET StatementList RETURN Expression SEMICOLON RCURLYBRACKET , {PUBLIC RCURLYBRACKET }]
  [MethodDecl ::= (*) PUBLIC Type Identifier LPAREN FormalList RPAREN LCURLYBRACKET RETURN Expression SEMICOLON RCURLYBRACKET , {PUBLIC RCURLYBRACKET }]
  [MethodDecl ::= (*) PUBLIC Type Identifier LPAREN FormalList RPAREN LCURLYBRACKET VarDeclList StatementList RETURN Expression SEMICOLON RCURLYBRACKET , {PUBLIC RCURLYBRACKET }]
  [ClassDecl ::= CLASS Identifier LCURLYBRACKET MethodDeclList (*) RCURLYBRACKET , {EOF CLASS }]
  [MethodDecl ::= (*) PUBLIC Type Identifier LPAREN RPAREN LCURLYBRACKET VarDeclList RETURN Expression SEMICOLON RCURLYBRACKET , {PUBLIC RCURLYBRACKET }]
  [MethodDeclList ::= MethodDeclList (*) MethodDecl , {PUBLIC RCURLYBRACKET }]
  [MethodDecl ::= (*) PUBLIC Type Identifier LPAREN FormalList RPAREN LCURLYBRACKET StatementList RETURN Expression SEMICOLON RCURLYBRACKET , {PUBLIC RCURLYBRACKET }]
  [MethodDecl ::= (*) PUBLIC Type Identifier LPAREN RPAREN LCURLYBRACKET RETURN Expression SEMICOLON RCURLYBRACKET , {PUBLIC RCURLYBRACKET }]
}
transition on PUBLIC to state [113]
transition on MethodDecl to state [121]
transition on RCURLYBRACKET to state [120]

-------------------
lalr_state [120]: {
  [ClassDecl ::= CLASS Identifier LCURLYBRACKET MethodDeclList RCURLYBRACKET (*) , {EOF CLASS }]
}

-------------------
lalr_state [121]: {
  [MethodDeclList ::= MethodDeclList MethodDecl (*) , {PUBLIC RCURLYBRACKET }]
}

-------------------
lalr_state [122]: {
  [MethodDecl ::= PUBLIC Type (*) Identifier LPAREN RPAREN LCURLYBRACKET StatementList RETURN Expression SEMICOLON RCURLYBRACKET , {PUBLIC RCURLYBRACKET }]
  [Identifier ::= (*) IDENTIFIER , {LPAREN }]
  [MethodDecl ::= PUBLIC Type (*) Identifier LPAREN FormalList RPAREN LCURLYBRACKET RETURN Expression SEMICOLON RCURLYBRACKET , {PUBLIC RCURLYBRACKET }]
  [MethodDecl ::= PUBLIC Type (*) Identifier LPAREN FormalList RPAREN LCURLYBRACKET VarDeclList StatementList RETURN Expression SEMICOLON RCURLYBRACKET , {PUBLIC RCURLYBRACKET }]
  [MethodDecl ::= PUBLIC Type (*) Identifier LPAREN RPAREN LCURLYBRACKET VarDeclList RETURN Expression SEMICOLON RCURLYBRACKET , {PUBLIC RCURLYBRACKET }]
  [MethodDecl ::= PUBLIC Type (*) Identifier LPAREN FormalList RPAREN LCURLYBRACKET StatementList RETURN Expression SEMICOLON RCURLYBRACKET , {PUBLIC RCURLYBRACKET }]
  [MethodDecl ::= PUBLIC Type (*) Identifier LPAREN RPAREN LCURLYBRACKET RETURN Expression SEMICOLON RCURLYBRACKET , {PUBLIC RCURLYBRACKET }]
  [MethodDecl ::= PUBLIC Type (*) Identifier LPAREN RPAREN LCURLYBRACKET VarDeclList StatementList RETURN Expression SEMICOLON RCURLYBRACKET , {PUBLIC RCURLYBRACKET }]
  [MethodDecl ::= PUBLIC Type (*) Identifier LPAREN FormalList RPAREN LCURLYBRACKET VarDeclList RETURN Expression SEMICOLON RCURLYBRACKET , {PUBLIC RCURLYBRACKET }]
}
transition on Identifier to state [123]
transition on IDENTIFIER to state [4]

-------------------
lalr_state [123]: {
  [MethodDecl ::= PUBLIC Type Identifier (*) LPAREN RPAREN LCURLYBRACKET VarDeclList RETURN Expression SEMICOLON RCURLYBRACKET , {PUBLIC RCURLYBRACKET }]
  [MethodDecl ::= PUBLIC Type Identifier (*) LPAREN FormalList RPAREN LCURLYBRACKET StatementList RETURN Expression SEMICOLON RCURLYBRACKET , {PUBLIC RCURLYBRACKET }]
  [MethodDecl ::= PUBLIC Type Identifier (*) LPAREN RPAREN LCURLYBRACKET RETURN Expression SEMICOLON RCURLYBRACKET , {PUBLIC RCURLYBRACKET }]
  [MethodDecl ::= PUBLIC Type Identifier (*) LPAREN RPAREN LCURLYBRACKET VarDeclList StatementList RETURN Expression SEMICOLON RCURLYBRACKET , {PUBLIC RCURLYBRACKET }]
  [MethodDecl ::= PUBLIC Type Identifier (*) LPAREN FormalList RPAREN LCURLYBRACKET VarDeclList RETURN Expression SEMICOLON RCURLYBRACKET , {PUBLIC RCURLYBRACKET }]
  [MethodDecl ::= PUBLIC Type Identifier (*) LPAREN RPAREN LCURLYBRACKET StatementList RETURN Expression SEMICOLON RCURLYBRACKET , {PUBLIC RCURLYBRACKET }]
  [MethodDecl ::= PUBLIC Type Identifier (*) LPAREN FormalList RPAREN LCURLYBRACKET RETURN Expression SEMICOLON RCURLYBRACKET , {PUBLIC RCURLYBRACKET }]
  [MethodDecl ::= PUBLIC Type Identifier (*) LPAREN FormalList RPAREN LCURLYBRACKET VarDeclList StatementList RETURN Expression SEMICOLON RCURLYBRACKET , {PUBLIC RCURLYBRACKET }]
}
transition on LPAREN to state [124]

-------------------
lalr_state [124]: {
  [MethodDecl ::= PUBLIC Type Identifier LPAREN (*) RPAREN LCURLYBRACKET StatementList RETURN Expression SEMICOLON RCURLYBRACKET , {PUBLIC RCURLYBRACKET }]
  [Type ::= (*) BOOLEAN , {IDENTIFIER }]
  [MethodDecl ::= PUBLIC Type Identifier LPAREN (*) FormalList RPAREN LCURLYBRACKET RETURN Expression SEMICOLON RCURLYBRACKET , {PUBLIC RCURLYBRACKET }]
  [FormalList ::= (*) FormalList COMMA Formal , {RPAREN COMMA }]
  [MethodDecl ::= PUBLIC Type Identifier LPAREN (*) FormalList RPAREN LCURLYBRACKET VarDeclList StatementList RETURN Expression SEMICOLON RCURLYBRACKET , {PUBLIC RCURLYBRACKET }]
  [Type ::= (*) IDENTIFIER , {IDENTIFIER }]
  [MethodDecl ::= PUBLIC Type Identifier LPAREN (*) RPAREN LCURLYBRACKET VarDeclList RETURN Expression SEMICOLON RCURLYBRACKET , {PUBLIC RCURLYBRACKET }]
  [Type ::= (*) INT LBRACKET RBRACKET , {IDENTIFIER }]
  [MethodDecl ::= PUBLIC Type Identifier LPAREN (*) FormalList RPAREN LCURLYBRACKET StatementList RETURN Expression SEMICOLON RCURLYBRACKET , {PUBLIC RCURLYBRACKET }]
  [FormalList ::= (*) Formal , {RPAREN COMMA }]
  [MethodDecl ::= PUBLIC Type Identifier LPAREN (*) RPAREN LCURLYBRACKET RETURN Expression SEMICOLON RCURLYBRACKET , {PUBLIC RCURLYBRACKET }]
  [Type ::= (*) INT , {IDENTIFIER }]
  [MethodDecl ::= PUBLIC Type Identifier LPAREN (*) RPAREN LCURLYBRACKET VarDeclList StatementList RETURN Expression SEMICOLON RCURLYBRACKET , {PUBLIC RCURLYBRACKET }]
  [Formal ::= (*) Type Identifier , {RPAREN COMMA }]
  [MethodDecl ::= PUBLIC Type Identifier LPAREN (*) FormalList RPAREN LCURLYBRACKET VarDeclList RETURN Expression SEMICOLON RCURLYBRACKET , {PUBLIC RCURLYBRACKET }]
}
transition on INT to state [111]
transition on BOOLEAN to state [116]
transition on IDENTIFIER to state [118]
transition on RPAREN to state [128]
transition on Formal to state [127]
transition on Type to state [126]
transition on FormalList to state [125]

-------------------
lalr_state [125]: {
  [MethodDecl ::= PUBLIC Type Identifier LPAREN FormalList (*) RPAREN LCURLYBRACKET VarDeclList RETURN Expression SEMICOLON RCURLYBRACKET , {PUBLIC RCURLYBRACKET }]
  [MethodDecl ::= PUBLIC Type Identifier LPAREN FormalList (*) RPAREN LCURLYBRACKET RETURN Expression SEMICOLON RCURLYBRACKET , {PUBLIC RCURLYBRACKET }]
  [MethodDecl ::= PUBLIC Type Identifier LPAREN FormalList (*) RPAREN LCURLYBRACKET VarDeclList StatementList RETURN Expression SEMICOLON RCURLYBRACKET , {PUBLIC RCURLYBRACKET }]
  [FormalList ::= FormalList (*) COMMA Formal , {RPAREN COMMA }]
  [MethodDecl ::= PUBLIC Type Identifier LPAREN FormalList (*) RPAREN LCURLYBRACKET StatementList RETURN Expression SEMICOLON RCURLYBRACKET , {PUBLIC RCURLYBRACKET }]
}
transition on RPAREN to state [153]
transition on COMMA to state [152]

-------------------
lalr_state [126]: {
  [Identifier ::= (*) IDENTIFIER , {RPAREN COMMA }]
  [Formal ::= Type (*) Identifier , {RPAREN COMMA }]
}
transition on Identifier to state [151]
transition on IDENTIFIER to state [4]

-------------------
lalr_state [127]: {
  [FormalList ::= Formal (*) , {RPAREN COMMA }]
}

-------------------
lalr_state [128]: {
  [MethodDecl ::= PUBLIC Type Identifier LPAREN RPAREN (*) LCURLYBRACKET RETURN Expression SEMICOLON RCURLYBRACKET , {PUBLIC RCURLYBRACKET }]
  [MethodDecl ::= PUBLIC Type Identifier LPAREN RPAREN (*) LCURLYBRACKET VarDeclList StatementList RETURN Expression SEMICOLON RCURLYBRACKET , {PUBLIC RCURLYBRACKET }]
  [MethodDecl ::= PUBLIC Type Identifier LPAREN RPAREN (*) LCURLYBRACKET StatementList RETURN Expression SEMICOLON RCURLYBRACKET , {PUBLIC RCURLYBRACKET }]
  [MethodDecl ::= PUBLIC Type Identifier LPAREN RPAREN (*) LCURLYBRACKET VarDeclList RETURN Expression SEMICOLON RCURLYBRACKET , {PUBLIC RCURLYBRACKET }]
}
transition on LCURLYBRACKET to state [129]

-------------------
lalr_state [129]: {
  [VarDeclList ::= (*) VarDeclList VarDecl , {DISPLAY INT BOOLEAN IF WHILE PRINTLN RETURN LCURLYBRACKET IDENTIFIER }]
  [Type ::= (*) INT LBRACKET RBRACKET , {IDENTIFIER }]
  [StatementList ::= (*) StatementList Statement , {DISPLAY IF WHILE PRINTLN RETURN LCURLYBRACKET IDENTIFIER }]
  [Statement ::= (*) AssignStatement , {DISPLAY IF WHILE PRINTLN RETURN LCURLYBRACKET IDENTIFIER }]
  [MethodDecl ::= PUBLIC Type Identifier LPAREN RPAREN LCURLYBRACKET (*) RETURN Expression SEMICOLON RCURLYBRACKET , {PUBLIC RCURLYBRACKET }]
  [IfStatement ::= (*) IF LPAREN Expression RPAREN Statement , {DISPLAY IF WHILE PRINTLN RETURN LCURLYBRACKET IDENTIFIER }]
  [DisplayStatement ::= (*) DISPLAY Expression SEMICOLON , {DISPLAY IF WHILE PRINTLN RETURN LCURLYBRACKET IDENTIFIER }]
  [Type ::= (*) IDENTIFIER , {IDENTIFIER }]
  [Statement ::= (*) WhileStatement , {DISPLAY IF WHILE PRINTLN RETURN LCURLYBRACKET IDENTIFIER }]
  [MethodDecl ::= PUBLIC Type Identifier LPAREN RPAREN LCURLYBRACKET (*) VarDeclList RETURN Expression SEMICOLON RCURLYBRACKET , {PUBLIC RCURLYBRACKET }]
  [BlockStatement ::= (*) LCURLYBRACKET StatementList RCURLYBRACKET , {DISPLAY IF WHILE PRINTLN RETURN LCURLYBRACKET IDENTIFIER }]
  [AssignStatement ::= (*) Identifier BECOMES Expression SEMICOLON , {DISPLAY IF WHILE PRINTLN RETURN LCURLYBRACKET IDENTIFIER }]
  [VarDecl ::= (*) Type Identifier SEMICOLON , {DISPLAY INT BOOLEAN IF WHILE PRINTLN RETURN LCURLYBRACKET IDENTIFIER }]
  [Type ::= (*) BOOLEAN , {IDENTIFIER }]
  [Statement ::= (*) BlockStatement , {DISPLAY IF WHILE PRINTLN RETURN LCURLYBRACKET IDENTIFIER }]
  [Statement ::= (*) ArrayAssignStatement , {DISPLAY IF WHILE PRINTLN RETURN LCURLYBRACKET IDENTIFIER }]
  [WhileStatement ::= (*) WHILE LPAREN Expression RPAREN Statement , {DISPLAY IF WHILE PRINTLN RETURN LCURLYBRACKET IDENTIFIER }]
  [Identifier ::= (*) IDENTIFIER , {BECOMES LBRACKET }]
  [VarDeclList ::= (*) VarDecl , {DISPLAY INT BOOLEAN IF WHILE PRINTLN RETURN LCURLYBRACKET IDENTIFIER }]
  [StatementList ::= (*) Statement , {DISPLAY IF WHILE PRINTLN RETURN LCURLYBRACKET IDENTIFIER }]
  [Statement ::= (*) PrintStatement , {DISPLAY IF WHILE PRINTLN RETURN LCURLYBRACKET IDENTIFIER }]
  [MethodDecl ::= PUBLIC Type Identifier LPAREN RPAREN LCURLYBRACKET (*) StatementList RETURN Expression SEMICOLON RCURLYBRACKET , {PUBLIC RCURLYBRACKET }]
  [IfStatement ::= (*) IF LPAREN Expression RPAREN Statement ELSE Statement , {DISPLAY IF WHILE PRINTLN RETURN LCURLYBRACKET IDENTIFIER }]
  [ArrayAssignStatement ::= (*) Identifier LBRACKET Expression RBRACKET BECOMES Expression SEMICOLON , {DISPLAY IF WHILE PRINTLN RETURN LCURLYBRACKET IDENTIFIER }]
  [Type ::= (*) INT , {IDENTIFIER }]
  [MethodDecl ::= PUBLIC Type Identifier LPAREN RPAREN LCURLYBRACKET (*) VarDeclList StatementList RETURN Expression SEMICOLON RCURLYBRACKET , {PUBLIC RCURLYBRACKET }]
  [Statement ::= (*) IfStatement , {DISPLAY IF WHILE PRINTLN RETURN LCURLYBRACKET IDENTIFIER }]
  [Statement ::= (*) DisplayStatement , {DISPLAY IF WHILE PRINTLN RETURN LCURLYBRACKET IDENTIFIER }]
  [PrintStatement ::= (*) PRINTLN LPAREN Expression RPAREN SEMICOLON , {DISPLAY IF WHILE PRINTLN RETURN LCURLYBRACKET IDENTIFIER }]
}
transition on BlockStatement to state [22]
transition on ArrayAssignStatement to state [31]
transition on StatementList to state [133]
transition on DisplayStatement to state [21]
transition on DISPLAY to state [19]
transition on Statement to state [33]
transition on LCURLYBRACKET to state [28]
transition on PRINTLN to state [20]
transition on VarDecl to state [117]
transition on Identifier to state [23]
transition on AssignStatement to state [30]
transition on VarDeclList to state [132]
transition on BOOLEAN to state [116]
transition on WhileStatement to state [25]
transition on Type to state [110]
transition on IF to state [26]
transition on IfStatement to state [24]
transition on IDENTIFIER to state [131]
transition on RETURN to state [130]
transition on PrintStatement to state [29]
transition on WHILE to state [18]
transition on INT to state [111]

-------------------
lalr_state [130]: {
  [Expression ::= (*) Expression MULT Expression , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) INTEGER_LITERAL , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) NEW INT LBRACKET Expression RBRACKET , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [MethodDecl ::= PUBLIC Type Identifier LPAREN RPAREN LCURLYBRACKET RETURN (*) Expression SEMICOLON RCURLYBRACKET , {PUBLIC RCURLYBRACKET }]
  [Expression ::= (*) Expression PLUS Expression , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) Expression PERIOD Identifier LPAREN ExpressionList RPAREN , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) IDENTIFIER , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) LPAREN Expression RPAREN , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) Expression AND Expression , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) Expression LBRACKET Expression RBRACKET , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) TRUE , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) NEW Identifier LPAREN RPAREN , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) Expression MINUS Expression , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) Expression PERIOD Identifier LPAREN RPAREN , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) THIS , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) Expression LT Expression , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) Expression PERIOD LENGTH , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) FALSE , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) NOT Expression , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
}
transition on INTEGER_LITERAL to state [47]
transition on LPAREN to state [46]
transition on NOT to state [45]
transition on IDENTIFIER to state [44]
transition on THIS to state [43]
transition on FALSE to state [42]
transition on Expression to state [148]
transition on TRUE to state [40]
transition on NEW to state [39]

-------------------
lalr_state [131]: {
  [Identifier ::= IDENTIFIER (*) , {BECOMES LBRACKET }]
  [Type ::= IDENTIFIER (*) , {IDENTIFIER }]
}

-------------------
lalr_state [132]: {
  [VarDeclList ::= VarDeclList (*) VarDecl , {DISPLAY INT BOOLEAN IF WHILE PRINTLN RETURN LCURLYBRACKET IDENTIFIER }]
  [Type ::= (*) INT LBRACKET RBRACKET , {IDENTIFIER }]
  [StatementList ::= (*) StatementList Statement , {DISPLAY IF WHILE PRINTLN RETURN LCURLYBRACKET IDENTIFIER }]
  [Statement ::= (*) AssignStatement , {DISPLAY IF WHILE PRINTLN RETURN LCURLYBRACKET IDENTIFIER }]
  [IfStatement ::= (*) IF LPAREN Expression RPAREN Statement , {DISPLAY IF WHILE PRINTLN RETURN LCURLYBRACKET IDENTIFIER }]
  [DisplayStatement ::= (*) DISPLAY Expression SEMICOLON , {DISPLAY IF WHILE PRINTLN RETURN LCURLYBRACKET IDENTIFIER }]
  [Type ::= (*) IDENTIFIER , {IDENTIFIER }]
  [MethodDecl ::= PUBLIC Type Identifier LPAREN RPAREN LCURLYBRACKET VarDeclList (*) RETURN Expression SEMICOLON RCURLYBRACKET , {PUBLIC RCURLYBRACKET }]
  [Statement ::= (*) WhileStatement , {DISPLAY IF WHILE PRINTLN RETURN LCURLYBRACKET IDENTIFIER }]
  [BlockStatement ::= (*) LCURLYBRACKET StatementList RCURLYBRACKET , {DISPLAY IF WHILE PRINTLN RETURN LCURLYBRACKET IDENTIFIER }]
  [AssignStatement ::= (*) Identifier BECOMES Expression SEMICOLON , {DISPLAY IF WHILE PRINTLN RETURN LCURLYBRACKET IDENTIFIER }]
  [VarDecl ::= (*) Type Identifier SEMICOLON , {DISPLAY INT BOOLEAN IF WHILE PRINTLN RETURN LCURLYBRACKET IDENTIFIER }]
  [Type ::= (*) BOOLEAN , {IDENTIFIER }]
  [Statement ::= (*) BlockStatement , {DISPLAY IF WHILE PRINTLN RETURN LCURLYBRACKET IDENTIFIER }]
  [Statement ::= (*) ArrayAssignStatement , {DISPLAY IF WHILE PRINTLN RETURN LCURLYBRACKET IDENTIFIER }]
  [WhileStatement ::= (*) WHILE LPAREN Expression RPAREN Statement , {DISPLAY IF WHILE PRINTLN RETURN LCURLYBRACKET IDENTIFIER }]
  [Identifier ::= (*) IDENTIFIER , {BECOMES LBRACKET }]
  [StatementList ::= (*) Statement , {DISPLAY IF WHILE PRINTLN RETURN LCURLYBRACKET IDENTIFIER }]
  [Statement ::= (*) PrintStatement , {DISPLAY IF WHILE PRINTLN RETURN LCURLYBRACKET IDENTIFIER }]
  [IfStatement ::= (*) IF LPAREN Expression RPAREN Statement ELSE Statement , {DISPLAY IF WHILE PRINTLN RETURN LCURLYBRACKET IDENTIFIER }]
  [ArrayAssignStatement ::= (*) Identifier LBRACKET Expression RBRACKET BECOMES Expression SEMICOLON , {DISPLAY IF WHILE PRINTLN RETURN LCURLYBRACKET IDENTIFIER }]
  [Type ::= (*) INT , {IDENTIFIER }]
  [MethodDecl ::= PUBLIC Type Identifier LPAREN RPAREN LCURLYBRACKET VarDeclList (*) StatementList RETURN Expression SEMICOLON RCURLYBRACKET , {PUBLIC RCURLYBRACKET }]
  [Statement ::= (*) IfStatement , {DISPLAY IF WHILE PRINTLN RETURN LCURLYBRACKET IDENTIFIER }]
  [Statement ::= (*) DisplayStatement , {DISPLAY IF WHILE PRINTLN RETURN LCURLYBRACKET IDENTIFIER }]
  [PrintStatement ::= (*) PRINTLN LPAREN Expression RPAREN SEMICOLON , {DISPLAY IF WHILE PRINTLN RETURN LCURLYBRACKET IDENTIFIER }]
}
transition on BlockStatement to state [22]
transition on ArrayAssignStatement to state [31]
transition on StatementList to state [140]
transition on DisplayStatement to state [21]
transition on DISPLAY to state [19]
transition on Statement to state [33]
transition on LCURLYBRACKET to state [28]
transition on PRINTLN to state [20]
transition on Identifier to state [23]
transition on VarDecl to state [139]
transition on AssignStatement to state [30]
transition on BOOLEAN to state [116]
transition on WhileStatement to state [25]
transition on Type to state [110]
transition on IF to state [26]
transition on IfStatement to state [24]
transition on IDENTIFIER to state [131]
transition on RETURN to state [138]
transition on PrintStatement to state [29]
transition on WHILE to state [18]
transition on INT to state [111]

-------------------
lalr_state [133]: {
  [StatementList ::= StatementList (*) Statement , {DISPLAY IF WHILE PRINTLN RETURN LCURLYBRACKET IDENTIFIER }]
  [Statement ::= (*) AssignStatement , {DISPLAY IF WHILE PRINTLN RETURN LCURLYBRACKET IDENTIFIER }]
  [IfStatement ::= (*) IF LPAREN Expression RPAREN Statement , {DISPLAY IF WHILE PRINTLN RETURN LCURLYBRACKET IDENTIFIER }]
  [DisplayStatement ::= (*) DISPLAY Expression SEMICOLON , {DISPLAY IF WHILE PRINTLN RETURN LCURLYBRACKET IDENTIFIER }]
  [Statement ::= (*) WhileStatement , {DISPLAY IF WHILE PRINTLN RETURN LCURLYBRACKET IDENTIFIER }]
  [BlockStatement ::= (*) LCURLYBRACKET StatementList RCURLYBRACKET , {DISPLAY IF WHILE PRINTLN RETURN LCURLYBRACKET IDENTIFIER }]
  [AssignStatement ::= (*) Identifier BECOMES Expression SEMICOLON , {DISPLAY IF WHILE PRINTLN RETURN LCURLYBRACKET IDENTIFIER }]
  [Statement ::= (*) BlockStatement , {DISPLAY IF WHILE PRINTLN RETURN LCURLYBRACKET IDENTIFIER }]
  [Statement ::= (*) ArrayAssignStatement , {DISPLAY IF WHILE PRINTLN RETURN LCURLYBRACKET IDENTIFIER }]
  [WhileStatement ::= (*) WHILE LPAREN Expression RPAREN Statement , {DISPLAY IF WHILE PRINTLN RETURN LCURLYBRACKET IDENTIFIER }]
  [Identifier ::= (*) IDENTIFIER , {BECOMES LBRACKET }]
  [MethodDecl ::= PUBLIC Type Identifier LPAREN RPAREN LCURLYBRACKET StatementList (*) RETURN Expression SEMICOLON RCURLYBRACKET , {PUBLIC RCURLYBRACKET }]
  [Statement ::= (*) PrintStatement , {DISPLAY IF WHILE PRINTLN RETURN LCURLYBRACKET IDENTIFIER }]
  [IfStatement ::= (*) IF LPAREN Expression RPAREN Statement ELSE Statement , {DISPLAY IF WHILE PRINTLN RETURN LCURLYBRACKET IDENTIFIER }]
  [ArrayAssignStatement ::= (*) Identifier LBRACKET Expression RBRACKET BECOMES Expression SEMICOLON , {DISPLAY IF WHILE PRINTLN RETURN LCURLYBRACKET IDENTIFIER }]
  [Statement ::= (*) IfStatement , {DISPLAY IF WHILE PRINTLN RETURN LCURLYBRACKET IDENTIFIER }]
  [Statement ::= (*) DisplayStatement , {DISPLAY IF WHILE PRINTLN RETURN LCURLYBRACKET IDENTIFIER }]
  [PrintStatement ::= (*) PRINTLN LPAREN Expression RPAREN SEMICOLON , {DISPLAY IF WHILE PRINTLN RETURN LCURLYBRACKET IDENTIFIER }]
}
transition on ArrayAssignStatement to state [31]
transition on AssignStatement to state [30]
transition on RETURN to state [134]
transition on IDENTIFIER to state [4]
transition on PrintStatement to state [29]
transition on LCURLYBRACKET to state [28]
transition on Statement to state [35]
transition on WhileStatement to state [25]
transition on IF to state [26]
transition on IfStatement to state [24]
transition on Identifier to state [23]
transition on BlockStatement to state [22]
transition on DisplayStatement to state [21]
transition on PRINTLN to state [20]
transition on DISPLAY to state [19]
transition on WHILE to state [18]

-------------------
lalr_state [134]: {
  [Expression ::= (*) Expression MULT Expression , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) INTEGER_LITERAL , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) NEW INT LBRACKET Expression RBRACKET , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) Expression PLUS Expression , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) Expression PERIOD Identifier LPAREN ExpressionList RPAREN , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) IDENTIFIER , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) LPAREN Expression RPAREN , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) Expression AND Expression , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) Expression LBRACKET Expression RBRACKET , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) TRUE , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) NEW Identifier LPAREN RPAREN , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) Expression MINUS Expression , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) Expression PERIOD Identifier LPAREN RPAREN , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) THIS , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [MethodDecl ::= PUBLIC Type Identifier LPAREN RPAREN LCURLYBRACKET StatementList RETURN (*) Expression SEMICOLON RCURLYBRACKET , {PUBLIC RCURLYBRACKET }]
  [Expression ::= (*) Expression LT Expression , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) Expression PERIOD LENGTH , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) FALSE , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) NOT Expression , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
}
transition on INTEGER_LITERAL to state [47]
transition on LPAREN to state [46]
transition on NOT to state [45]
transition on IDENTIFIER to state [44]
transition on THIS to state [43]
transition on FALSE to state [42]
transition on Expression to state [135]
transition on TRUE to state [40]
transition on NEW to state [39]

-------------------
lalr_state [135]: {
  [Expression ::= Expression (*) PERIOD Identifier LPAREN ExpressionList RPAREN , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= Expression (*) MULT Expression , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= Expression (*) LT Expression , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= Expression (*) PERIOD LENGTH , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= Expression (*) MINUS Expression , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= Expression (*) AND Expression , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= Expression (*) PERIOD Identifier LPAREN RPAREN , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= Expression (*) LBRACKET Expression RBRACKET , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= Expression (*) PLUS Expression , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [MethodDecl ::= PUBLIC Type Identifier LPAREN RPAREN LCURLYBRACKET StatementList RETURN Expression (*) SEMICOLON RCURLYBRACKET , {PUBLIC RCURLYBRACKET }]
}
transition on LBRACKET to state [56]
transition on PERIOD to state [55]
transition on MINUS to state [54]
transition on PLUS to state [53]
transition on AND to state [52]
transition on MULT to state [51]
transition on SEMICOLON to state [136]
transition on LT to state [49]

-------------------
lalr_state [136]: {
  [MethodDecl ::= PUBLIC Type Identifier LPAREN RPAREN LCURLYBRACKET StatementList RETURN Expression SEMICOLON (*) RCURLYBRACKET , {PUBLIC RCURLYBRACKET }]
}
transition on RCURLYBRACKET to state [137]

-------------------
lalr_state [137]: {
  [MethodDecl ::= PUBLIC Type Identifier LPAREN RPAREN LCURLYBRACKET StatementList RETURN Expression SEMICOLON RCURLYBRACKET (*) , {PUBLIC RCURLYBRACKET }]
}

-------------------
lalr_state [138]: {
  [Expression ::= (*) Expression MULT Expression , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) INTEGER_LITERAL , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) NEW INT LBRACKET Expression RBRACKET , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) Expression PLUS Expression , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) Expression PERIOD Identifier LPAREN ExpressionList RPAREN , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) IDENTIFIER , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) LPAREN Expression RPAREN , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [MethodDecl ::= PUBLIC Type Identifier LPAREN RPAREN LCURLYBRACKET VarDeclList RETURN (*) Expression SEMICOLON RCURLYBRACKET , {PUBLIC RCURLYBRACKET }]
  [Expression ::= (*) Expression AND Expression , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) Expression LBRACKET Expression RBRACKET , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) TRUE , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) NEW Identifier LPAREN RPAREN , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) Expression MINUS Expression , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) Expression PERIOD Identifier LPAREN RPAREN , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) THIS , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) Expression LT Expression , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) Expression PERIOD LENGTH , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) FALSE , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) NOT Expression , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
}
transition on INTEGER_LITERAL to state [47]
transition on LPAREN to state [46]
transition on NOT to state [45]
transition on IDENTIFIER to state [44]
transition on THIS to state [43]
transition on FALSE to state [42]
transition on Expression to state [145]
transition on TRUE to state [40]
transition on NEW to state [39]

-------------------
lalr_state [139]: {
  [VarDeclList ::= VarDeclList VarDecl (*) , {DISPLAY PUBLIC INT BOOLEAN IF WHILE PRINTLN RETURN LCURLYBRACKET RCURLYBRACKET IDENTIFIER }]
}

-------------------
lalr_state [140]: {
  [StatementList ::= StatementList (*) Statement , {DISPLAY IF WHILE PRINTLN RETURN LCURLYBRACKET IDENTIFIER }]
  [Statement ::= (*) AssignStatement , {DISPLAY IF WHILE PRINTLN RETURN LCURLYBRACKET IDENTIFIER }]
  [IfStatement ::= (*) IF LPAREN Expression RPAREN Statement , {DISPLAY IF WHILE PRINTLN RETURN LCURLYBRACKET IDENTIFIER }]
  [DisplayStatement ::= (*) DISPLAY Expression SEMICOLON , {DISPLAY IF WHILE PRINTLN RETURN LCURLYBRACKET IDENTIFIER }]
  [Statement ::= (*) WhileStatement , {DISPLAY IF WHILE PRINTLN RETURN LCURLYBRACKET IDENTIFIER }]
  [BlockStatement ::= (*) LCURLYBRACKET StatementList RCURLYBRACKET , {DISPLAY IF WHILE PRINTLN RETURN LCURLYBRACKET IDENTIFIER }]
  [AssignStatement ::= (*) Identifier BECOMES Expression SEMICOLON , {DISPLAY IF WHILE PRINTLN RETURN LCURLYBRACKET IDENTIFIER }]
  [Statement ::= (*) BlockStatement , {DISPLAY IF WHILE PRINTLN RETURN LCURLYBRACKET IDENTIFIER }]
  [Statement ::= (*) ArrayAssignStatement , {DISPLAY IF WHILE PRINTLN RETURN LCURLYBRACKET IDENTIFIER }]
  [WhileStatement ::= (*) WHILE LPAREN Expression RPAREN Statement , {DISPLAY IF WHILE PRINTLN RETURN LCURLYBRACKET IDENTIFIER }]
  [Identifier ::= (*) IDENTIFIER , {BECOMES LBRACKET }]
  [Statement ::= (*) PrintStatement , {DISPLAY IF WHILE PRINTLN RETURN LCURLYBRACKET IDENTIFIER }]
  [IfStatement ::= (*) IF LPAREN Expression RPAREN Statement ELSE Statement , {DISPLAY IF WHILE PRINTLN RETURN LCURLYBRACKET IDENTIFIER }]
  [ArrayAssignStatement ::= (*) Identifier LBRACKET Expression RBRACKET BECOMES Expression SEMICOLON , {DISPLAY IF WHILE PRINTLN RETURN LCURLYBRACKET IDENTIFIER }]
  [MethodDecl ::= PUBLIC Type Identifier LPAREN RPAREN LCURLYBRACKET VarDeclList StatementList (*) RETURN Expression SEMICOLON RCURLYBRACKET , {PUBLIC RCURLYBRACKET }]
  [Statement ::= (*) IfStatement , {DISPLAY IF WHILE PRINTLN RETURN LCURLYBRACKET IDENTIFIER }]
  [Statement ::= (*) DisplayStatement , {DISPLAY IF WHILE PRINTLN RETURN LCURLYBRACKET IDENTIFIER }]
  [PrintStatement ::= (*) PRINTLN LPAREN Expression RPAREN SEMICOLON , {DISPLAY IF WHILE PRINTLN RETURN LCURLYBRACKET IDENTIFIER }]
}
transition on ArrayAssignStatement to state [31]
transition on AssignStatement to state [30]
transition on RETURN to state [141]
transition on IDENTIFIER to state [4]
transition on PrintStatement to state [29]
transition on LCURLYBRACKET to state [28]
transition on Statement to state [35]
transition on WhileStatement to state [25]
transition on IF to state [26]
transition on IfStatement to state [24]
transition on Identifier to state [23]
transition on BlockStatement to state [22]
transition on DisplayStatement to state [21]
transition on PRINTLN to state [20]
transition on DISPLAY to state [19]
transition on WHILE to state [18]

-------------------
lalr_state [141]: {
  [Expression ::= (*) Expression MULT Expression , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) INTEGER_LITERAL , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) NEW INT LBRACKET Expression RBRACKET , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) Expression PLUS Expression , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) Expression PERIOD Identifier LPAREN ExpressionList RPAREN , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) IDENTIFIER , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) LPAREN Expression RPAREN , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) Expression AND Expression , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) Expression LBRACKET Expression RBRACKET , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) TRUE , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) NEW Identifier LPAREN RPAREN , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) Expression MINUS Expression , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) Expression PERIOD Identifier LPAREN RPAREN , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) THIS , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) Expression LT Expression , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) Expression PERIOD LENGTH , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) FALSE , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) NOT Expression , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [MethodDecl ::= PUBLIC Type Identifier LPAREN RPAREN LCURLYBRACKET VarDeclList StatementList RETURN (*) Expression SEMICOLON RCURLYBRACKET , {PUBLIC RCURLYBRACKET }]
}
transition on INTEGER_LITERAL to state [47]
transition on LPAREN to state [46]
transition on NOT to state [45]
transition on IDENTIFIER to state [44]
transition on THIS to state [43]
transition on FALSE to state [42]
transition on Expression to state [142]
transition on TRUE to state [40]
transition on NEW to state [39]

-------------------
lalr_state [142]: {
  [Expression ::= Expression (*) PERIOD Identifier LPAREN ExpressionList RPAREN , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= Expression (*) MULT Expression , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= Expression (*) LT Expression , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= Expression (*) PERIOD LENGTH , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= Expression (*) MINUS Expression , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= Expression (*) AND Expression , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [MethodDecl ::= PUBLIC Type Identifier LPAREN RPAREN LCURLYBRACKET VarDeclList StatementList RETURN Expression (*) SEMICOLON RCURLYBRACKET , {PUBLIC RCURLYBRACKET }]
  [Expression ::= Expression (*) PERIOD Identifier LPAREN RPAREN , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= Expression (*) LBRACKET Expression RBRACKET , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= Expression (*) PLUS Expression , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
}
transition on LBRACKET to state [56]
transition on PERIOD to state [55]
transition on MINUS to state [54]
transition on PLUS to state [53]
transition on AND to state [52]
transition on MULT to state [51]
transition on SEMICOLON to state [143]
transition on LT to state [49]

-------------------
lalr_state [143]: {
  [MethodDecl ::= PUBLIC Type Identifier LPAREN RPAREN LCURLYBRACKET VarDeclList StatementList RETURN Expression SEMICOLON (*) RCURLYBRACKET , {PUBLIC RCURLYBRACKET }]
}
transition on RCURLYBRACKET to state [144]

-------------------
lalr_state [144]: {
  [MethodDecl ::= PUBLIC Type Identifier LPAREN RPAREN LCURLYBRACKET VarDeclList StatementList RETURN Expression SEMICOLON RCURLYBRACKET (*) , {PUBLIC RCURLYBRACKET }]
}

-------------------
lalr_state [145]: {
  [Expression ::= Expression (*) PERIOD Identifier LPAREN ExpressionList RPAREN , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= Expression (*) MULT Expression , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= Expression (*) LT Expression , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [MethodDecl ::= PUBLIC Type Identifier LPAREN RPAREN LCURLYBRACKET VarDeclList RETURN Expression (*) SEMICOLON RCURLYBRACKET , {PUBLIC RCURLYBRACKET }]
  [Expression ::= Expression (*) PERIOD LENGTH , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= Expression (*) MINUS Expression , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= Expression (*) AND Expression , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= Expression (*) PERIOD Identifier LPAREN RPAREN , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= Expression (*) LBRACKET Expression RBRACKET , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= Expression (*) PLUS Expression , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
}
transition on LBRACKET to state [56]
transition on PERIOD to state [55]
transition on MINUS to state [54]
transition on PLUS to state [53]
transition on AND to state [52]
transition on MULT to state [51]
transition on SEMICOLON to state [146]
transition on LT to state [49]

-------------------
lalr_state [146]: {
  [MethodDecl ::= PUBLIC Type Identifier LPAREN RPAREN LCURLYBRACKET VarDeclList RETURN Expression SEMICOLON (*) RCURLYBRACKET , {PUBLIC RCURLYBRACKET }]
}
transition on RCURLYBRACKET to state [147]

-------------------
lalr_state [147]: {
  [MethodDecl ::= PUBLIC Type Identifier LPAREN RPAREN LCURLYBRACKET VarDeclList RETURN Expression SEMICOLON RCURLYBRACKET (*) , {PUBLIC RCURLYBRACKET }]
}

-------------------
lalr_state [148]: {
  [Expression ::= Expression (*) PERIOD Identifier LPAREN ExpressionList RPAREN , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= Expression (*) MULT Expression , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= Expression (*) LT Expression , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= Expression (*) PERIOD LENGTH , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= Expression (*) MINUS Expression , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= Expression (*) AND Expression , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [MethodDecl ::= PUBLIC Type Identifier LPAREN RPAREN LCURLYBRACKET RETURN Expression (*) SEMICOLON RCURLYBRACKET , {PUBLIC RCURLYBRACKET }]
  [Expression ::= Expression (*) PERIOD Identifier LPAREN RPAREN , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= Expression (*) LBRACKET Expression RBRACKET , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= Expression (*) PLUS Expression , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
}
transition on LBRACKET to state [56]
transition on PERIOD to state [55]
transition on MINUS to state [54]
transition on PLUS to state [53]
transition on AND to state [52]
transition on MULT to state [51]
transition on SEMICOLON to state [149]
transition on LT to state [49]

-------------------
lalr_state [149]: {
  [MethodDecl ::= PUBLIC Type Identifier LPAREN RPAREN LCURLYBRACKET RETURN Expression SEMICOLON (*) RCURLYBRACKET , {PUBLIC RCURLYBRACKET }]
}
transition on RCURLYBRACKET to state [150]

-------------------
lalr_state [150]: {
  [MethodDecl ::= PUBLIC Type Identifier LPAREN RPAREN LCURLYBRACKET RETURN Expression SEMICOLON RCURLYBRACKET (*) , {PUBLIC RCURLYBRACKET }]
}

-------------------
lalr_state [151]: {
  [Formal ::= Type Identifier (*) , {RPAREN COMMA }]
}

-------------------
lalr_state [152]: {
  [Type ::= (*) INT LBRACKET RBRACKET , {IDENTIFIER }]
  [Type ::= (*) INT , {IDENTIFIER }]
  [Formal ::= (*) Type Identifier , {RPAREN COMMA }]
  [FormalList ::= FormalList COMMA (*) Formal , {RPAREN COMMA }]
  [Type ::= (*) BOOLEAN , {IDENTIFIER }]
  [Type ::= (*) IDENTIFIER , {IDENTIFIER }]
}
transition on INT to state [111]
transition on BOOLEAN to state [116]
transition on IDENTIFIER to state [118]
transition on Type to state [126]
transition on Formal to state [174]

-------------------
lalr_state [153]: {
  [MethodDecl ::= PUBLIC Type Identifier LPAREN FormalList RPAREN (*) LCURLYBRACKET VarDeclList RETURN Expression SEMICOLON RCURLYBRACKET , {PUBLIC RCURLYBRACKET }]
  [MethodDecl ::= PUBLIC Type Identifier LPAREN FormalList RPAREN (*) LCURLYBRACKET RETURN Expression SEMICOLON RCURLYBRACKET , {PUBLIC RCURLYBRACKET }]
  [MethodDecl ::= PUBLIC Type Identifier LPAREN FormalList RPAREN (*) LCURLYBRACKET VarDeclList StatementList RETURN Expression SEMICOLON RCURLYBRACKET , {PUBLIC RCURLYBRACKET }]
  [MethodDecl ::= PUBLIC Type Identifier LPAREN FormalList RPAREN (*) LCURLYBRACKET StatementList RETURN Expression SEMICOLON RCURLYBRACKET , {PUBLIC RCURLYBRACKET }]
}
transition on LCURLYBRACKET to state [154]

-------------------
lalr_state [154]: {
  [VarDeclList ::= (*) VarDeclList VarDecl , {DISPLAY INT BOOLEAN IF WHILE PRINTLN RETURN LCURLYBRACKET IDENTIFIER }]
  [Type ::= (*) INT LBRACKET RBRACKET , {IDENTIFIER }]
  [MethodDecl ::= PUBLIC Type Identifier LPAREN FormalList RPAREN LCURLYBRACKET (*) StatementList RETURN Expression SEMICOLON RCURLYBRACKET , {PUBLIC RCURLYBRACKET }]
  [StatementList ::= (*) StatementList Statement , {DISPLAY IF WHILE PRINTLN RETURN LCURLYBRACKET IDENTIFIER }]
  [Statement ::= (*) AssignStatement , {DISPLAY IF WHILE PRINTLN RETURN LCURLYBRACKET IDENTIFIER }]
  [IfStatement ::= (*) IF LPAREN Expression RPAREN Statement , {DISPLAY IF WHILE PRINTLN RETURN LCURLYBRACKET IDENTIFIER }]
  [DisplayStatement ::= (*) DISPLAY Expression SEMICOLON , {DISPLAY IF WHILE PRINTLN RETURN LCURLYBRACKET IDENTIFIER }]
  [MethodDecl ::= PUBLIC Type Identifier LPAREN FormalList RPAREN LCURLYBRACKET (*) VarDeclList StatementList RETURN Expression SEMICOLON RCURLYBRACKET , {PUBLIC RCURLYBRACKET }]
  [Type ::= (*) IDENTIFIER , {IDENTIFIER }]
  [Statement ::= (*) WhileStatement , {DISPLAY IF WHILE PRINTLN RETURN LCURLYBRACKET IDENTIFIER }]
  [BlockStatement ::= (*) LCURLYBRACKET StatementList RCURLYBRACKET , {DISPLAY IF WHILE PRINTLN RETURN LCURLYBRACKET IDENTIFIER }]
  [AssignStatement ::= (*) Identifier BECOMES Expression SEMICOLON , {DISPLAY IF WHILE PRINTLN RETURN LCURLYBRACKET IDENTIFIER }]
  [VarDecl ::= (*) Type Identifier SEMICOLON , {DISPLAY INT BOOLEAN IF WHILE PRINTLN RETURN LCURLYBRACKET IDENTIFIER }]
  [Type ::= (*) BOOLEAN , {IDENTIFIER }]
  [MethodDecl ::= PUBLIC Type Identifier LPAREN FormalList RPAREN LCURLYBRACKET (*) RETURN Expression SEMICOLON RCURLYBRACKET , {PUBLIC RCURLYBRACKET }]
  [Statement ::= (*) BlockStatement , {DISPLAY IF WHILE PRINTLN RETURN LCURLYBRACKET IDENTIFIER }]
  [Statement ::= (*) ArrayAssignStatement , {DISPLAY IF WHILE PRINTLN RETURN LCURLYBRACKET IDENTIFIER }]
  [WhileStatement ::= (*) WHILE LPAREN Expression RPAREN Statement , {DISPLAY IF WHILE PRINTLN RETURN LCURLYBRACKET IDENTIFIER }]
  [Identifier ::= (*) IDENTIFIER , {BECOMES LBRACKET }]
  [VarDeclList ::= (*) VarDecl , {DISPLAY INT BOOLEAN IF WHILE PRINTLN RETURN LCURLYBRACKET IDENTIFIER }]
  [MethodDecl ::= PUBLIC Type Identifier LPAREN FormalList RPAREN LCURLYBRACKET (*) VarDeclList RETURN Expression SEMICOLON RCURLYBRACKET , {PUBLIC RCURLYBRACKET }]
  [StatementList ::= (*) Statement , {DISPLAY IF WHILE PRINTLN RETURN LCURLYBRACKET IDENTIFIER }]
  [Statement ::= (*) PrintStatement , {DISPLAY IF WHILE PRINTLN RETURN LCURLYBRACKET IDENTIFIER }]
  [IfStatement ::= (*) IF LPAREN Expression RPAREN Statement ELSE Statement , {DISPLAY IF WHILE PRINTLN RETURN LCURLYBRACKET IDENTIFIER }]
  [ArrayAssignStatement ::= (*) Identifier LBRACKET Expression RBRACKET BECOMES Expression SEMICOLON , {DISPLAY IF WHILE PRINTLN RETURN LCURLYBRACKET IDENTIFIER }]
  [Type ::= (*) INT , {IDENTIFIER }]
  [Statement ::= (*) IfStatement , {DISPLAY IF WHILE PRINTLN RETURN LCURLYBRACKET IDENTIFIER }]
  [Statement ::= (*) DisplayStatement , {DISPLAY IF WHILE PRINTLN RETURN LCURLYBRACKET IDENTIFIER }]
  [PrintStatement ::= (*) PRINTLN LPAREN Expression RPAREN SEMICOLON , {DISPLAY IF WHILE PRINTLN RETURN LCURLYBRACKET IDENTIFIER }]
}
transition on BlockStatement to state [22]
transition on ArrayAssignStatement to state [31]
transition on StatementList to state [157]
transition on DisplayStatement to state [21]
transition on DISPLAY to state [19]
transition on Statement to state [33]
transition on LCURLYBRACKET to state [28]
transition on PRINTLN to state [20]
transition on VarDecl to state [117]
transition on Identifier to state [23]
transition on AssignStatement to state [30]
transition on VarDeclList to state [156]
transition on BOOLEAN to state [116]
transition on WhileStatement to state [25]
transition on Type to state [110]
transition on IF to state [26]
transition on IfStatement to state [24]
transition on IDENTIFIER to state [131]
transition on RETURN to state [155]
transition on PrintStatement to state [29]
transition on WHILE to state [18]
transition on INT to state [111]

-------------------
lalr_state [155]: {
  [Expression ::= (*) Expression MULT Expression , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) INTEGER_LITERAL , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) NEW INT LBRACKET Expression RBRACKET , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) Expression PLUS Expression , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) Expression PERIOD Identifier LPAREN ExpressionList RPAREN , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) IDENTIFIER , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) LPAREN Expression RPAREN , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) Expression AND Expression , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) Expression LBRACKET Expression RBRACKET , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) TRUE , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) NEW Identifier LPAREN RPAREN , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [MethodDecl ::= PUBLIC Type Identifier LPAREN FormalList RPAREN LCURLYBRACKET RETURN (*) Expression SEMICOLON RCURLYBRACKET , {PUBLIC RCURLYBRACKET }]
  [Expression ::= (*) Expression MINUS Expression , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) Expression PERIOD Identifier LPAREN RPAREN , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) THIS , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) Expression LT Expression , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) Expression PERIOD LENGTH , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) FALSE , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) NOT Expression , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
}
transition on INTEGER_LITERAL to state [47]
transition on LPAREN to state [46]
transition on NOT to state [45]
transition on IDENTIFIER to state [44]
transition on THIS to state [43]
transition on FALSE to state [42]
transition on Expression to state [171]
transition on TRUE to state [40]
transition on NEW to state [39]

-------------------
lalr_state [156]: {
  [VarDeclList ::= VarDeclList (*) VarDecl , {DISPLAY INT BOOLEAN IF WHILE PRINTLN RETURN LCURLYBRACKET IDENTIFIER }]
  [Type ::= (*) INT LBRACKET RBRACKET , {IDENTIFIER }]
  [StatementList ::= (*) StatementList Statement , {DISPLAY IF WHILE PRINTLN RETURN LCURLYBRACKET IDENTIFIER }]
  [Statement ::= (*) AssignStatement , {DISPLAY IF WHILE PRINTLN RETURN LCURLYBRACKET IDENTIFIER }]
  [IfStatement ::= (*) IF LPAREN Expression RPAREN Statement , {DISPLAY IF WHILE PRINTLN RETURN LCURLYBRACKET IDENTIFIER }]
  [DisplayStatement ::= (*) DISPLAY Expression SEMICOLON , {DISPLAY IF WHILE PRINTLN RETURN LCURLYBRACKET IDENTIFIER }]
  [MethodDecl ::= PUBLIC Type Identifier LPAREN FormalList RPAREN LCURLYBRACKET VarDeclList (*) StatementList RETURN Expression SEMICOLON RCURLYBRACKET , {PUBLIC RCURLYBRACKET }]
  [Type ::= (*) IDENTIFIER , {IDENTIFIER }]
  [Statement ::= (*) WhileStatement , {DISPLAY IF WHILE PRINTLN RETURN LCURLYBRACKET IDENTIFIER }]
  [BlockStatement ::= (*) LCURLYBRACKET StatementList RCURLYBRACKET , {DISPLAY IF WHILE PRINTLN RETURN LCURLYBRACKET IDENTIFIER }]
  [AssignStatement ::= (*) Identifier BECOMES Expression SEMICOLON , {DISPLAY IF WHILE PRINTLN RETURN LCURLYBRACKET IDENTIFIER }]
  [VarDecl ::= (*) Type Identifier SEMICOLON , {DISPLAY INT BOOLEAN IF WHILE PRINTLN RETURN LCURLYBRACKET IDENTIFIER }]
  [Type ::= (*) BOOLEAN , {IDENTIFIER }]
  [Statement ::= (*) BlockStatement , {DISPLAY IF WHILE PRINTLN RETURN LCURLYBRACKET IDENTIFIER }]
  [Statement ::= (*) ArrayAssignStatement , {DISPLAY IF WHILE PRINTLN RETURN LCURLYBRACKET IDENTIFIER }]
  [WhileStatement ::= (*) WHILE LPAREN Expression RPAREN Statement , {DISPLAY IF WHILE PRINTLN RETURN LCURLYBRACKET IDENTIFIER }]
  [MethodDecl ::= PUBLIC Type Identifier LPAREN FormalList RPAREN LCURLYBRACKET VarDeclList (*) RETURN Expression SEMICOLON RCURLYBRACKET , {PUBLIC RCURLYBRACKET }]
  [Identifier ::= (*) IDENTIFIER , {BECOMES LBRACKET }]
  [StatementList ::= (*) Statement , {DISPLAY IF WHILE PRINTLN RETURN LCURLYBRACKET IDENTIFIER }]
  [Statement ::= (*) PrintStatement , {DISPLAY IF WHILE PRINTLN RETURN LCURLYBRACKET IDENTIFIER }]
  [IfStatement ::= (*) IF LPAREN Expression RPAREN Statement ELSE Statement , {DISPLAY IF WHILE PRINTLN RETURN LCURLYBRACKET IDENTIFIER }]
  [ArrayAssignStatement ::= (*) Identifier LBRACKET Expression RBRACKET BECOMES Expression SEMICOLON , {DISPLAY IF WHILE PRINTLN RETURN LCURLYBRACKET IDENTIFIER }]
  [Type ::= (*) INT , {IDENTIFIER }]
  [Statement ::= (*) IfStatement , {DISPLAY IF WHILE PRINTLN RETURN LCURLYBRACKET IDENTIFIER }]
  [Statement ::= (*) DisplayStatement , {DISPLAY IF WHILE PRINTLN RETURN LCURLYBRACKET IDENTIFIER }]
  [PrintStatement ::= (*) PRINTLN LPAREN Expression RPAREN SEMICOLON , {DISPLAY IF WHILE PRINTLN RETURN LCURLYBRACKET IDENTIFIER }]
}
transition on BlockStatement to state [22]
transition on ArrayAssignStatement to state [31]
transition on StatementList to state [163]
transition on DisplayStatement to state [21]
transition on DISPLAY to state [19]
transition on Statement to state [33]
transition on LCURLYBRACKET to state [28]
transition on PRINTLN to state [20]
transition on Identifier to state [23]
transition on VarDecl to state [139]
transition on AssignStatement to state [30]
transition on BOOLEAN to state [116]
transition on WhileStatement to state [25]
transition on Type to state [110]
transition on IF to state [26]
transition on IfStatement to state [24]
transition on IDENTIFIER to state [131]
transition on RETURN to state [162]
transition on PrintStatement to state [29]
transition on WHILE to state [18]
transition on INT to state [111]

-------------------
lalr_state [157]: {
  [MethodDecl ::= PUBLIC Type Identifier LPAREN FormalList RPAREN LCURLYBRACKET StatementList (*) RETURN Expression SEMICOLON RCURLYBRACKET , {PUBLIC RCURLYBRACKET }]
  [StatementList ::= StatementList (*) Statement , {DISPLAY IF WHILE PRINTLN RETURN LCURLYBRACKET IDENTIFIER }]
  [Statement ::= (*) AssignStatement , {DISPLAY IF WHILE PRINTLN RETURN LCURLYBRACKET IDENTIFIER }]
  [IfStatement ::= (*) IF LPAREN Expression RPAREN Statement , {DISPLAY IF WHILE PRINTLN RETURN LCURLYBRACKET IDENTIFIER }]
  [DisplayStatement ::= (*) DISPLAY Expression SEMICOLON , {DISPLAY IF WHILE PRINTLN RETURN LCURLYBRACKET IDENTIFIER }]
  [Statement ::= (*) WhileStatement , {DISPLAY IF WHILE PRINTLN RETURN LCURLYBRACKET IDENTIFIER }]
  [BlockStatement ::= (*) LCURLYBRACKET StatementList RCURLYBRACKET , {DISPLAY IF WHILE PRINTLN RETURN LCURLYBRACKET IDENTIFIER }]
  [AssignStatement ::= (*) Identifier BECOMES Expression SEMICOLON , {DISPLAY IF WHILE PRINTLN RETURN LCURLYBRACKET IDENTIFIER }]
  [Statement ::= (*) BlockStatement , {DISPLAY IF WHILE PRINTLN RETURN LCURLYBRACKET IDENTIFIER }]
  [Statement ::= (*) ArrayAssignStatement , {DISPLAY IF WHILE PRINTLN RETURN LCURLYBRACKET IDENTIFIER }]
  [WhileStatement ::= (*) WHILE LPAREN Expression RPAREN Statement , {DISPLAY IF WHILE PRINTLN RETURN LCURLYBRACKET IDENTIFIER }]
  [Identifier ::= (*) IDENTIFIER , {BECOMES LBRACKET }]
  [Statement ::= (*) PrintStatement , {DISPLAY IF WHILE PRINTLN RETURN LCURLYBRACKET IDENTIFIER }]
  [IfStatement ::= (*) IF LPAREN Expression RPAREN Statement ELSE Statement , {DISPLAY IF WHILE PRINTLN RETURN LCURLYBRACKET IDENTIFIER }]
  [ArrayAssignStatement ::= (*) Identifier LBRACKET Expression RBRACKET BECOMES Expression SEMICOLON , {DISPLAY IF WHILE PRINTLN RETURN LCURLYBRACKET IDENTIFIER }]
  [Statement ::= (*) IfStatement , {DISPLAY IF WHILE PRINTLN RETURN LCURLYBRACKET IDENTIFIER }]
  [Statement ::= (*) DisplayStatement , {DISPLAY IF WHILE PRINTLN RETURN LCURLYBRACKET IDENTIFIER }]
  [PrintStatement ::= (*) PRINTLN LPAREN Expression RPAREN SEMICOLON , {DISPLAY IF WHILE PRINTLN RETURN LCURLYBRACKET IDENTIFIER }]
}
transition on ArrayAssignStatement to state [31]
transition on AssignStatement to state [30]
transition on RETURN to state [158]
transition on IDENTIFIER to state [4]
transition on PrintStatement to state [29]
transition on LCURLYBRACKET to state [28]
transition on Statement to state [35]
transition on WhileStatement to state [25]
transition on IF to state [26]
transition on IfStatement to state [24]
transition on Identifier to state [23]
transition on BlockStatement to state [22]
transition on DisplayStatement to state [21]
transition on PRINTLN to state [20]
transition on DISPLAY to state [19]
transition on WHILE to state [18]

-------------------
lalr_state [158]: {
  [Expression ::= (*) Expression MULT Expression , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) INTEGER_LITERAL , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) NEW INT LBRACKET Expression RBRACKET , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [MethodDecl ::= PUBLIC Type Identifier LPAREN FormalList RPAREN LCURLYBRACKET StatementList RETURN (*) Expression SEMICOLON RCURLYBRACKET , {PUBLIC RCURLYBRACKET }]
  [Expression ::= (*) Expression PLUS Expression , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) Expression PERIOD Identifier LPAREN ExpressionList RPAREN , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) IDENTIFIER , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) LPAREN Expression RPAREN , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) Expression AND Expression , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) Expression LBRACKET Expression RBRACKET , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) TRUE , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) NEW Identifier LPAREN RPAREN , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) Expression MINUS Expression , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) Expression PERIOD Identifier LPAREN RPAREN , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) THIS , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) Expression LT Expression , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) Expression PERIOD LENGTH , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) FALSE , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) NOT Expression , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
}
transition on INTEGER_LITERAL to state [47]
transition on LPAREN to state [46]
transition on NOT to state [45]
transition on IDENTIFIER to state [44]
transition on THIS to state [43]
transition on FALSE to state [42]
transition on Expression to state [159]
transition on TRUE to state [40]
transition on NEW to state [39]

-------------------
lalr_state [159]: {
  [Expression ::= Expression (*) PERIOD Identifier LPAREN ExpressionList RPAREN , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= Expression (*) MULT Expression , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= Expression (*) LT Expression , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [MethodDecl ::= PUBLIC Type Identifier LPAREN FormalList RPAREN LCURLYBRACKET StatementList RETURN Expression (*) SEMICOLON RCURLYBRACKET , {PUBLIC RCURLYBRACKET }]
  [Expression ::= Expression (*) PERIOD LENGTH , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= Expression (*) MINUS Expression , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= Expression (*) AND Expression , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= Expression (*) PERIOD Identifier LPAREN RPAREN , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= Expression (*) LBRACKET Expression RBRACKET , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= Expression (*) PLUS Expression , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
}
transition on LBRACKET to state [56]
transition on PERIOD to state [55]
transition on MINUS to state [54]
transition on PLUS to state [53]
transition on AND to state [52]
transition on MULT to state [51]
transition on SEMICOLON to state [160]
transition on LT to state [49]

-------------------
lalr_state [160]: {
  [MethodDecl ::= PUBLIC Type Identifier LPAREN FormalList RPAREN LCURLYBRACKET StatementList RETURN Expression SEMICOLON (*) RCURLYBRACKET , {PUBLIC RCURLYBRACKET }]
}
transition on RCURLYBRACKET to state [161]

-------------------
lalr_state [161]: {
  [MethodDecl ::= PUBLIC Type Identifier LPAREN FormalList RPAREN LCURLYBRACKET StatementList RETURN Expression SEMICOLON RCURLYBRACKET (*) , {PUBLIC RCURLYBRACKET }]
}

-------------------
lalr_state [162]: {
  [Expression ::= (*) Expression MULT Expression , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) INTEGER_LITERAL , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) NEW INT LBRACKET Expression RBRACKET , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) Expression PLUS Expression , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) Expression PERIOD Identifier LPAREN ExpressionList RPAREN , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) IDENTIFIER , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) LPAREN Expression RPAREN , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) Expression AND Expression , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) Expression LBRACKET Expression RBRACKET , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) TRUE , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) NEW Identifier LPAREN RPAREN , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) Expression MINUS Expression , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) Expression PERIOD Identifier LPAREN RPAREN , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [MethodDecl ::= PUBLIC Type Identifier LPAREN FormalList RPAREN LCURLYBRACKET VarDeclList RETURN (*) Expression SEMICOLON RCURLYBRACKET , {PUBLIC RCURLYBRACKET }]
  [Expression ::= (*) THIS , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) Expression LT Expression , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) Expression PERIOD LENGTH , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) FALSE , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) NOT Expression , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
}
transition on INTEGER_LITERAL to state [47]
transition on LPAREN to state [46]
transition on NOT to state [45]
transition on IDENTIFIER to state [44]
transition on THIS to state [43]
transition on FALSE to state [42]
transition on Expression to state [168]
transition on TRUE to state [40]
transition on NEW to state [39]

-------------------
lalr_state [163]: {
  [StatementList ::= StatementList (*) Statement , {DISPLAY IF WHILE PRINTLN RETURN LCURLYBRACKET IDENTIFIER }]
  [Statement ::= (*) AssignStatement , {DISPLAY IF WHILE PRINTLN RETURN LCURLYBRACKET IDENTIFIER }]
  [IfStatement ::= (*) IF LPAREN Expression RPAREN Statement , {DISPLAY IF WHILE PRINTLN RETURN LCURLYBRACKET IDENTIFIER }]
  [DisplayStatement ::= (*) DISPLAY Expression SEMICOLON , {DISPLAY IF WHILE PRINTLN RETURN LCURLYBRACKET IDENTIFIER }]
  [MethodDecl ::= PUBLIC Type Identifier LPAREN FormalList RPAREN LCURLYBRACKET VarDeclList StatementList (*) RETURN Expression SEMICOLON RCURLYBRACKET , {PUBLIC RCURLYBRACKET }]
  [Statement ::= (*) WhileStatement , {DISPLAY IF WHILE PRINTLN RETURN LCURLYBRACKET IDENTIFIER }]
  [BlockStatement ::= (*) LCURLYBRACKET StatementList RCURLYBRACKET , {DISPLAY IF WHILE PRINTLN RETURN LCURLYBRACKET IDENTIFIER }]
  [AssignStatement ::= (*) Identifier BECOMES Expression SEMICOLON , {DISPLAY IF WHILE PRINTLN RETURN LCURLYBRACKET IDENTIFIER }]
  [Statement ::= (*) BlockStatement , {DISPLAY IF WHILE PRINTLN RETURN LCURLYBRACKET IDENTIFIER }]
  [Statement ::= (*) ArrayAssignStatement , {DISPLAY IF WHILE PRINTLN RETURN LCURLYBRACKET IDENTIFIER }]
  [WhileStatement ::= (*) WHILE LPAREN Expression RPAREN Statement , {DISPLAY IF WHILE PRINTLN RETURN LCURLYBRACKET IDENTIFIER }]
  [Identifier ::= (*) IDENTIFIER , {BECOMES LBRACKET }]
  [Statement ::= (*) PrintStatement , {DISPLAY IF WHILE PRINTLN RETURN LCURLYBRACKET IDENTIFIER }]
  [IfStatement ::= (*) IF LPAREN Expression RPAREN Statement ELSE Statement , {DISPLAY IF WHILE PRINTLN RETURN LCURLYBRACKET IDENTIFIER }]
  [ArrayAssignStatement ::= (*) Identifier LBRACKET Expression RBRACKET BECOMES Expression SEMICOLON , {DISPLAY IF WHILE PRINTLN RETURN LCURLYBRACKET IDENTIFIER }]
  [Statement ::= (*) IfStatement , {DISPLAY IF WHILE PRINTLN RETURN LCURLYBRACKET IDENTIFIER }]
  [Statement ::= (*) DisplayStatement , {DISPLAY IF WHILE PRINTLN RETURN LCURLYBRACKET IDENTIFIER }]
  [PrintStatement ::= (*) PRINTLN LPAREN Expression RPAREN SEMICOLON , {DISPLAY IF WHILE PRINTLN RETURN LCURLYBRACKET IDENTIFIER }]
}
transition on ArrayAssignStatement to state [31]
transition on AssignStatement to state [30]
transition on RETURN to state [164]
transition on IDENTIFIER to state [4]
transition on PrintStatement to state [29]
transition on LCURLYBRACKET to state [28]
transition on Statement to state [35]
transition on WhileStatement to state [25]
transition on IF to state [26]
transition on IfStatement to state [24]
transition on Identifier to state [23]
transition on BlockStatement to state [22]
transition on DisplayStatement to state [21]
transition on PRINTLN to state [20]
transition on DISPLAY to state [19]
transition on WHILE to state [18]

-------------------
lalr_state [164]: {
  [Expression ::= (*) Expression MULT Expression , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) INTEGER_LITERAL , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) NEW INT LBRACKET Expression RBRACKET , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) Expression PLUS Expression , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [MethodDecl ::= PUBLIC Type Identifier LPAREN FormalList RPAREN LCURLYBRACKET VarDeclList StatementList RETURN (*) Expression SEMICOLON RCURLYBRACKET , {PUBLIC RCURLYBRACKET }]
  [Expression ::= (*) Expression PERIOD Identifier LPAREN ExpressionList RPAREN , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) IDENTIFIER , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) LPAREN Expression RPAREN , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) Expression AND Expression , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) Expression LBRACKET Expression RBRACKET , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) TRUE , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) NEW Identifier LPAREN RPAREN , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) Expression MINUS Expression , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) Expression PERIOD Identifier LPAREN RPAREN , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) THIS , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) Expression LT Expression , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) Expression PERIOD LENGTH , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) FALSE , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= (*) NOT Expression , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
}
transition on INTEGER_LITERAL to state [47]
transition on LPAREN to state [46]
transition on NOT to state [45]
transition on IDENTIFIER to state [44]
transition on THIS to state [43]
transition on FALSE to state [42]
transition on Expression to state [165]
transition on TRUE to state [40]
transition on NEW to state [39]

-------------------
lalr_state [165]: {
  [Expression ::= Expression (*) PERIOD Identifier LPAREN ExpressionList RPAREN , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= Expression (*) MULT Expression , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= Expression (*) LT Expression , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= Expression (*) PERIOD LENGTH , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= Expression (*) MINUS Expression , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= Expression (*) AND Expression , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= Expression (*) PERIOD Identifier LPAREN RPAREN , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= Expression (*) LBRACKET Expression RBRACKET , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= Expression (*) PLUS Expression , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [MethodDecl ::= PUBLIC Type Identifier LPAREN FormalList RPAREN LCURLYBRACKET VarDeclList StatementList RETURN Expression (*) SEMICOLON RCURLYBRACKET , {PUBLIC RCURLYBRACKET }]
}
transition on LBRACKET to state [56]
transition on PERIOD to state [55]
transition on MINUS to state [54]
transition on PLUS to state [53]
transition on AND to state [52]
transition on MULT to state [51]
transition on SEMICOLON to state [166]
transition on LT to state [49]

-------------------
lalr_state [166]: {
  [MethodDecl ::= PUBLIC Type Identifier LPAREN FormalList RPAREN LCURLYBRACKET VarDeclList StatementList RETURN Expression SEMICOLON (*) RCURLYBRACKET , {PUBLIC RCURLYBRACKET }]
}
transition on RCURLYBRACKET to state [167]

-------------------
lalr_state [167]: {
  [MethodDecl ::= PUBLIC Type Identifier LPAREN FormalList RPAREN LCURLYBRACKET VarDeclList StatementList RETURN Expression SEMICOLON RCURLYBRACKET (*) , {PUBLIC RCURLYBRACKET }]
}

-------------------
lalr_state [168]: {
  [Expression ::= Expression (*) PERIOD Identifier LPAREN ExpressionList RPAREN , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= Expression (*) MULT Expression , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= Expression (*) LT Expression , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= Expression (*) PERIOD LENGTH , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= Expression (*) MINUS Expression , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= Expression (*) AND Expression , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [MethodDecl ::= PUBLIC Type Identifier LPAREN FormalList RPAREN LCURLYBRACKET VarDeclList RETURN Expression (*) SEMICOLON RCURLYBRACKET , {PUBLIC RCURLYBRACKET }]
  [Expression ::= Expression (*) PERIOD Identifier LPAREN RPAREN , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= Expression (*) LBRACKET Expression RBRACKET , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= Expression (*) PLUS Expression , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
}
transition on LBRACKET to state [56]
transition on PERIOD to state [55]
transition on MINUS to state [54]
transition on PLUS to state [53]
transition on AND to state [52]
transition on MULT to state [51]
transition on SEMICOLON to state [169]
transition on LT to state [49]

-------------------
lalr_state [169]: {
  [MethodDecl ::= PUBLIC Type Identifier LPAREN FormalList RPAREN LCURLYBRACKET VarDeclList RETURN Expression SEMICOLON (*) RCURLYBRACKET , {PUBLIC RCURLYBRACKET }]
}
transition on RCURLYBRACKET to state [170]

-------------------
lalr_state [170]: {
  [MethodDecl ::= PUBLIC Type Identifier LPAREN FormalList RPAREN LCURLYBRACKET VarDeclList RETURN Expression SEMICOLON RCURLYBRACKET (*) , {PUBLIC RCURLYBRACKET }]
}

-------------------
lalr_state [171]: {
  [Expression ::= Expression (*) PERIOD Identifier LPAREN ExpressionList RPAREN , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= Expression (*) MULT Expression , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= Expression (*) LT Expression , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= Expression (*) PERIOD LENGTH , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= Expression (*) MINUS Expression , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= Expression (*) AND Expression , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= Expression (*) PERIOD Identifier LPAREN RPAREN , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= Expression (*) LBRACKET Expression RBRACKET , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [Expression ::= Expression (*) PLUS Expression , {PLUS MINUS AND LT MULT LBRACKET SEMICOLON PERIOD }]
  [MethodDecl ::= PUBLIC Type Identifier LPAREN FormalList RPAREN LCURLYBRACKET RETURN Expression (*) SEMICOLON RCURLYBRACKET , {PUBLIC RCURLYBRACKET }]
}
transition on LBRACKET to state [56]
transition on PERIOD to state [55]
transition on MINUS to state [54]
transition on PLUS to state [53]
transition on AND to state [52]
transition on MULT to state [51]
transition on SEMICOLON to state [172]
transition on LT to state [49]

-------------------
lalr_state [172]: {
  [MethodDecl ::= PUBLIC Type Identifier LPAREN FormalList RPAREN LCURLYBRACKET RETURN Expression SEMICOLON (*) RCURLYBRACKET , {PUBLIC RCURLYBRACKET }]
}
transition on RCURLYBRACKET to state [173]

-------------------
lalr_state [173]: {
  [MethodDecl ::= PUBLIC Type Identifier LPAREN FormalList RPAREN LCURLYBRACKET RETURN Expression SEMICOLON RCURLYBRACKET (*) , {PUBLIC RCURLYBRACKET }]
}

-------------------
lalr_state [174]: {
  [FormalList ::= FormalList COMMA Formal (*) , {RPAREN COMMA }]
}

-------------------
lalr_state [175]: {
  [ClassDecl ::= CLASS Identifier LCURLYBRACKET VarDeclList RCURLYBRACKET (*) , {EOF CLASS }]
}

-------------------
lalr_state [176]: {
  [MethodDecl ::= (*) PUBLIC Type Identifier LPAREN RPAREN LCURLYBRACKET VarDeclList StatementList RETURN Expression SEMICOLON RCURLYBRACKET , {PUBLIC RCURLYBRACKET }]
  [MethodDecl ::= (*) PUBLIC Type Identifier LPAREN FormalList RPAREN LCURLYBRACKET VarDeclList RETURN Expression SEMICOLON RCURLYBRACKET , {PUBLIC RCURLYBRACKET }]
  [ClassDecl ::= CLASS Identifier LCURLYBRACKET VarDeclList MethodDeclList (*) RCURLYBRACKET , {EOF CLASS }]
  [MethodDecl ::= (*) PUBLIC Type Identifier LPAREN RPAREN LCURLYBRACKET StatementList RETURN Expression SEMICOLON RCURLYBRACKET , {PUBLIC RCURLYBRACKET }]
  [MethodDecl ::= (*) PUBLIC Type Identifier LPAREN FormalList RPAREN LCURLYBRACKET RETURN Expression SEMICOLON RCURLYBRACKET , {PUBLIC RCURLYBRACKET }]
  [MethodDecl ::= (*) PUBLIC Type Identifier LPAREN FormalList RPAREN LCURLYBRACKET VarDeclList StatementList RETURN Expression SEMICOLON RCURLYBRACKET , {PUBLIC RCURLYBRACKET }]
  [MethodDecl ::= (*) PUBLIC Type Identifier LPAREN RPAREN LCURLYBRACKET VarDeclList RETURN Expression SEMICOLON RCURLYBRACKET , {PUBLIC RCURLYBRACKET }]
  [MethodDeclList ::= MethodDeclList (*) MethodDecl , {PUBLIC RCURLYBRACKET }]
  [MethodDecl ::= (*) PUBLIC Type Identifier LPAREN FormalList RPAREN LCURLYBRACKET StatementList RETURN Expression SEMICOLON RCURLYBRACKET , {PUBLIC RCURLYBRACKET }]
  [MethodDecl ::= (*) PUBLIC Type Identifier LPAREN RPAREN LCURLYBRACKET RETURN Expression SEMICOLON RCURLYBRACKET , {PUBLIC RCURLYBRACKET }]
}
transition on PUBLIC to state [113]
transition on MethodDecl to state [121]
transition on RCURLYBRACKET to state [177]

-------------------
lalr_state [177]: {
  [ClassDecl ::= CLASS Identifier LCURLYBRACKET VarDeclList MethodDeclList RCURLYBRACKET (*) , {EOF CLASS }]
}

-------------------
lalr_state [178]: {
  [Type ::= INT LBRACKET (*) RBRACKET , {IDENTIFIER }]
}
transition on RBRACKET to state [179]

-------------------
lalr_state [179]: {
  [Type ::= INT LBRACKET RBRACKET (*) , {IDENTIFIER }]
}

-------------------
lalr_state [180]: {
  [VarDecl ::= Type Identifier (*) SEMICOLON , {DISPLAY PUBLIC INT BOOLEAN IF WHILE PRINTLN RETURN LCURLYBRACKET RCURLYBRACKET IDENTIFIER }]
}
transition on SEMICOLON to state [181]

-------------------
lalr_state [181]: {
  [VarDecl ::= Type Identifier SEMICOLON (*) , {DISPLAY PUBLIC INT BOOLEAN IF WHILE PRINTLN RETURN LCURLYBRACKET RCURLYBRACKET IDENTIFIER }]
}

-------------------
lalr_state [182]: {
  [ClassDecl ::= CLASS Identifier EXTENDS Identifier (*) LCURLYBRACKET VarDeclList RCURLYBRACKET , {EOF CLASS }]
  [ClassDecl ::= CLASS Identifier EXTENDS Identifier (*) LCURLYBRACKET RCURLYBRACKET , {EOF CLASS }]
  [ClassDecl ::= CLASS Identifier EXTENDS Identifier (*) LCURLYBRACKET VarDeclList MethodDeclList RCURLYBRACKET , {EOF CLASS }]
  [ClassDecl ::= CLASS Identifier EXTENDS Identifier (*) LCURLYBRACKET MethodDeclList RCURLYBRACKET , {EOF CLASS }]
}
transition on LCURLYBRACKET to state [183]

-------------------
lalr_state [183]: {
  [MethodDeclList ::= (*) MethodDeclList MethodDecl , {PUBLIC RCURLYBRACKET }]
  [MethodDecl ::= (*) PUBLIC Type Identifier LPAREN RPAREN LCURLYBRACKET VarDeclList StatementList RETURN Expression SEMICOLON RCURLYBRACKET , {PUBLIC RCURLYBRACKET }]
  [VarDeclList ::= (*) VarDeclList VarDecl , {PUBLIC INT BOOLEAN RCURLYBRACKET IDENTIFIER }]
  [ClassDecl ::= CLASS Identifier EXTENDS Identifier LCURLYBRACKET (*) MethodDeclList RCURLYBRACKET , {EOF CLASS }]
  [Type ::= (*) INT LBRACKET RBRACKET , {IDENTIFIER }]
  [MethodDecl ::= (*) PUBLIC Type Identifier LPAREN FormalList RPAREN LCURLYBRACKET StatementList RETURN Expression SEMICOLON RCURLYBRACKET , {PUBLIC RCURLYBRACKET }]
  [MethodDecl ::= (*) PUBLIC Type Identifier LPAREN RPAREN LCURLYBRACKET RETURN Expression SEMICOLON RCURLYBRACKET , {PUBLIC RCURLYBRACKET }]
  [ClassDecl ::= CLASS Identifier EXTENDS Identifier LCURLYBRACKET (*) VarDeclList MethodDeclList RCURLYBRACKET , {EOF CLASS }]
  [Type ::= (*) IDENTIFIER , {IDENTIFIER }]
  [MethodDecl ::= (*) PUBLIC Type Identifier LPAREN FormalList RPAREN LCURLYBRACKET VarDeclList StatementList RETURN Expression SEMICOLON RCURLYBRACKET , {PUBLIC RCURLYBRACKET }]
  [MethodDecl ::= (*) PUBLIC Type Identifier LPAREN RPAREN LCURLYBRACKET VarDeclList RETURN Expression SEMICOLON RCURLYBRACKET , {PUBLIC RCURLYBRACKET }]
  [VarDecl ::= (*) Type Identifier SEMICOLON , {PUBLIC INT BOOLEAN RCURLYBRACKET IDENTIFIER }]
  [ClassDecl ::= CLASS Identifier EXTENDS Identifier LCURLYBRACKET (*) RCURLYBRACKET , {EOF CLASS }]
  [Type ::= (*) BOOLEAN , {IDENTIFIER }]
  [MethodDeclList ::= (*) MethodDecl , {PUBLIC RCURLYBRACKET }]
  [MethodDecl ::= (*) PUBLIC Type Identifier LPAREN FormalList RPAREN LCURLYBRACKET RETURN Expression SEMICOLON RCURLYBRACKET , {PUBLIC RCURLYBRACKET }]
  [VarDeclList ::= (*) VarDecl , {PUBLIC INT BOOLEAN RCURLYBRACKET IDENTIFIER }]
  [ClassDecl ::= CLASS Identifier EXTENDS Identifier LCURLYBRACKET (*) VarDeclList RCURLYBRACKET , {EOF CLASS }]
  [MethodDecl ::= (*) PUBLIC Type Identifier LPAREN FormalList RPAREN LCURLYBRACKET VarDeclList RETURN Expression SEMICOLON RCURLYBRACKET , {PUBLIC RCURLYBRACKET }]
  [MethodDecl ::= (*) PUBLIC Type Identifier LPAREN RPAREN LCURLYBRACKET StatementList RETURN Expression SEMICOLON RCURLYBRACKET , {PUBLIC RCURLYBRACKET }]
  [Type ::= (*) INT , {IDENTIFIER }]
}
transition on MethodDeclList to state [186]
transition on IDENTIFIER to state [118]
transition on VarDecl to state [117]
transition on BOOLEAN to state [116]
transition on MethodDecl to state [115]
transition on RCURLYBRACKET to state [185]
transition on PUBLIC to state [113]
transition on VarDeclList to state [184]
transition on INT to state [111]
transition on Type to state [110]

-------------------
lalr_state [184]: {
  [MethodDeclList ::= (*) MethodDeclList MethodDecl , {PUBLIC RCURLYBRACKET }]
  [VarDeclList ::= VarDeclList (*) VarDecl , {PUBLIC INT BOOLEAN RCURLYBRACKET IDENTIFIER }]
  [MethodDecl ::= (*) PUBLIC Type Identifier LPAREN RPAREN LCURLYBRACKET VarDeclList StatementList RETURN Expression SEMICOLON RCURLYBRACKET , {PUBLIC RCURLYBRACKET }]
  [Type ::= (*) INT LBRACKET RBRACKET , {IDENTIFIER }]
  [MethodDecl ::= (*) PUBLIC Type Identifier LPAREN FormalList RPAREN LCURLYBRACKET StatementList RETURN Expression SEMICOLON RCURLYBRACKET , {PUBLIC RCURLYBRACKET }]
  [MethodDecl ::= (*) PUBLIC Type Identifier LPAREN RPAREN LCURLYBRACKET RETURN Expression SEMICOLON RCURLYBRACKET , {PUBLIC RCURLYBRACKET }]
  [ClassDecl ::= CLASS Identifier EXTENDS Identifier LCURLYBRACKET VarDeclList (*) MethodDeclList RCURLYBRACKET , {EOF CLASS }]
  [Type ::= (*) IDENTIFIER , {IDENTIFIER }]
  [MethodDecl ::= (*) PUBLIC Type Identifier LPAREN FormalList RPAREN LCURLYBRACKET VarDeclList StatementList RETURN Expression SEMICOLON RCURLYBRACKET , {PUBLIC RCURLYBRACKET }]
  [MethodDecl ::= (*) PUBLIC Type Identifier LPAREN RPAREN LCURLYBRACKET VarDeclList RETURN Expression SEMICOLON RCURLYBRACKET , {PUBLIC RCURLYBRACKET }]
  [VarDecl ::= (*) Type Identifier SEMICOLON , {PUBLIC INT BOOLEAN RCURLYBRACKET IDENTIFIER }]
  [Type ::= (*) BOOLEAN , {IDENTIFIER }]
  [MethodDeclList ::= (*) MethodDecl , {PUBLIC RCURLYBRACKET }]
  [MethodDecl ::= (*) PUBLIC Type Identifier LPAREN FormalList RPAREN LCURLYBRACKET RETURN Expression SEMICOLON RCURLYBRACKET , {PUBLIC RCURLYBRACKET }]
  [ClassDecl ::= CLASS Identifier EXTENDS Identifier LCURLYBRACKET VarDeclList (*) RCURLYBRACKET , {EOF CLASS }]
  [MethodDecl ::= (*) PUBLIC Type Identifier LPAREN FormalList RPAREN LCURLYBRACKET VarDeclList RETURN Expression SEMICOLON RCURLYBRACKET , {PUBLIC RCURLYBRACKET }]
  [MethodDecl ::= (*) PUBLIC Type Identifier LPAREN RPAREN LCURLYBRACKET StatementList RETURN Expression SEMICOLON RCURLYBRACKET , {PUBLIC RCURLYBRACKET }]
  [Type ::= (*) INT , {IDENTIFIER }]
}
transition on MethodDeclList to state [189]
transition on IDENTIFIER to state [118]
transition on VarDecl to state [139]
transition on MethodDecl to state [115]
transition on BOOLEAN to state [116]
transition on RCURLYBRACKET to state [188]
transition on PUBLIC to state [113]
transition on INT to state [111]
transition on Type to state [110]

-------------------
lalr_state [185]: {
  [ClassDecl ::= CLASS Identifier EXTENDS Identifier LCURLYBRACKET RCURLYBRACKET (*) , {EOF CLASS }]
}

-------------------
lalr_state [186]: {
  [MethodDecl ::= (*) PUBLIC Type Identifier LPAREN RPAREN LCURLYBRACKET VarDeclList StatementList RETURN Expression SEMICOLON RCURLYBRACKET , {PUBLIC RCURLYBRACKET }]
  [MethodDecl ::= (*) PUBLIC Type Identifier LPAREN FormalList RPAREN LCURLYBRACKET VarDeclList RETURN Expression SEMICOLON RCURLYBRACKET , {PUBLIC RCURLYBRACKET }]
  [MethodDecl ::= (*) PUBLIC Type Identifier LPAREN RPAREN LCURLYBRACKET StatementList RETURN Expression SEMICOLON RCURLYBRACKET , {PUBLIC RCURLYBRACKET }]
  [MethodDecl ::= (*) PUBLIC Type Identifier LPAREN FormalList RPAREN LCURLYBRACKET RETURN Expression SEMICOLON RCURLYBRACKET , {PUBLIC RCURLYBRACKET }]
  [MethodDecl ::= (*) PUBLIC Type Identifier LPAREN FormalList RPAREN LCURLYBRACKET VarDeclList StatementList RETURN Expression SEMICOLON RCURLYBRACKET , {PUBLIC RCURLYBRACKET }]
  [MethodDecl ::= (*) PUBLIC Type Identifier LPAREN RPAREN LCURLYBRACKET VarDeclList RETURN Expression SEMICOLON RCURLYBRACKET , {PUBLIC RCURLYBRACKET }]
  [MethodDeclList ::= MethodDeclList (*) MethodDecl , {PUBLIC RCURLYBRACKET }]
  [MethodDecl ::= (*) PUBLIC Type Identifier LPAREN FormalList RPAREN LCURLYBRACKET StatementList RETURN Expression SEMICOLON RCURLYBRACKET , {PUBLIC RCURLYBRACKET }]
  [ClassDecl ::= CLASS Identifier EXTENDS Identifier LCURLYBRACKET MethodDeclList (*) RCURLYBRACKET , {EOF CLASS }]
  [MethodDecl ::= (*) PUBLIC Type Identifier LPAREN RPAREN LCURLYBRACKET RETURN Expression SEMICOLON RCURLYBRACKET , {PUBLIC RCURLYBRACKET }]
}
transition on PUBLIC to state [113]
transition on MethodDecl to state [121]
transition on RCURLYBRACKET to state [187]

-------------------
lalr_state [187]: {
  [ClassDecl ::= CLASS Identifier EXTENDS Identifier LCURLYBRACKET MethodDeclList RCURLYBRACKET (*) , {EOF CLASS }]
}

-------------------
lalr_state [188]: {
  [ClassDecl ::= CLASS Identifier EXTENDS Identifier LCURLYBRACKET VarDeclList RCURLYBRACKET (*) , {EOF CLASS }]
}

-------------------
lalr_state [189]: {
  [MethodDecl ::= (*) PUBLIC Type Identifier LPAREN RPAREN LCURLYBRACKET VarDeclList StatementList RETURN Expression SEMICOLON RCURLYBRACKET , {PUBLIC RCURLYBRACKET }]
  [MethodDecl ::= (*) PUBLIC Type Identifier LPAREN FormalList RPAREN LCURLYBRACKET VarDeclList RETURN Expression SEMICOLON RCURLYBRACKET , {PUBLIC RCURLYBRACKET }]
  [MethodDecl ::= (*) PUBLIC Type Identifier LPAREN RPAREN LCURLYBRACKET StatementList RETURN Expression SEMICOLON RCURLYBRACKET , {PUBLIC RCURLYBRACKET }]
  [MethodDecl ::= (*) PUBLIC Type Identifier LPAREN FormalList RPAREN LCURLYBRACKET RETURN Expression SEMICOLON RCURLYBRACKET , {PUBLIC RCURLYBRACKET }]
  [MethodDecl ::= (*) PUBLIC Type Identifier LPAREN FormalList RPAREN LCURLYBRACKET VarDeclList StatementList RETURN Expression SEMICOLON RCURLYBRACKET , {PUBLIC RCURLYBRACKET }]
  [ClassDecl ::= CLASS Identifier EXTENDS Identifier LCURLYBRACKET VarDeclList MethodDeclList (*) RCURLYBRACKET , {EOF CLASS }]
  [MethodDecl ::= (*) PUBLIC Type Identifier LPAREN RPAREN LCURLYBRACKET VarDeclList RETURN Expression SEMICOLON RCURLYBRACKET , {PUBLIC RCURLYBRACKET }]
  [MethodDeclList ::= MethodDeclList (*) MethodDecl , {PUBLIC RCURLYBRACKET }]
  [MethodDecl ::= (*) PUBLIC Type Identifier LPAREN FormalList RPAREN LCURLYBRACKET StatementList RETURN Expression SEMICOLON RCURLYBRACKET , {PUBLIC RCURLYBRACKET }]
  [MethodDecl ::= (*) PUBLIC Type Identifier LPAREN RPAREN LCURLYBRACKET RETURN Expression SEMICOLON RCURLYBRACKET , {PUBLIC RCURLYBRACKET }]
}
transition on PUBLIC to state [113]
transition on MethodDecl to state [121]
transition on RCURLYBRACKET to state [190]

-------------------
lalr_state [190]: {
  [ClassDecl ::= CLASS Identifier EXTENDS Identifier LCURLYBRACKET VarDeclList MethodDeclList RCURLYBRACKET (*) , {EOF CLASS }]
}

-------------------
lalr_state [191]: {
  [ClassDeclList ::= ClassDeclList ClassDecl (*) , {EOF CLASS }]
}

-------------------
lalr_state [192]: {
  [$START ::= Program EOF (*) , {EOF }]
}

-------------------
-------- ACTION_TABLE --------
From state #0
 [term 3:SHIFT(to state 3)]
From state #1
 [term 0:SHIFT(to state 192)]
From state #2
 [term 0:REDUCE(with prod 2)] [term 3:SHIFT(to state 106)]
From state #3
 [term 38:SHIFT(to state 4)]
From state #4
 [term 8:REDUCE(with prod 71)] [term 24:REDUCE(with prod 71)]
 [term 29:REDUCE(with prod 71)] [term 30:REDUCE(with prod 71)]
 [term 31:REDUCE(with prod 71)] [term 33:REDUCE(with prod 71)]
 [term 35:REDUCE(with prod 71)] [term 37:REDUCE(with prod 71)]
From state #5
 [term 33:SHIFT(to state 6)]
From state #6
 [term 4:SHIFT(to state 7)]
From state #7
 [term 5:SHIFT(to state 8)]
From state #8
 [term 6:SHIFT(to state 9)]
From state #9
 [term 7:SHIFT(to state 10)]
From state #10
 [term 29:SHIFT(to state 11)]
From state #11
 [term 21:SHIFT(to state 12)]
From state #12
 [term 31:SHIFT(to state 13)]
From state #13
 [term 32:SHIFT(to state 14)]
From state #14
 [term 38:SHIFT(to state 4)]
From state #15
 [term 30:SHIFT(to state 16)]
From state #16
 [term 33:SHIFT(to state 17)]
From state #17
 [term 2:SHIFT(to state 19)] [term 11:SHIFT(to state 26)]
 [term 13:SHIFT(to state 18)] [term 14:SHIFT(to state 20)]
 [term 33:SHIFT(to state 28)] [term 38:SHIFT(to state 4)]
From state #18
 [term 29:SHIFT(to state 100)]
From state #19
 [term 16:SHIFT(to state 40)] [term 17:SHIFT(to state 42)]
 [term 18:SHIFT(to state 43)] [term 19:SHIFT(to state 39)]
 [term 28:SHIFT(to state 45)] [term 29:SHIFT(to state 46)]
 [term 38:SHIFT(to state 44)] [term 39:SHIFT(to state 47)]
From state #20
 [term 29:SHIFT(to state 94)]
From state #21
 [term 2:REDUCE(with prod 42)] [term 11:REDUCE(with prod 42)]
 [term 12:REDUCE(with prod 42)] [term 13:REDUCE(with prod 42)]
 [term 14:REDUCE(with prod 42)] [term 20:REDUCE(with prod 42)]
 [term 33:REDUCE(with prod 42)] [term 34:REDUCE(with prod 42)]
 [term 38:REDUCE(with prod 42)]
From state #22
 [term 2:REDUCE(with prod 36)] [term 11:REDUCE(with prod 36)]
 [term 12:REDUCE(with prod 36)] [term 13:REDUCE(with prod 36)]
 [term 14:REDUCE(with prod 36)] [term 20:REDUCE(with prod 36)]
 [term 33:REDUCE(with prod 36)] [term 34:REDUCE(with prod 36)]
 [term 38:REDUCE(with prod 36)]
From state #23
 [term 24:SHIFT(to state 85)] [term 31:SHIFT(to state 86)]
From state #24
 [term 2:REDUCE(with prod 37)] [term 11:REDUCE(with prod 37)]
 [term 12:REDUCE(with prod 37)] [term 13:REDUCE(with prod 37)]
 [term 14:REDUCE(with prod 37)] [term 20:REDUCE(with prod 37)]
 [term 33:REDUCE(with prod 37)] [term 34:REDUCE(with prod 37)]
 [term 38:REDUCE(with prod 37)]
From state #25
 [term 2:REDUCE(with prod 38)] [term 11:REDUCE(with prod 38)]
 [term 12:REDUCE(with prod 38)] [term 13:REDUCE(with prod 38)]
 [term 14:REDUCE(with prod 38)] [term 20:REDUCE(with prod 38)]
 [term 33:REDUCE(with prod 38)] [term 34:REDUCE(with prod 38)]
 [term 38:REDUCE(with prod 38)]
From state #26
 [term 29:SHIFT(to state 38)]
From state #27
 [term 34:SHIFT(to state 36)]
From state #28
 [term 2:SHIFT(to state 19)] [term 11:SHIFT(to state 26)]
 [term 13:SHIFT(to state 18)] [term 14:SHIFT(to state 20)]
 [term 33:SHIFT(to state 28)] [term 38:SHIFT(to state 4)]
From state #29
 [term 2:REDUCE(with prod 39)] [term 11:REDUCE(with prod 39)]
 [term 12:REDUCE(with prod 39)] [term 13:REDUCE(with prod 39)]
 [term 14:REDUCE(with prod 39)] [term 20:REDUCE(with prod 39)]
 [term 33:REDUCE(with prod 39)] [term 34:REDUCE(with prod 39)]
 [term 38:REDUCE(with prod 39)]
From state #30
 [term 2:REDUCE(with prod 40)] [term 11:REDUCE(with prod 40)]
 [term 12:REDUCE(with prod 40)] [term 13:REDUCE(with prod 40)]
 [term 14:REDUCE(with prod 40)] [term 20:REDUCE(with prod 40)]
 [term 33:REDUCE(with prod 40)] [term 34:REDUCE(with prod 40)]
 [term 38:REDUCE(with prod 40)]
From state #31
 [term 2:REDUCE(with prod 41)] [term 11:REDUCE(with prod 41)]
 [term 12:REDUCE(with prod 41)] [term 13:REDUCE(with prod 41)]
 [term 14:REDUCE(with prod 41)] [term 20:REDUCE(with prod 41)]
 [term 33:REDUCE(with prod 41)] [term 34:REDUCE(with prod 41)]
 [term 38:REDUCE(with prod 41)]
From state #32
 [term 2:SHIFT(to state 19)] [term 11:SHIFT(to state 26)]
 [term 13:SHIFT(to state 18)] [term 14:SHIFT(to state 20)]
 [term 33:SHIFT(to state 28)] [term 34:SHIFT(to state 34)]
 [term 38:SHIFT(to state 4)]
From state #33
 [term 2:REDUCE(with prod 34)] [term 11:REDUCE(with prod 34)]
 [term 13:REDUCE(with prod 34)] [term 14:REDUCE(with prod 34)]
 [term 20:REDUCE(with prod 34)] [term 33:REDUCE(with prod 34)]
 [term 34:REDUCE(with prod 34)] [term 38:REDUCE(with prod 34)]
From state #34
 [term 2:REDUCE(with prod 43)] [term 11:REDUCE(with prod 43)]
 [term 12:REDUCE(with prod 43)] [term 13:REDUCE(with prod 43)]
 [term 14:REDUCE(with prod 43)] [term 20:REDUCE(with prod 43)]
 [term 33:REDUCE(with prod 43)] [term 34:REDUCE(with prod 43)]
 [term 38:REDUCE(with prod 43)]
From state #35
 [term 2:REDUCE(with prod 35)] [term 11:REDUCE(with prod 35)]
 [term 13:REDUCE(with prod 35)] [term 14:REDUCE(with prod 35)]
 [term 20:REDUCE(with prod 35)] [term 33:REDUCE(with prod 35)]
 [term 34:REDUCE(with prod 35)] [term 38:REDUCE(with prod 35)]
From state #36
 [term 34:SHIFT(to state 37)]
From state #37
 [term 0:REDUCE(with prod 3)] [term 3:REDUCE(with prod 3)]
From state #38
 [term 16:SHIFT(to state 40)] [term 17:SHIFT(to state 42)]
 [term 18:SHIFT(to state 43)] [term 19:SHIFT(to state 39)]
 [term 28:SHIFT(to state 45)] [term 29:SHIFT(to state 46)]
 [term 38:SHIFT(to state 44)] [term 39:SHIFT(to state 47)]
From state #39
 [term 9:SHIFT(to state 78)] [term 38:SHIFT(to state 4)]
From state #40
 [term 22:REDUCE(with prod 63)] [term 23:REDUCE(with prod 63)]
 [term 25:REDUCE(with prod 63)] [term 26:REDUCE(with prod 63)]
 [term 27:REDUCE(with prod 63)] [term 30:REDUCE(with prod 63)]
 [term 31:REDUCE(with prod 63)] [term 32:REDUCE(with prod 63)]
 [term 35:REDUCE(with prod 63)] [term 36:REDUCE(with prod 63)]
 [term 37:REDUCE(with prod 63)]
From state #41
 [term 22:SHIFT(to state 53)] [term 23:SHIFT(to state 54)]
 [term 25:SHIFT(to state 52)] [term 26:SHIFT(to state 49)]
 [term 27:SHIFT(to state 51)] [term 30:SHIFT(to state 74)]
 [term 31:SHIFT(to state 56)] [term 36:SHIFT(to state 55)]
From state #42
 [term 22:REDUCE(with prod 64)] [term 23:REDUCE(with prod 64)]
 [term 25:REDUCE(with prod 64)] [term 26:REDUCE(with prod 64)]
 [term 27:REDUCE(with prod 64)] [term 30:REDUCE(with prod 64)]
 [term 31:REDUCE(with prod 64)] [term 32:REDUCE(with prod 64)]
 [term 35:REDUCE(with prod 64)] [term 36:REDUCE(with prod 64)]
 [term 37:REDUCE(with prod 64)]
From state #43
 [term 22:REDUCE(with prod 66)] [term 23:REDUCE(with prod 66)]
 [term 25:REDUCE(with prod 66)] [term 26:REDUCE(with prod 66)]
 [term 27:REDUCE(with prod 66)] [term 30:REDUCE(with prod 66)]
 [term 31:REDUCE(with prod 66)] [term 32:REDUCE(with prod 66)]
 [term 35:REDUCE(with prod 66)] [term 36:REDUCE(with prod 66)]
 [term 37:REDUCE(with prod 66)]
From state #44
 [term 22:REDUCE(with prod 65)] [term 23:REDUCE(with prod 65)]
 [term 25:REDUCE(with prod 65)] [term 26:REDUCE(with prod 65)]
 [term 27:REDUCE(with prod 65)] [term 30:REDUCE(with prod 65)]
 [term 31:REDUCE(with prod 65)] [term 32:REDUCE(with prod 65)]
 [term 35:REDUCE(with prod 65)] [term 36:REDUCE(with prod 65)]
 [term 37:REDUCE(with prod 65)]
From state #45
 [term 16:SHIFT(to state 40)] [term 17:SHIFT(to state 42)]
 [term 18:SHIFT(to state 43)] [term 19:SHIFT(to state 39)]
 [term 28:SHIFT(to state 45)] [term 29:SHIFT(to state 46)]
 [term 38:SHIFT(to state 44)] [term 39:SHIFT(to state 47)]
From state #46
 [term 16:SHIFT(to state 40)] [term 17:SHIFT(to state 42)]
 [term 18:SHIFT(to state 43)] [term 19:SHIFT(to state 39)]
 [term 28:SHIFT(to state 45)] [term 29:SHIFT(to state 46)]
 [term 38:SHIFT(to state 44)] [term 39:SHIFT(to state 47)]
From state #47
 [term 22:REDUCE(with prod 62)] [term 23:REDUCE(with prod 62)]
 [term 25:REDUCE(with prod 62)] [term 26:REDUCE(with prod 62)]
 [term 27:REDUCE(with prod 62)] [term 30:REDUCE(with prod 62)]
 [term 31:REDUCE(with prod 62)] [term 32:REDUCE(with prod 62)]
 [term 35:REDUCE(with prod 62)] [term 36:REDUCE(with prod 62)]
 [term 37:REDUCE(with prod 62)]
From state #48
 [term 22:SHIFT(to state 53)] [term 23:SHIFT(to state 54)]
 [term 25:SHIFT(to state 52)] [term 26:SHIFT(to state 49)]
 [term 27:SHIFT(to state 51)] [term 30:SHIFT(to state 50)]
 [term 31:SHIFT(to state 56)] [term 36:SHIFT(to state 55)]
From state #49
 [term 16:SHIFT(to state 40)] [term 17:SHIFT(to state 42)]
 [term 18:SHIFT(to state 43)] [term 19:SHIFT(to state 39)]
 [term 28:SHIFT(to state 45)] [term 29:SHIFT(to state 46)]
 [term 38:SHIFT(to state 44)] [term 39:SHIFT(to state 47)]
From state #50
 [term 22:REDUCE(with prod 70)] [term 23:REDUCE(with prod 70)]
 [term 25:REDUCE(with prod 70)] [term 26:REDUCE(with prod 70)]
 [term 27:REDUCE(with prod 70)] [term 30:REDUCE(with prod 70)]
 [term 31:REDUCE(with prod 70)] [term 32:REDUCE(with prod 70)]
 [term 35:REDUCE(with prod 70)] [term 36:REDUCE(with prod 70)]
 [term 37:REDUCE(with prod 70)]
From state #51
 [term 16:SHIFT(to state 40)] [term 17:SHIFT(to state 42)]
 [term 18:SHIFT(to state 43)] [term 19:SHIFT(to state 39)]
 [term 28:SHIFT(to state 45)] [term 29:SHIFT(to state 46)]
 [term 38:SHIFT(to state 44)] [term 39:SHIFT(to state 47)]
From state #52
 [term 16:SHIFT(to state 40)] [term 17:SHIFT(to state 42)]
 [term 18:SHIFT(to state 43)] [term 19:SHIFT(to state 39)]
 [term 28:SHIFT(to state 45)] [term 29:SHIFT(to state 46)]
 [term 38:SHIFT(to state 44)] [term 39:SHIFT(to state 47)]
From state #53
 [term 16:SHIFT(to state 40)] [term 17:SHIFT(to state 42)]
 [term 18:SHIFT(to state 43)] [term 19:SHIFT(to state 39)]
 [term 28:SHIFT(to state 45)] [term 29:SHIFT(to state 46)]
 [term 38:SHIFT(to state 44)] [term 39:SHIFT(to state 47)]
From state #54
 [term 16:SHIFT(to state 40)] [term 17:SHIFT(to state 42)]
 [term 18:SHIFT(to state 43)] [term 19:SHIFT(to state 39)]
 [term 28:SHIFT(to state 45)] [term 29:SHIFT(to state 46)]
 [term 38:SHIFT(to state 44)] [term 39:SHIFT(to state 47)]
From state #55
 [term 15:SHIFT(to state 59)] [term 38:SHIFT(to state 4)]
From state #56
 [term 16:SHIFT(to state 40)] [term 17:SHIFT(to state 42)]
 [term 18:SHIFT(to state 43)] [term 19:SHIFT(to state 39)]
 [term 28:SHIFT(to state 45)] [term 29:SHIFT(to state 46)]
 [term 38:SHIFT(to state 44)] [term 39:SHIFT(to state 47)]
From state #57
 [term 22:SHIFT(to state 53)] [term 23:SHIFT(to state 54)]
 [term 25:SHIFT(to state 52)] [term 26:SHIFT(to state 49)]
 [term 27:SHIFT(to state 51)] [term 31:SHIFT(to state 56)]
 [term 32:SHIFT(to state 58)] [term 36:SHIFT(to state 55)]
From state #58
 [term 22:REDUCE(with prod 58)] [term 23:REDUCE(with prod 58)]
 [term 25:REDUCE(with prod 58)] [term 26:REDUCE(with prod 58)]
 [term 27:REDUCE(with prod 58)] [term 30:REDUCE(with prod 58)]
 [term 31:REDUCE(with prod 58)] [term 32:REDUCE(with prod 58)]
 [term 35:REDUCE(with prod 58)] [term 36:REDUCE(with prod 58)]
 [term 37:REDUCE(with prod 58)]
From state #59
 [term 22:REDUCE(with prod 59)] [term 23:REDUCE(with prod 59)]
 [term 25:REDUCE(with prod 59)] [term 26:REDUCE(with prod 59)]
 [term 27:REDUCE(with prod 59)] [term 30:REDUCE(with prod 59)]
 [term 31:REDUCE(with prod 59)] [term 32:REDUCE(with prod 59)]
 [term 35:REDUCE(with prod 59)] [term 36:REDUCE(with prod 59)]
 [term 37:REDUCE(with prod 59)]
From state #60
 [term 29:SHIFT(to state 61)]
From state #61
 [term 16:SHIFT(to state 40)] [term 17:SHIFT(to state 42)]
 [term 18:SHIFT(to state 43)] [term 19:SHIFT(to state 39)]
 [term 28:SHIFT(to state 45)] [term 29:SHIFT(to state 46)]
 [term 30:SHIFT(to state 64)] [term 38:SHIFT(to state 44)]
 [term 39:SHIFT(to state 47)]
From state #62
 [term 30:SHIFT(to state 66)] [term 37:SHIFT(to state 65)]
From state #63
 [term 22:SHIFT(to state 53)] [term 23:SHIFT(to state 54)]
 [term 25:SHIFT(to state 52)] [term 26:SHIFT(to state 49)]
 [term 27:SHIFT(to state 51)] [term 30:REDUCE(with prod 51)]
 [term 31:SHIFT(to state 56)] [term 36:SHIFT(to state 55)]
 [term 37:REDUCE(with prod 51)]
From state #64
 [term 22:REDUCE(with prod 61)] [term 23:REDUCE(with prod 61)]
 [term 25:REDUCE(with prod 61)] [term 26:REDUCE(with prod 61)]
 [term 27:REDUCE(with prod 61)] [term 30:REDUCE(with prod 61)]
 [term 31:REDUCE(with prod 61)] [term 32:REDUCE(with prod 61)]
 [term 35:REDUCE(with prod 61)] [term 36:REDUCE(with prod 61)]
 [term 37:REDUCE(with prod 61)]
From state #65
 [term 16:SHIFT(to state 40)] [term 17:SHIFT(to state 42)]
 [term 18:SHIFT(to state 43)] [term 19:SHIFT(to state 39)]
 [term 28:SHIFT(to state 45)] [term 29:SHIFT(to state 46)]
 [term 38:SHIFT(to state 44)] [term 39:SHIFT(to state 47)]
From state #66
 [term 22:REDUCE(with prod 60)] [term 23:REDUCE(with prod 60)]
 [term 25:REDUCE(with prod 60)] [term 26:REDUCE(with prod 60)]
 [term 27:REDUCE(with prod 60)] [term 30:REDUCE(with prod 60)]
 [term 31:REDUCE(with prod 60)] [term 32:REDUCE(with prod 60)]
 [term 35:REDUCE(with prod 60)] [term 36:REDUCE(with prod 60)]
 [term 37:REDUCE(with prod 60)]
From state #67
 [term 22:SHIFT(to state 53)] [term 23:SHIFT(to state 54)]
 [term 25:SHIFT(to state 52)] [term 26:SHIFT(to state 49)]
 [term 27:SHIFT(to state 51)] [term 30:REDUCE(with prod 52)]
 [term 31:SHIFT(to state 56)] [term 36:SHIFT(to state 55)]
 [term 37:REDUCE(with prod 52)]
From state #68
 [term 22:REDUCE(with prod 56)] [term 23:REDUCE(with prod 56)]
 [term 25:REDUCE(with prod 56)] [term 26:SHIFT(to state 49)]
 [term 27:SHIFT(to state 51)] [term 30:REDUCE(with prod 56)]
 [term 31:REDUCE(with prod 56)] [term 32:REDUCE(with prod 56)]
 [term 35:REDUCE(with prod 56)] [term 36:SHIFT(to state 55)]
 [term 37:REDUCE(with prod 56)]
From state #69
 [term 22:REDUCE(with prod 55)] [term 23:REDUCE(with prod 55)]
 [term 25:REDUCE(with prod 55)] [term 26:SHIFT(to state 49)]
 [term 27:SHIFT(to state 51)] [term 30:REDUCE(with prod 55)]
 [term 31:REDUCE(with prod 55)] [term 32:REDUCE(with prod 55)]
 [term 35:REDUCE(with prod 55)] [term 36:SHIFT(to state 55)]
 [term 37:REDUCE(with prod 55)]
From state #70
 [term 22:SHIFT(to state 53)] [term 23:SHIFT(to state 54)]
 [term 25:REDUCE(with prod 53)] [term 26:SHIFT(to state 49)]
 [term 27:SHIFT(to state 51)] [term 30:REDUCE(with prod 53)]
 [term 31:REDUCE(with prod 53)] [term 32:REDUCE(with prod 53)]
 [term 35:REDUCE(with prod 53)] [term 36:SHIFT(to state 55)]
 [term 37:REDUCE(with prod 53)]
From state #71
 [term 22:REDUCE(with prod 57)] [term 23:REDUCE(with prod 57)]
 [term 25:REDUCE(with prod 57)] [term 26:SHIFT(to state 49)]
 [term 27:REDUCE(with prod 57)] [term 30:REDUCE(with prod 57)]
 [term 31:REDUCE(with prod 57)] [term 32:REDUCE(with prod 57)]
 [term 35:REDUCE(with prod 57)] [term 36:SHIFT(to state 55)]
 [term 37:REDUCE(with prod 57)]
From state #72
 [term 22:REDUCE(with prod 54)] [term 23:REDUCE(with prod 54)]
 [term 25:REDUCE(with prod 54)] [term 26:NONASSOC]
 [term 27:REDUCE(with prod 54)] [term 30:REDUCE(with prod 54)]
 [term 31:REDUCE(with prod 54)] [term 32:REDUCE(with prod 54)]
 [term 35:REDUCE(with prod 54)] [term 36:REDUCE(with prod 54)]
 [term 37:REDUCE(with prod 54)]
From state #73
 [term 22:REDUCE(with prod 69)] [term 23:REDUCE(with prod 69)]
 [term 25:REDUCE(with prod 69)] [term 26:SHIFT(to state 49)]
 [term 27:REDUCE(with prod 69)] [term 30:REDUCE(with prod 69)]
 [term 31:REDUCE(with prod 69)] [term 32:REDUCE(with prod 69)]
 [term 35:REDUCE(with prod 69)] [term 36:SHIFT(to state 55)]
 [term 37:REDUCE(with prod 69)]
From state #74
 [term 2:SHIFT(to state 19)] [term 11:SHIFT(to state 26)]
 [term 13:SHIFT(to state 18)] [term 14:SHIFT(to state 20)]
 [term 33:SHIFT(to state 28)] [term 38:SHIFT(to state 4)]
From state #75
 [term 2:REDUCE(with prod 45)] [term 11:REDUCE(with prod 45)]
 [term 12:SHIFT(to state 76)] [term 13:REDUCE(with prod 45)]
 [term 14:REDUCE(with prod 45)] [term 20:REDUCE(with prod 45)]
 [term 33:REDUCE(with prod 45)] [term 34:REDUCE(with prod 45)]
 [term 38:REDUCE(with prod 45)]
From state #76
 [term 2:SHIFT(to state 19)] [term 11:SHIFT(to state 26)]
 [term 13:SHIFT(to state 18)] [term 14:SHIFT(to state 20)]
 [term 33:SHIFT(to state 28)] [term 38:SHIFT(to state 4)]
From state #77
 [term 2:REDUCE(with prod 44)] [term 11:REDUCE(with prod 44)]
 [term 12:REDUCE(with prod 44)] [term 13:REDUCE(with prod 44)]
 [term 14:REDUCE(with prod 44)] [term 20:REDUCE(with prod 44)]
 [term 33:REDUCE(with prod 44)] [term 34:REDUCE(with prod 44)]
 [term 38:REDUCE(with prod 44)]
From state #78
 [term 31:SHIFT(to state 82)]
From state #79
 [term 29:SHIFT(to state 80)]
From state #80
 [term 30:SHIFT(to state 81)]
From state #81
 [term 22:REDUCE(with prod 68)] [term 23:REDUCE(with prod 68)]
 [term 25:REDUCE(with prod 68)] [term 26:REDUCE(with prod 68)]
 [term 27:REDUCE(with prod 68)] [term 30:REDUCE(with prod 68)]
 [term 31:REDUCE(with prod 68)] [term 32:REDUCE(with prod 68)]
 [term 35:REDUCE(with prod 68)] [term 36:REDUCE(with prod 68)]
 [term 37:REDUCE(with prod 68)]
From state #82
 [term 16:SHIFT(to state 40)] [term 17:SHIFT(to state 42)]
 [term 18:SHIFT(to state 43)] [term 19:SHIFT(to state 39)]
 [term 28:SHIFT(to state 45)] [term 29:SHIFT(to state 46)]
 [term 38:SHIFT(to state 44)] [term 39:SHIFT(to state 47)]
From state #83
 [term 22:SHIFT(to state 53)] [term 23:SHIFT(to state 54)]
 [term 25:SHIFT(to state 52)] [term 26:SHIFT(to state 49)]
 [term 27:SHIFT(to state 51)] [term 31:SHIFT(to state 56)]
 [term 32:SHIFT(to state 84)] [term 36:SHIFT(to state 55)]
From state #84
 [term 22:REDUCE(with prod 67)] [term 23:REDUCE(with prod 67)]
 [term 25:REDUCE(with prod 67)] [term 26:REDUCE(with prod 67)]
 [term 27:REDUCE(with prod 67)] [term 30:REDUCE(with prod 67)]
 [term 31:REDUCE(with prod 67)] [term 32:REDUCE(with prod 67)]
 [term 35:REDUCE(with prod 67)] [term 36:REDUCE(with prod 67)]
 [term 37:REDUCE(with prod 67)]
From state #85
 [term 16:SHIFT(to state 40)] [term 17:SHIFT(to state 42)]
 [term 18:SHIFT(to state 43)] [term 19:SHIFT(to state 39)]
 [term 28:SHIFT(to state 45)] [term 29:SHIFT(to state 46)]
 [term 38:SHIFT(to state 44)] [term 39:SHIFT(to state 47)]
From state #86
 [term 16:SHIFT(to state 40)] [term 17:SHIFT(to state 42)]
 [term 18:SHIFT(to state 43)] [term 19:SHIFT(to state 39)]
 [term 28:SHIFT(to state 45)] [term 29:SHIFT(to state 46)]
 [term 38:SHIFT(to state 44)] [term 39:SHIFT(to state 47)]
From state #87
 [term 22:SHIFT(to state 53)] [term 23:SHIFT(to state 54)]
 [term 25:SHIFT(to state 52)] [term 26:SHIFT(to state 49)]
 [term 27:SHIFT(to state 51)] [term 31:SHIFT(to state 56)]
 [term 32:SHIFT(to state 88)] [term 36:SHIFT(to state 55)]
From state #88
 [term 24:SHIFT(to state 89)]
From state #89
 [term 16:SHIFT(to state 40)] [term 17:SHIFT(to state 42)]
 [term 18:SHIFT(to state 43)] [term 19:SHIFT(to state 39)]
 [term 28:SHIFT(to state 45)] [term 29:SHIFT(to state 46)]
 [term 38:SHIFT(to state 44)] [term 39:SHIFT(to state 47)]
From state #90
 [term 22:SHIFT(to state 53)] [term 23:SHIFT(to state 54)]
 [term 25:SHIFT(to state 52)] [term 26:SHIFT(to state 49)]
 [term 27:SHIFT(to state 51)] [term 31:SHIFT(to state 56)]
 [term 35:SHIFT(to state 91)] [term 36:SHIFT(to state 55)]
From state #91
 [term 2:REDUCE(with prod 49)] [term 11:REDUCE(with prod 49)]
 [term 12:REDUCE(with prod 49)] [term 13:REDUCE(with prod 49)]
 [term 14:REDUCE(with prod 49)] [term 20:REDUCE(with prod 49)]
 [term 33:REDUCE(with prod 49)] [term 34:REDUCE(with prod 49)]
 [term 38:REDUCE(with prod 49)]
From state #92
 [term 22:SHIFT(to state 53)] [term 23:SHIFT(to state 54)]
 [term 25:SHIFT(to state 52)] [term 26:SHIFT(to state 49)]
 [term 27:SHIFT(to state 51)] [term 31:SHIFT(to state 56)]
 [term 35:SHIFT(to state 93)] [term 36:SHIFT(to state 55)]
From state #93
 [term 2:REDUCE(with prod 48)] [term 11:REDUCE(with prod 48)]
 [term 12:REDUCE(with prod 48)] [term 13:REDUCE(with prod 48)]
 [term 14:REDUCE(with prod 48)] [term 20:REDUCE(with prod 48)]
 [term 33:REDUCE(with prod 48)] [term 34:REDUCE(with prod 48)]
 [term 38:REDUCE(with prod 48)]
From state #94
 [term 16:SHIFT(to state 40)] [term 17:SHIFT(to state 42)]
 [term 18:SHIFT(to state 43)] [term 19:SHIFT(to state 39)]
 [term 28:SHIFT(to state 45)] [term 29:SHIFT(to state 46)]
 [term 38:SHIFT(to state 44)] [term 39:SHIFT(to state 47)]
From state #95
 [term 22:SHIFT(to state 53)] [term 23:SHIFT(to state 54)]
 [term 25:SHIFT(to state 52)] [term 26:SHIFT(to state 49)]
 [term 27:SHIFT(to state 51)] [term 30:SHIFT(to state 96)]
 [term 31:SHIFT(to state 56)] [term 36:SHIFT(to state 55)]
From state #96
 [term 35:SHIFT(to state 97)]
From state #97
 [term 2:REDUCE(with prod 47)] [term 11:REDUCE(with prod 47)]
 [term 12:REDUCE(with prod 47)] [term 13:REDUCE(with prod 47)]
 [term 14:REDUCE(with prod 47)] [term 20:REDUCE(with prod 47)]
 [term 33:REDUCE(with prod 47)] [term 34:REDUCE(with prod 47)]
 [term 38:REDUCE(with prod 47)]
From state #98
 [term 22:SHIFT(to state 53)] [term 23:SHIFT(to state 54)]
 [term 25:SHIFT(to state 52)] [term 26:SHIFT(to state 49)]
 [term 27:SHIFT(to state 51)] [term 31:SHIFT(to state 56)]
 [term 35:SHIFT(to state 99)] [term 36:SHIFT(to state 55)]
From state #99
 [term 2:REDUCE(with prod 50)] [term 11:REDUCE(with prod 50)]
 [term 12:REDUCE(with prod 50)] [term 13:REDUCE(with prod 50)]
 [term 14:REDUCE(with prod 50)] [term 20:REDUCE(with prod 50)]
 [term 33:REDUCE(with prod 50)] [term 34:REDUCE(with prod 50)]
 [term 38:REDUCE(with prod 50)]
From state #100
 [term 16:SHIFT(to state 40)] [term 17:SHIFT(to state 42)]
 [term 18:SHIFT(to state 43)] [term 19:SHIFT(to state 39)]
 [term 28:SHIFT(to state 45)] [term 29:SHIFT(to state 46)]
 [term 38:SHIFT(to state 44)] [term 39:SHIFT(to state 47)]
From state #101
 [term 22:SHIFT(to state 53)] [term 23:SHIFT(to state 54)]
 [term 25:SHIFT(to state 52)] [term 26:SHIFT(to state 49)]
 [term 27:SHIFT(to state 51)] [term 30:SHIFT(to state 102)]
 [term 31:SHIFT(to state 56)] [term 36:SHIFT(to state 55)]
From state #102
 [term 2:SHIFT(to state 19)] [term 11:SHIFT(to state 26)]
 [term 13:SHIFT(to state 18)] [term 14:SHIFT(to state 20)]
 [term 33:SHIFT(to state 28)] [term 38:SHIFT(to state 4)]
From state #103
 [term 2:REDUCE(with prod 46)] [term 11:REDUCE(with prod 46)]
 [term 12:REDUCE(with prod 46)] [term 13:REDUCE(with prod 46)]
 [term 14:REDUCE(with prod 46)] [term 20:REDUCE(with prod 46)]
 [term 33:REDUCE(with prod 46)] [term 34:REDUCE(with prod 46)]
 [term 38:REDUCE(with prod 46)]
From state #104
 [term 0:REDUCE(with prod 4)] [term 3:REDUCE(with prod 4)]
From state #105
 [term 0:REDUCE(with prod 0)] [term 3:SHIFT(to state 106)]
From state #106
 [term 38:SHIFT(to state 4)]
From state #107
 [term 8:SHIFT(to state 108)] [term 33:SHIFT(to state 109)]
From state #108
 [term 38:SHIFT(to state 4)]
From state #109
 [term 4:SHIFT(to state 113)] [term 9:SHIFT(to state 111)]
 [term 10:SHIFT(to state 116)] [term 34:SHIFT(to state 114)]
 [term 38:SHIFT(to state 118)]
From state #110
 [term 38:SHIFT(to state 4)]
From state #111
 [term 31:SHIFT(to state 178)] [term 38:REDUCE(with prod 32)]
From state #112
 [term 4:SHIFT(to state 113)] [term 9:SHIFT(to state 111)]
 [term 10:SHIFT(to state 116)] [term 34:SHIFT(to state 175)]
 [term 38:SHIFT(to state 118)]
From state #113
 [term 9:SHIFT(to state 111)] [term 10:SHIFT(to state 116)]
 [term 38:SHIFT(to state 118)]
From state #114
 [term 0:REDUCE(with prod 13)] [term 3:REDUCE(with prod 13)]
From state #115
 [term 4:REDUCE(with prod 14)] [term 34:REDUCE(with prod 14)]
From state #116
 [term 38:REDUCE(with prod 31)]
From state #117
 [term 2:REDUCE(with prod 24)] [term 4:REDUCE(with prod 24)]
 [term 9:REDUCE(with prod 24)] [term 10:REDUCE(with prod 24)]
 [term 11:REDUCE(with prod 24)] [term 13:REDUCE(with prod 24)]
 [term 14:REDUCE(with prod 24)] [term 20:REDUCE(with prod 24)]
 [term 33:REDUCE(with prod 24)] [term 34:REDUCE(with prod 24)]
 [term 38:REDUCE(with prod 24)]
From state #118
 [term 38:REDUCE(with prod 33)]
From state #119
 [term 4:SHIFT(to state 113)] [term 34:SHIFT(to state 120)]
From state #120
 [term 0:REDUCE(with prod 12)] [term 3:REDUCE(with prod 12)]
From state #121
 [term 4:REDUCE(with prod 15)] [term 34:REDUCE(with prod 15)]
From state #122
 [term 38:SHIFT(to state 4)]
From state #123
 [term 29:SHIFT(to state 124)]
From state #124
 [term 9:SHIFT(to state 111)] [term 10:SHIFT(to state 116)]
 [term 30:SHIFT(to state 128)] [term 38:SHIFT(to state 118)]
From state #125
 [term 30:SHIFT(to state 153)] [term 37:SHIFT(to state 152)]
From state #126
 [term 38:SHIFT(to state 4)]
From state #127
 [term 30:REDUCE(with prod 27)] [term 37:REDUCE(with prod 27)]
From state #128
 [term 33:SHIFT(to state 129)]
From state #129
 [term 2:SHIFT(to state 19)] [term 9:SHIFT(to state 111)]
 [term 10:SHIFT(to state 116)] [term 11:SHIFT(to state 26)]
 [term 13:SHIFT(to state 18)] [term 14:SHIFT(to state 20)]
 [term 20:SHIFT(to state 130)] [term 33:SHIFT(to state 28)]
 [term 38:SHIFT(to state 131)]
From state #130
 [term 16:SHIFT(to state 40)] [term 17:SHIFT(to state 42)]
 [term 18:SHIFT(to state 43)] [term 19:SHIFT(to state 39)]
 [term 28:SHIFT(to state 45)] [term 29:SHIFT(to state 46)]
 [term 38:SHIFT(to state 44)] [term 39:SHIFT(to state 47)]
From state #131
 [term 24:REDUCE(with prod 71)] [term 31:REDUCE(with prod 71)]
 [term 38:REDUCE(with prod 33)]
From state #132
 [term 2:SHIFT(to state 19)] [term 9:SHIFT(to state 111)]
 [term 10:SHIFT(to state 116)] [term 11:SHIFT(to state 26)]
 [term 13:SHIFT(to state 18)] [term 14:SHIFT(to state 20)]
 [term 20:SHIFT(to state 138)] [term 33:SHIFT(to state 28)]
 [term 38:SHIFT(to state 131)]
From state #133
 [term 2:SHIFT(to state 19)] [term 11:SHIFT(to state 26)]
 [term 13:SHIFT(to state 18)] [term 14:SHIFT(to state 20)]
 [term 20:SHIFT(to state 134)] [term 33:SHIFT(to state 28)]
 [term 38:SHIFT(to state 4)]
From state #134
 [term 16:SHIFT(to state 40)] [term 17:SHIFT(to state 42)]
 [term 18:SHIFT(to state 43)] [term 19:SHIFT(to state 39)]
 [term 28:SHIFT(to state 45)] [term 29:SHIFT(to state 46)]
 [term 38:SHIFT(to state 44)] [term 39:SHIFT(to state 47)]
From state #135
 [term 22:SHIFT(to state 53)] [term 23:SHIFT(to state 54)]
 [term 25:SHIFT(to state 52)] [term 26:SHIFT(to state 49)]
 [term 27:SHIFT(to state 51)] [term 31:SHIFT(to state 56)]
 [term 35:SHIFT(to state 136)] [term 36:SHIFT(to state 55)]
From state #136
 [term 34:SHIFT(to state 137)]
From state #137
 [term 4:REDUCE(with prod 22)] [term 34:REDUCE(with prod 22)]
From state #138
 [term 16:SHIFT(to state 40)] [term 17:SHIFT(to state 42)]
 [term 18:SHIFT(to state 43)] [term 19:SHIFT(to state 39)]
 [term 28:SHIFT(to state 45)] [term 29:SHIFT(to state 46)]
 [term 38:SHIFT(to state 44)] [term 39:SHIFT(to state 47)]
From state #139
 [term 2:REDUCE(with prod 25)] [term 4:REDUCE(with prod 25)]
 [term 9:REDUCE(with prod 25)] [term 10:REDUCE(with prod 25)]
 [term 11:REDUCE(with prod 25)] [term 13:REDUCE(with prod 25)]
 [term 14:REDUCE(with prod 25)] [term 20:REDUCE(with prod 25)]
 [term 33:REDUCE(with prod 25)] [term 34:REDUCE(with prod 25)]
 [term 38:REDUCE(with prod 25)]
From state #140
 [term 2:SHIFT(to state 19)] [term 11:SHIFT(to state 26)]
 [term 13:SHIFT(to state 18)] [term 14:SHIFT(to state 20)]
 [term 20:SHIFT(to state 141)] [term 33:SHIFT(to state 28)]
 [term 38:SHIFT(to state 4)]
From state #141
 [term 16:SHIFT(to state 40)] [term 17:SHIFT(to state 42)]
 [term 18:SHIFT(to state 43)] [term 19:SHIFT(to state 39)]
 [term 28:SHIFT(to state 45)] [term 29:SHIFT(to state 46)]
 [term 38:SHIFT(to state 44)] [term 39:SHIFT(to state 47)]
From state #142
 [term 22:SHIFT(to state 53)] [term 23:SHIFT(to state 54)]
 [term 25:SHIFT(to state 52)] [term 26:SHIFT(to state 49)]
 [term 27:SHIFT(to state 51)] [term 31:SHIFT(to state 56)]
 [term 35:SHIFT(to state 143)] [term 36:SHIFT(to state 55)]
From state #143
 [term 34:SHIFT(to state 144)]
From state #144
 [term 4:REDUCE(with prod 20)] [term 34:REDUCE(with prod 20)]
From state #145
 [term 22:SHIFT(to state 53)] [term 23:SHIFT(to state 54)]
 [term 25:SHIFT(to state 52)] [term 26:SHIFT(to state 49)]
 [term 27:SHIFT(to state 51)] [term 31:SHIFT(to state 56)]
 [term 35:SHIFT(to state 146)] [term 36:SHIFT(to state 55)]
From state #146
 [term 34:SHIFT(to state 147)]
From state #147
 [term 4:REDUCE(with prod 21)] [term 34:REDUCE(with prod 21)]
From state #148
 [term 22:SHIFT(to state 53)] [term 23:SHIFT(to state 54)]
 [term 25:SHIFT(to state 52)] [term 26:SHIFT(to state 49)]
 [term 27:SHIFT(to state 51)] [term 31:SHIFT(to state 56)]
 [term 35:SHIFT(to state 149)] [term 36:SHIFT(to state 55)]
From state #149
 [term 34:SHIFT(to state 150)]
From state #150
 [term 4:REDUCE(with prod 23)] [term 34:REDUCE(with prod 23)]
From state #151
 [term 30:REDUCE(with prod 29)] [term 37:REDUCE(with prod 29)]
From state #152
 [term 9:SHIFT(to state 111)] [term 10:SHIFT(to state 116)]
 [term 38:SHIFT(to state 118)]
From state #153
 [term 33:SHIFT(to state 154)]
From state #154
 [term 2:SHIFT(to state 19)] [term 9:SHIFT(to state 111)]
 [term 10:SHIFT(to state 116)] [term 11:SHIFT(to state 26)]
 [term 13:SHIFT(to state 18)] [term 14:SHIFT(to state 20)]
 [term 20:SHIFT(to state 155)] [term 33:SHIFT(to state 28)]
 [term 38:SHIFT(to state 131)]
From state #155
 [term 16:SHIFT(to state 40)] [term 17:SHIFT(to state 42)]
 [term 18:SHIFT(to state 43)] [term 19:SHIFT(to state 39)]
 [term 28:SHIFT(to state 45)] [term 29:SHIFT(to state 46)]
 [term 38:SHIFT(to state 44)] [term 39:SHIFT(to state 47)]
From state #156
 [term 2:SHIFT(to state 19)] [term 9:SHIFT(to state 111)]
 [term 10:SHIFT(to state 116)] [term 11:SHIFT(to state 26)]
 [term 13:SHIFT(to state 18)] [term 14:SHIFT(to state 20)]
 [term 20:SHIFT(to state 162)] [term 33:SHIFT(to state 28)]
 [term 38:SHIFT(to state 131)]
From state #157
 [term 2:SHIFT(to state 19)] [term 11:SHIFT(to state 26)]
 [term 13:SHIFT(to state 18)] [term 14:SHIFT(to state 20)]
 [term 20:SHIFT(to state 158)] [term 33:SHIFT(to state 28)]
 [term 38:SHIFT(to state 4)]
From state #158
 [term 16:SHIFT(to state 40)] [term 17:SHIFT(to state 42)]
 [term 18:SHIFT(to state 43)] [term 19:SHIFT(to state 39)]
 [term 28:SHIFT(to state 45)] [term 29:SHIFT(to state 46)]
 [term 38:SHIFT(to state 44)] [term 39:SHIFT(to state 47)]
From state #159
 [term 22:SHIFT(to state 53)] [term 23:SHIFT(to state 54)]
 [term 25:SHIFT(to state 52)] [term 26:SHIFT(to state 49)]
 [term 27:SHIFT(to state 51)] [term 31:SHIFT(to state 56)]
 [term 35:SHIFT(to state 160)] [term 36:SHIFT(to state 55)]
From state #160
 [term 34:SHIFT(to state 161)]
From state #161
 [term 4:REDUCE(with prod 18)] [term 34:REDUCE(with prod 18)]
From state #162
 [term 16:SHIFT(to state 40)] [term 17:SHIFT(to state 42)]
 [term 18:SHIFT(to state 43)] [term 19:SHIFT(to state 39)]
 [term 28:SHIFT(to state 45)] [term 29:SHIFT(to state 46)]
 [term 38:SHIFT(to state 44)] [term 39:SHIFT(to state 47)]
From state #163
 [term 2:SHIFT(to state 19)] [term 11:SHIFT(to state 26)]
 [term 13:SHIFT(to state 18)] [term 14:SHIFT(to state 20)]
 [term 20:SHIFT(to state 164)] [term 33:SHIFT(to state 28)]
 [term 38:SHIFT(to state 4)]
From state #164
 [term 16:SHIFT(to state 40)] [term 17:SHIFT(to state 42)]
 [term 18:SHIFT(to state 43)] [term 19:SHIFT(to state 39)]
 [term 28:SHIFT(to state 45)] [term 29:SHIFT(to state 46)]
 [term 38:SHIFT(to state 44)] [term 39:SHIFT(to state 47)]
From state #165
 [term 22:SHIFT(to state 53)] [term 23:SHIFT(to state 54)]
 [term 25:SHIFT(to state 52)] [term 26:SHIFT(to state 49)]
 [term 27:SHIFT(to state 51)] [term 31:SHIFT(to state 56)]
 [term 35:SHIFT(to state 166)] [term 36:SHIFT(to state 55)]
From state #166
 [term 34:SHIFT(to state 167)]
From state #167
 [term 4:REDUCE(with prod 16)] [term 34:REDUCE(with prod 16)]
From state #168
 [term 22:SHIFT(to state 53)] [term 23:SHIFT(to state 54)]
 [term 25:SHIFT(to state 52)] [term 26:SHIFT(to state 49)]
 [term 27:SHIFT(to state 51)] [term 31:SHIFT(to state 56)]
 [term 35:SHIFT(to state 169)] [term 36:SHIFT(to state 55)]
From state #169
 [term 34:SHIFT(to state 170)]
From state #170
 [term 4:REDUCE(with prod 17)] [term 34:REDUCE(with prod 17)]
From state #171
 [term 22:SHIFT(to state 53)] [term 23:SHIFT(to state 54)]
 [term 25:SHIFT(to state 52)] [term 26:SHIFT(to state 49)]
 [term 27:SHIFT(to state 51)] [term 31:SHIFT(to state 56)]
 [term 35:SHIFT(to state 172)] [term 36:SHIFT(to state 55)]
From state #172
 [term 34:SHIFT(to state 173)]
From state #173
 [term 4:REDUCE(with prod 19)] [term 34:REDUCE(with prod 19)]
From state #174
 [term 30:REDUCE(with prod 28)] [term 37:REDUCE(with prod 28)]
From state #175
 [term 0:REDUCE(with prod 11)] [term 3:REDUCE(with prod 11)]
From state #176
 [term 4:SHIFT(to state 113)] [term 34:SHIFT(to state 177)]
From state #177
 [term 0:REDUCE(with prod 10)] [term 3:REDUCE(with prod 10)]
From state #178
 [term 32:SHIFT(to state 179)]
From state #179
 [term 38:REDUCE(with prod 30)]
From state #180
 [term 35:SHIFT(to state 181)]
From state #181
 [term 2:REDUCE(with prod 26)] [term 4:REDUCE(with prod 26)]
 [term 9:REDUCE(with prod 26)] [term 10:REDUCE(with prod 26)]
 [term 11:REDUCE(with prod 26)] [term 13:REDUCE(with prod 26)]
 [term 14:REDUCE(with prod 26)] [term 20:REDUCE(with prod 26)]
 [term 33:REDUCE(with prod 26)] [term 34:REDUCE(with prod 26)]
 [term 38:REDUCE(with prod 26)]
From state #182
 [term 33:SHIFT(to state 183)]
From state #183
 [term 4:SHIFT(to state 113)] [term 9:SHIFT(to state 111)]
 [term 10:SHIFT(to state 116)] [term 34:SHIFT(to state 185)]
 [term 38:SHIFT(to state 118)]
From state #184
 [term 4:SHIFT(to state 113)] [term 9:SHIFT(to state 111)]
 [term 10:SHIFT(to state 116)] [term 34:SHIFT(to state 188)]
 [term 38:SHIFT(to state 118)]
From state #185
 [term 0:REDUCE(with prod 9)] [term 3:REDUCE(with prod 9)]
From state #186
 [term 4:SHIFT(to state 113)] [term 34:SHIFT(to state 187)]
From state #187
 [term 0:REDUCE(with prod 8)] [term 3:REDUCE(with prod 8)]
From state #188
 [term 0:REDUCE(with prod 7)] [term 3:REDUCE(with prod 7)]
From state #189
 [term 4:SHIFT(to state 113)] [term 34:SHIFT(to state 190)]
From state #190
 [term 0:REDUCE(with prod 6)] [term 3:REDUCE(with prod 6)]
From state #191
 [term 0:REDUCE(with prod 5)] [term 3:REDUCE(with prod 5)]
From state #192
 [term 0:REDUCE(with prod 1)]
------------------------------
-------- REDUCE_TABLE --------
From state #0
 [non term 0->state 1] [non term 1->state 2]
From state #1
From state #2
 [non term 2->state 105] [non term 3->state 104]
From state #3
 [non term 22->state 5]
From state #4
From state #5
From state #6
From state #7
From state #8
From state #9
From state #10
From state #11
From state #12
From state #13
From state #14
 [non term 22->state 15]
From state #15
From state #16
From state #17
 [non term 12->state 27] [non term 13->state 22] [non term 14->state 24]
 [non term 15->state 25] [non term 16->state 29] [non term 17->state 30]
 [non term 18->state 31] [non term 19->state 21] [non term 22->state 23]
From state #18
From state #19
 [non term 20->state 98]
From state #20
From state #21
From state #22
From state #23
From state #24
From state #25
From state #26
From state #27
From state #28
 [non term 11->state 32] [non term 12->state 33] [non term 13->state 22]
 [non term 14->state 24] [non term 15->state 25] [non term 16->state 29]
 [non term 17->state 30] [non term 18->state 31] [non term 19->state 21]
 [non term 22->state 23]
From state #29
From state #30
From state #31
From state #32
 [non term 12->state 35] [non term 13->state 22] [non term 14->state 24]
 [non term 15->state 25] [non term 16->state 29] [non term 17->state 30]
 [non term 18->state 31] [non term 19->state 21] [non term 22->state 23]
From state #33
From state #34
From state #35
From state #36
From state #37
From state #38
 [non term 20->state 41]
From state #39
 [non term 22->state 79]
From state #40
From state #41
From state #42
From state #43
From state #44
From state #45
 [non term 20->state 73]
From state #46
 [non term 20->state 48]
From state #47
From state #48
From state #49
 [non term 20->state 72]
From state #50
From state #51
 [non term 20->state 71]
From state #52
 [non term 20->state 70]
From state #53
 [non term 20->state 69]
From state #54
 [non term 20->state 68]
From state #55
 [non term 22->state 60]
From state #56
 [non term 20->state 57]
From state #57
From state #58
From state #59
From state #60
From state #61
 [non term 20->state 63] [non term 21->state 62]
From state #62
From state #63
From state #64
From state #65
 [non term 20->state 67]
From state #66
From state #67
From state #68
From state #69
From state #70
From state #71
From state #72
From state #73
From state #74
 [non term 12->state 75] [non term 13->state 22] [non term 14->state 24]
 [non term 15->state 25] [non term 16->state 29] [non term 17->state 30]
 [non term 18->state 31] [non term 19->state 21] [non term 22->state 23]
From state #75
From state #76
 [non term 12->state 77] [non term 13->state 22] [non term 14->state 24]
 [non term 15->state 25] [non term 16->state 29] [non term 17->state 30]
 [non term 18->state 31] [non term 19->state 21] [non term 22->state 23]
From state #77
From state #78
From state #79
From state #80
From state #81
From state #82
 [non term 20->state 83]
From state #83
From state #84
From state #85
 [non term 20->state 92]
From state #86
 [non term 20->state 87]
From state #87
From state #88
From state #89
 [non term 20->state 90]
From state #90
From state #91
From state #92
From state #93
From state #94
 [non term 20->state 95]
From state #95
From state #96
From state #97
From state #98
From state #99
From state #100
 [non term 20->state 101]
From state #101
From state #102
 [non term 12->state 103] [non term 13->state 22] [non term 14->state 24]
 [non term 15->state 25] [non term 16->state 29] [non term 17->state 30]
 [non term 18->state 31] [non term 19->state 21] [non term 22->state 23]
From state #103
From state #104
From state #105
 [non term 3->state 191]
From state #106
 [non term 22->state 107]
From state #107
From state #108
 [non term 22->state 182]
From state #109
 [non term 4->state 119] [non term 5->state 115] [non term 6->state 112]
 [non term 7->state 117] [non term 10->state 110]
From state #110
 [non term 22->state 180]
From state #111
From state #112
 [non term 4->state 176] [non term 5->state 115] [non term 7->state 139]
 [non term 10->state 110]
From state #113
 [non term 10->state 122]
From state #114
From state #115
From state #116
From state #117
From state #118
From state #119
 [non term 5->state 121]
From state #120
From state #121
From state #122
 [non term 22->state 123]
From state #123
From state #124
 [non term 8->state 125] [non term 9->state 127] [non term 10->state 126]
From state #125
From state #126
 [non term 22->state 151]
From state #127
From state #128
From state #129
 [non term 6->state 132] [non term 7->state 117] [non term 10->state 110]
 [non term 11->state 133] [non term 12->state 33] [non term 13->state 22]
 [non term 14->state 24] [non term 15->state 25] [non term 16->state 29]
 [non term 17->state 30] [non term 18->state 31] [non term 19->state 21]
 [non term 22->state 23]
From state #130
 [non term 20->state 148]
From state #131
From state #132
 [non term 7->state 139] [non term 10->state 110] [non term 11->state 140]
 [non term 12->state 33] [non term 13->state 22] [non term 14->state 24]
 [non term 15->state 25] [non term 16->state 29] [non term 17->state 30]
 [non term 18->state 31] [non term 19->state 21] [non term 22->state 23]
From state #133
 [non term 12->state 35] [non term 13->state 22] [non term 14->state 24]
 [non term 15->state 25] [non term 16->state 29] [non term 17->state 30]
 [non term 18->state 31] [non term 19->state 21] [non term 22->state 23]
From state #134
 [non term 20->state 135]
From state #135
From state #136
From state #137
From state #138
 [non term 20->state 145]
From state #139
From state #140
 [non term 12->state 35] [non term 13->state 22] [non term 14->state 24]
 [non term 15->state 25] [non term 16->state 29] [non term 17->state 30]
 [non term 18->state 31] [non term 19->state 21] [non term 22->state 23]
From state #141
 [non term 20->state 142]
From state #142
From state #143
From state #144
From state #145
From state #146
From state #147
From state #148
From state #149
From state #150
From state #151
From state #152
 [non term 9->state 174] [non term 10->state 126]
From state #153
From state #154
 [non term 6->state 156] [non term 7->state 117] [non term 10->state 110]
 [non term 11->state 157] [non term 12->state 33] [non term 13->state 22]
 [non term 14->state 24] [non term 15->state 25] [non term 16->state 29]
 [non term 17->state 30] [non term 18->state 31] [non term 19->state 21]
 [non term 22->state 23]
From state #155
 [non term 20->state 171]
From state #156
 [non term 7->state 139] [non term 10->state 110] [non term 11->state 163]
 [non term 12->state 33] [non term 13->state 22] [non term 14->state 24]
 [non term 15->state 25] [non term 16->state 29] [non term 17->state 30]
 [non term 18->state 31] [non term 19->state 21] [non term 22->state 23]
From state #157
 [non term 12->state 35] [non term 13->state 22] [non term 14->state 24]
 [non term 15->state 25] [non term 16->state 29] [non term 17->state 30]
 [non term 18->state 31] [non term 19->state 21] [non term 22->state 23]
From state #158
 [non term 20->state 159]
From state #159
From state #160
From state #161
From state #162
 [non term 20->state 168]
From state #163
 [non term 12->state 35] [non term 13->state 22] [non term 14->state 24]
 [non term 15->state 25] [non term 16->state 29] [non term 17->state 30]
 [non term 18->state 31] [non term 19->state 21] [non term 22->state 23]
From state #164
 [non term 20->state 165]
From state #165
From state #166
From state #167
From state #168
From state #169
From state #170
From state #171
From state #172
From state #173
From state #174
From state #175
From state #176
 [non term 5->state 121]
From state #177
From state #178
From state #179
From state #180
From state #181
From state #182
From state #183
 [non term 4->state 186] [non term 5->state 115] [non term 6->state 184]
 [non term 7->state 117] [non term 10->state 110]
From state #184
 [non term 4->state 189] [non term 5->state 115] [non term 7->state 139]
 [non term 10->state 110]
From state #185
From state #186
 [non term 5->state 121]
From state #187
From state #188
From state #189
 [non term 5->state 121]
From state #190
From state #191
From state #192
-----------------------------
------- CUP v0.11b 20160615 (GIT 4ac7450) Parser Generation Summary -------
  0 errors and 0 warnings
  40 terminals, 23 non-terminals, and 72 productions declared, 
  producing 193 unique parse states.
  0 terminals declared but not used.
  0 non-terminals declared but not used.
  0 productions never reduced.
  0 conflicts detected (0 expected).
  Code written to "parser.java", and "sym.java".
---------------------------------------------------- (CUP v0.11b 20160615 (GIT 4ac7450))
