	.text
	.globl	_asm_main
_asm_main:
	pushq %rbp
	movq %rsp,%rbp
	pushq %rdi
	call QS$QS
	movq %rax,%rdi
	movq $10,%rax
	pushq %rax
	popq %rsi
	call QS$Start
	popq %rdi
	pushq %rdi
	movq %rax,%rdi
	movq %rsp,%r12
andq $-16,%rsp
	call _put
	movq %r12,%rsp
	popq %rdi
	movq %rbp,%rsp
	popq %rbp
	ret 
QS$Start:
	pushq %rbp
	movq %rsp,%rbp
	subq $16,%rsp
	movq %rsi,-8(%rbp)
	pushq %rdi
	movq %rdi,%rax
	movq -8(%rbp),%rax
	pushq %rax
	popq %rsi
	call QS$Init
	popq %rdi
	movq %rax,-16(%rbp)
	pushq %rdi
	movq %rdi,%rax
	call QS$Print
	popq %rdi
	movq %rax,-16(%rbp)
	movq $9999,%rax
	pushq %rdi
	movq %rax,%rdi
	movq %rsp,%r12
andq $-16,%rsp
	call _put
	movq %r12,%rsp
	popq %rdi
	movq 16(%rdi),%rax
	pushq %rax
	movq $1,%rax
	popq %rdx
	negq %rax
	addq %rdx,%rax
	movq %rax,-16(%rbp)
	pushq %rdi
	movq %rdi,%rax
	movq $0,%rax
	pushq %rax
	movq -16(%rbp),%rax
	pushq %rax
	popq %rdx
	popq %rsi
	call QS$Sort
	popq %rdi
	movq %rax,-16(%rbp)
	pushq %rdi
	movq %rdi,%rax
	call QS$Print
	popq %rdi
	movq %rax,-16(%rbp)
	movq $0,%rax
	movq %rbp,%rsp
	popq %rbp
	ret 
QS$Sort:
	pushq %rbp
	movq %rsp,%rbp
	subq $80,%rsp
	movq %rsi,-8(%rbp)
	movq %rdx,-16(%rbp)
	movq $0,%rax
	movq %rax,-56(%rbp)
	movq $1,%r9
	movq -8(%rbp),%rax
	movq %rax,%r11
	movq -16(%rbp),%rax
	movq %r11,%rdx
	movq %rax,%rcx
	movq $0,%rax
	cmpq %rcx,%rdx
	cmovlq %r9,%rax
	cmpq $0,%rax
	je L1
	movq 8(%rdi),%rax
	pushq %rax
	movq -16(%rbp),%rax
	popq %rdx
	movq 8(%rdx,%rax,8),%rax
	movq %rax,-24(%rbp)
	movq -8(%rbp),%rax
	pushq %rax
	movq $1,%rax
	popq %rdx
	negq %rax
	addq %rdx,%rax
	movq %rax,-32(%rbp)
	movq -16(%rbp),%rax
	movq %rax,-40(%rbp)
	movq $1,%rax
	movq %rax,-64(%rbp)
L3:
	movq -64(%rbp),%rax
	cmpq $0,%rax
	je L4
	movq $1,%rax
	movq %rax,-72(%rbp)
L5:
	movq -72(%rbp),%rax
	cmpq $0,%rax
	je L6
	movq -32(%rbp),%rax
	pushq %rax
	movq $1,%rax
	popq %rdx
	addq %rdx,%rax
	movq %rax,-32(%rbp)
	movq 8(%rdi),%rax
	pushq %rax
	movq -32(%rbp),%rax
	popq %rdx
	movq 8(%rdx,%rax,8),%rax
	movq %rax,-80(%rbp)
	movq $1,%r9
	movq -80(%rbp),%rax
	movq %rax,%r11
	movq -24(%rbp),%rax
	movq %r11,%rdx
	movq %rax,%rcx
	movq $0,%rax
	cmpq %rcx,%rdx
	cmovlq %r9,%rax
	xorq $1,%rax
	cmpq $0,%rax
	je L7
	movq $0,%rax
	movq %rax,-72(%rbp)
	jmp L8
L7:
	movq $1,%rax
	movq %rax,-72(%rbp)
L8:
	jmp L5
L6:
	movq $1,%rax
	movq %rax,-72(%rbp)
L9:
	movq -72(%rbp),%rax
	cmpq $0,%rax
	je L10
	movq -40(%rbp),%rax
	pushq %rax
	movq $1,%rax
	popq %rdx
	negq %rax
	addq %rdx,%rax
	movq %rax,-40(%rbp)
	movq 8(%rdi),%rax
	pushq %rax
	movq -40(%rbp),%rax
	popq %rdx
	movq 8(%rdx,%rax,8),%rax
	movq %rax,-80(%rbp)
	movq $1,%r9
	movq -24(%rbp),%rax
	movq %rax,%r11
	movq -80(%rbp),%rax
	movq %r11,%rdx
	movq %rax,%rcx
	movq $0,%rax
	cmpq %rcx,%rdx
	cmovlq %r9,%rax
	xorq $1,%rax
	cmpq $0,%rax
	je L11
	movq $0,%rax
	movq %rax,-72(%rbp)
	jmp L12
L11:
	movq $1,%rax
	movq %rax,-72(%rbp)
L12:
	jmp L9
L10:
	movq 8(%rdi),%rax
	pushq %rax
	movq -32(%rbp),%rax
	popq %rdx
	movq 8(%rdx,%rax,8),%rax
	movq %rax,-56(%rbp)
	movq 8(%rdi),%rcx
	movq -32(%rbp),%rax
	pushq %rax
	movq 8(%rdi),%rax
	pushq %rax
	movq -40(%rbp),%rax
	popq %rdx
	movq 8(%rdx,%rax,8),%rax
	popq %rdx
	movq %rax,8(%rcx,%rdx,8)
	movq 8(%rdi),%rcx
	movq -40(%rbp),%rax
	pushq %rax
	movq -56(%rbp),%rax
	popq %rdx
	movq %rax,8(%rcx,%rdx,8)
	movq $1,%r9
	movq -40(%rbp),%rax
	movq %rax,%r11
	movq -32(%rbp),%rax
	pushq %rax
	movq $1,%rax
	popq %rdx
	addq %rdx,%rax
	movq %r11,%rdx
	movq %rax,%rcx
	movq $0,%rax
	cmpq %rcx,%rdx
	cmovlq %r9,%rax
	cmpq $0,%rax
	je L13
	movq $0,%rax
	movq %rax,-64(%rbp)
	jmp L14
L13:
	movq $1,%rax
	movq %rax,-64(%rbp)
L14:
	jmp L3
L4:
	movq 8(%rdi),%rcx
	movq -40(%rbp),%rax
	pushq %rax
	movq 8(%rdi),%rax
	pushq %rax
	movq -32(%rbp),%rax
	popq %rdx
	movq 8(%rdx,%rax,8),%rax
	popq %rdx
	movq %rax,8(%rcx,%rdx,8)
	movq 8(%rdi),%rcx
	movq -32(%rbp),%rax
	pushq %rax
	movq 8(%rdi),%rax
	pushq %rax
	movq -16(%rbp),%rax
	popq %rdx
	movq 8(%rdx,%rax,8),%rax
	popq %rdx
	movq %rax,8(%rcx,%rdx,8)
	movq 8(%rdi),%rcx
	movq -16(%rbp),%rax
	pushq %rax
	movq -56(%rbp),%rax
	popq %rdx
	movq %rax,8(%rcx,%rdx,8)
	pushq %rdi
	movq %rdi,%rax
	movq -8(%rbp),%rax
	pushq %rax
	movq -32(%rbp),%rax
	pushq %rax
	movq $1,%rax
	popq %rdx
	negq %rax
	addq %rdx,%rax
	pushq %rax
	popq %rdx
	popq %rsi
	call QS$Sort
	popq %rdi
	movq %rax,-48(%rbp)
	pushq %rdi
	movq %rdi,%rax
	movq -32(%rbp),%rax
	pushq %rax
	movq $1,%rax
	popq %rdx
	addq %rdx,%rax
	pushq %rax
	movq -16(%rbp),%rax
	pushq %rax
	popq %rdx
	popq %rsi
	call QS$Sort
	popq %rdi
	movq %rax,-48(%rbp)
	jmp L2
L1:
	movq $0,%rax
	movq %rax,-48(%rbp)
L2:
	movq $0,%rax
	movq %rbp,%rsp
	popq %rbp
	ret 
QS$Print:
	pushq %rbp
	movq %rsp,%rbp
	subq $8,%rsp
	movq $0,%rax
	movq %rax,-8(%rbp)
L15:
	movq $1,%r9
	movq -8(%rbp),%rax
	movq %rax,%r11
	movq 16(%rdi),%rax
	movq %r11,%rdx
	movq %rax,%rcx
	movq $0,%rax
	cmpq %rcx,%rdx
	cmovlq %r9,%rax
	cmpq $0,%rax
	je L16
	movq 8(%rdi),%rax
	pushq %rax
	movq -8(%rbp),%rax
	popq %rdx
	movq 8(%rdx,%rax,8),%rax
	pushq %rdi
	movq %rax,%rdi
	movq %rsp,%r12
andq $-16,%rsp
	call _put
	movq %r12,%rsp
	popq %rdi
	movq -8(%rbp),%rax
	pushq %rax
	movq $1,%rax
	popq %rdx
	addq %rdx,%rax
	movq %rax,-8(%rbp)
	jmp L15
L16:
	movq $0,%rax
	movq %rbp,%rsp
	popq %rbp
	ret 
QS$Init:
	pushq %rbp
	movq %rsp,%rbp
	subq $8,%rsp
	movq %rsi,-8(%rbp)
	movq -8(%rbp),%rax
	movq %rax,16(%rdi)
	movq -8(%rbp),%rax
	pushq %rax
	incq %rax
	imulq $8,%rax
	pushq %rdi
	movq %rax,%rdi
	pushq %rax
	call _mjcalloc
	popq %rdx
	popq %rdi
	popq %rdx
	movq %rdx,(%rax)
	movq %rax,8(%rdi)
	movq 8(%rdi),%rcx
	movq $0,%rax
	pushq %rax
	movq $20,%rax
	popq %rdx
	movq %rax,8(%rcx,%rdx,8)
	movq 8(%rdi),%rcx
	movq $1,%rax
	pushq %rax
	movq $7,%rax
	popq %rdx
	movq %rax,8(%rcx,%rdx,8)
	movq 8(%rdi),%rcx
	movq $2,%rax
	pushq %rax
	movq $12,%rax
	popq %rdx
	movq %rax,8(%rcx,%rdx,8)
	movq 8(%rdi),%rcx
	movq $3,%rax
	pushq %rax
	movq $18,%rax
	popq %rdx
	movq %rax,8(%rcx,%rdx,8)
	movq 8(%rdi),%rcx
	movq $4,%rax
	pushq %rax
	movq $2,%rax
	popq %rdx
	movq %rax,8(%rcx,%rdx,8)
	movq 8(%rdi),%rcx
	movq $5,%rax
	pushq %rax
	movq $11,%rax
	popq %rdx
	movq %rax,8(%rcx,%rdx,8)
	movq 8(%rdi),%rcx
	movq $6,%rax
	pushq %rax
	movq $6,%rax
	popq %rdx
	movq %rax,8(%rcx,%rdx,8)
	movq 8(%rdi),%rcx
	movq $7,%rax
	pushq %rax
	movq $9,%rax
	popq %rdx
	movq %rax,8(%rcx,%rdx,8)
	movq 8(%rdi),%rcx
	movq $8,%rax
	pushq %rax
	movq $19,%rax
	popq %rdx
	movq %rax,8(%rcx,%rdx,8)
	movq 8(%rdi),%rcx
	movq $9,%rax
	pushq %rax
	movq $5,%rax
	popq %rdx
	movq %rax,8(%rcx,%rdx,8)
	movq $0,%rax
	movq %rbp,%rsp
	popq %rbp
	ret 
QS$QS:
	pushq %rbp
	movq %rsp,%rbp
	pushq %rdi
	movq $10,%rdi
	call _mjcalloc
	popq %rdi
	leaq QS$$(%rip),%rdx
	movq %rdx,(%rax)
	movq %rbp,%rsp
	popq %rbp
	ret 
	.data
QS$$: .quad 0
	.quad QS$QS
	.quad QS$Start
	.quad QS$Sort
	.quad QS$Print
	.quad QS$Init
